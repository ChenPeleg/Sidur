{"version":3,"sources":["models/profile-menu-click-action-type.enum.ts","assets/fonts/Assistant-Regular.ttf","hoc/themes.ts","services/translations.ts","store/types.actions.ts","components/NavBar/profile-menu.tsx","models/SidurMenuClickActionType.enum.ts","components/NavBar/sidur-menu.tsx","models/DriveType.enum.ts","store/store.types.ts","components/Dialogs/file-uplaod-dialog.tsx","models/SketchMenuClickActionType.enum.ts","components/Dialogs/sidur-management-dialog.tsx","components/Dialogs/orders-import-dialog.tsx","components/buttons/styled-toggle-button.tsx","components/buttons/toggle-button-group.tsx","components/Dialogs/rename-dialog.tsx","services/save-load.service.tsx","services/hash-function.ts","services/clone-utility.ts","store/store-utils.ts","components/NavBar/app-nav-bar.tsx","components/Loading/loading-shield.tsx","components/Loading/loading.tsx","router/router-main.tsx","components/Sketch/sketch-menu.tsx","components/Sketch/SketchDrive.tsx","services/utils.ts","components/buttons/warning-icon.tsx","models/SketchDriveOrderEditActionEnum.ts","services/language-utilities.ts","models/LocationGroupMenuClickActionType.enum.ts","components/Sketch/SketchPendingOrderBrief.tsx","components/Icons/icons.tsx","components/Sketch/pending-order-menu.tsx","components/buttons/order-action-button.tsx","components/Sketch/SketchPendingOrderFull.tsx","components/Sketch/SketchPendingOrder.tsx","components/Sketch/SketchPendeingOrders.tsx","components/buttons/air-bnb-slider.tsx","components/buttons/vertical-hour-field.tsx","services/config-service.ts","sidurEditor/sidurEditor.service.ts","components/Dialogs/sketch-drive-edit-dialog.tsx","components/Sketch/sketch-no-sketch-message.tsx","components/Dialogs/sketch-drive-merge-dialog.tsx","components/buttons/sketch-vehicle-add-button.tsx","components/Dialogs/sketch-order-to-transport-dialog.tsx","components/Sketch/Sketch.tsx","components/Sketch/SketchesContainerMessage.tsx","components/Sketch/SketchesContainer.tsx","components/LocationsEdit/location-group-menu.tsx","models/Location.model.ts","components/styled/light-tool-tip.tsx","components/buttons/delete-button.tsx","components/LocationsEdit/location-form.tsx","components/LocationsEdit/locations-edit.tsx","components/LocationsEditRoutes/location-route-edit.tsx","components/LocationsEdit/location-choose-button.tsx","components/LocationsEdit/location-edit-transport-route-menu.tsx","components/LocationsEditTransports/location-transport-edit.tsx","components/LocationsEdit/location-route-transport-choose.tsx","components/LocationsEditRoutes/locations-routes-edit-wrapper.tsx","components/Dialogs/transport-schedual-dialog.tsx","components/LocationsEditTransports/locations-transport-edit-wrapper.tsx","components/LocationsEdit/location-group-edit-tabs.tsx","components/LocationsEdit/location-cant-edit-message.tsx","components/LocationsEdit/location-group-edit-wrapper.tsx","components/Form/hour-picker.tsx","components/Form/text-field.tsx","components/Form/select-field.tsx","components/Form/passengers-field.tsx","components/Form/flexibility-field.tsx","components/Form/select-field-auto-complete.tsx","components/Orders/order-car-form.tsx","models/Order.model.ts","components/Orders/order-car-brief.tsx","components/buttons/clone-button.tsx","components/Orders/order-car.tsx","components/Icons/add-button.tsx","components/Orders/orders.tsx","components/Dialogs/vehicle-edit-dialog.tsx","components/Vehicles/vehicles.tsx","components/LocationGroupSelect/location-group-select.tsx","layouts/orders-layout.tsx","layouts/main-layout.tsx","layouts/app-layout.tsx","hoc/App.tsx","sidurBuilder/models/sidurBuilder.models.ts","reportWebVitals.ts","store/sidur.reducer.ts","store/order.reducer.ts","services/import-orders-from-text.ts","store/import-export.reducer.ts","services/download-file.ts","store/vehicle.reducer.ts","store/display.reducer.ts","sidurBuilder/sidurBuilder.buildOrdersMetaData.ts","sidurBuilder/sidurBuilder.tools.ts","sidurBuilder/sidurBuilder.buildVehicles.ts","store/sketch.reducer.ts","sidurBuilder/sidurBuilder.main.ts","store/pendingOrders.reducer.ts","store/sketch-drive.reducer.ts","store/locationGroup.reducer.ts","store/location.reducer.ts","store/store-inital-state.ts","store/route.reducer.ts","store/transport.reducer.ts","store/reducer.ts","hoc/Root.tsx","index.tsx"],"names":["ProfileMenuClickActionType","themeMain","createTheme","direction","typography","fontFamily","h1","fontSize","marginTop","marginBottom","components","MuiCssBaseline","styleOverrides","Assistant","MuiSelect","icon","position","palette","primary","main","secondary","error","red","A400","background","default","Colors","Styles","smallIcons","height","width","flexRow","display","flexDirection","alignItems","alignContent","flexColumn","translations","ActionsTypes","ProfileMenu","props","anchorEl","menuId","isMenuOpen","handleMenuClose","anchorOrigin","vertical","horizontal","id","keepMounted","transformOrigin","open","onClose","e","MenuItem","onClick","event","MyProfile","Person","Export","ImportExport","ExportToFile","Import","ImportFromFile","SidurActionType","SidurManagementActionType","DriveType","TypeOfRecord","SidurMenu","sidurMoreAnchorEl","sidurMenuId","isSidurMenuOpen","handleSidurMenuClick","handleSidurMenuClose","Rename","DriveFileRenameOutline","Delete","CreateCopy","FileCopy","Archive","ImportOrders","ImportContacts","ManageSidurim","ListAlt","ManageAllSidrurim","FileUploadType","defaultOrderValues","driverName","startHour","finishHour","TypeOfDrive","OneWayTo","Comments","passengers","flexibility","location","defaultVehicleValues","vehicleName","endHour","kmLimit","seats","AppConstants","SketchActionType","fileUploadTypes","type","uploadFullDataAndAdd","name","ImportAllData","uploadFullDataAndReplace","DeleteAndImportAllData","uploadSpecificData","ImportPart","defaultUploadType","defaultId","find","upload","FileUploadDialog","selectedValue","useState","uploadType","setUploadType","handleCloseCancel","Dialog","DialogTitle","DialogContent","Box","sx","minWidth","justifyContent","Select","dir","disableUnderline","variant","defaultValue","fontWeight","onChange","_child","chosenId","target","value","map","typeOfUpload","Button","m","component","ChooseFile","files","length","file","reader","FileReader","onload","fileAsString","result","readAsText","hidden","DialogActions","Cancel","SidurManagementDialog","sidurArchive","useSelector","state","sidurCollection","dispatch","useDispatch","ActionButton","buttonProps","action","DeleteForever","text","color","MoveToArchive","MoveToTrash","Edit","MoveToActive","Unarchive","buttonBuilder","Tooltip","title","placement","IconButton","size","DELETE_FOREVER_SIDUR","payload","sidurId","ARCHIVE_SIDUR","DELETE_SIDUR","MOVE_TO_ACTIVE_SIDUR","handleActionClick","DividingLine","borderBottom","margin","listBoxSx","headerSx","mb","oneSidurSx","flexWrap","ActiveSidurim","sidur","index","Name","inArchive","filter","s","includes","Trash","Finish","OrderImportDialog","valueRef","useRef","Typography","TextField","autoFocus","label","PastHere","fullWidth","multiline","inputRef","onKeyUp","key","current","IMPORT_ORDERS_AS_TEXT","importedOrders","Approve","StyledToggleButtonGroup","styled","ToggleButtonGroup","theme","backgroundColor","ToggleButtons","React","alignment","setAlignment","exclusive","newAlignment","CHANGE_VIEW","ToggleButton","Link","to","Locations","Sketch","Orders","RenameDialog","handleCloseRename","NewName","APPID","SaveLoadService","saveToLocalStorage","data","userId","timeStamp","getTimeStampFromDate","localStorage","setItem","JSON","stringify","success","loadFromLocalStorage","getItem","parse","date","Date","getTime","toString","hashFunction","str","h","i","Math","imul","charCodeAt","CloneUtil","obj","cloned","drives","d","deepCloneDrive","clonedSidur","orders","o","deepCloneOrder","deletedOrders","sketches","deepCloneSketch","undefined","vehicleSchedules","vs","deepCloneVehicleSchedules","l","newObj","deepCloneSidur","StoreUtils","removeIdPrefix","replaceIdsNames","RegExp","replace","HandleReducerSaveToLocalStorage","saveObj","buildSaveDataModel","updateRecordBrief","newState","allSiduresVisiable","concat","allLocationGroups","LocationGroups","sidurRecords","dbId","locationGroupOrSidurId","locationGroupIdForSidur","typeOfRecord","Sidur","locationRecords","LocationGroup","recordBriefs","UpdateSidurCollectionWithCurrenSidur","updatedOrders","updatedVehicles","vehicles","updatedDeletedOrders","updatedSketches","updatedSidur","hash","userName","savedStore","updateSidurRecordWithSketchChanges","thisSidurInCollection","shieldAnimationBeforeDispatch","dispatchingAction","dispatchFunct","delay","callArguments","START_LOADING_ANIMATION","setTimeout","_","defaultSessionState","LocationGroupTabOpen","SketchIdInEdit","dataHolderForCurrentOrderInEdit","isAnimationRunning","locationGroupInEdit","locationMainInEdit","orderIdInEdit","pendingOrderInEditAction","pendingOrderInEditActionSelectDrives","pendingOrderIdInEdit","routeIdInEdit","transportIdInEdit","abortSessionPendingOrderState","sessionState","AppNavBar","setAnchorEl","RenameOpen","setRenameOpen","UploadOpen","setUploadOpen","ManageSidurimOpen","setManageSidurimOpen","importOrdersOpen","setImportOrdersOpen","setSidurMoreAnchorEl","sidurSelected","sidurRecord","sidurName","isProfileMenuOpen","Boolean","handleSidurMenuOpen","currentTarget","AppBar","mr","ml","Toolbar","noWrap","xs","sm","child","chosenSidur","ADD_NEW_SIDUR","CHOOSE_SIDUR","handleSidurChanged","NewSidur","flexGrow","md","edge","clickAction","CLONE_SIDUR","OPEN_MY_PROFILE","EXPORT_ALL","RENAME_SIDUR","IMPORT_FILE_UPLOADED","LoadingShield","activeEffect","inter","setInterval","STOP_LOADING_ANIMATION","clearInterval","useEffect","style","version","x","y","viewBox","xmlns","cx","cy","r","fx","fy","offset","stopColor","className","strokeWidth","fill","loadingSx","top","left","zIndex","Loading","session","Fade","in","unmountOnExit","RouterMain","children","basename","ChooseDriveMode","SketchMenu","sketchMoreAnchorEl","sketchMenuId","isSketchMenuOpen","handleSketchMenuClick","handleSketchMenuClose","Utils","getNextId","currentIds","allIds","Number","push","max","validateHash","convertStrToNum","numberToReturn","parsed","parseInt","isNaN","defaultSketchMMock","ids","mkDrv","driver","start","finish","Tsamud","implementsOrders","description","VehicleId","unassignedOrders","assignedOrders","hourTextToDecimal","hourText","splitHour","split","hour","minutes","this","minutesToFraction","DecimalTimeToHourText","time","numberToTwoDigit","num","addZero","floor","minutesAsFraction","minutesCorrected","remainder","correctSmallDiversions","FractionToMinutes","minute","minAsNumber","HourDecimalToMinutes","hourDecimal","hourAsNumber","WarningIcon","Warning","warningYellow","SketchDriveOrderEditActionEnum","SketchDrive","thisDrive","previousDrive","drive","inHover","setInHover","driveOverlap","customSx","chooseDriveMode","nonSelectable","opacity","selectable","NotActive","custumSxMaker","cursor","bgcolor","warningRed","boxShadow","p","textAlign","OverlapingDrives","Card","sketchDriveClick","onMouseOver","onMouseOut","elevation","minHeight","pl","pr","TwoWay","alignSelf","LocationGroupActionType","LanguageUtilities","getPrefixByDriveType","driveType","OneWayFrom","timeStart","pickupTime","timeEnd","fromLocation","exitTime","toLocation","returnTime","inLocation","Start","Where","buildBriefText","orderValues","locations","trim","timeText","driverAndLocation","NewOrder","briefText","driveTimeLanguage","renderPassengerText","onePassenger","addLineBreaksToString","numberOfBR","br","arr","Array","join","buildSketchEditActionsArray","ret","sketchEditActionEnumKey","enumbEntry","isDisabled","Split","SketchActionSplit","Merge","SketchActionMerge","Change","SketchActionChange","ChangeTime","SketchActionChangeTime","ReplaceExisting","SketchActionReplaceExisting","publicTransport","SketchActionPublicTransport","RemoveFromPending","SketchActionRemove","AddToPending","SketchActionAddToPending","MoveToTop","SketchActionMoveToTop","MoveToBottom","SketchActionMoverToBottom","AddToVehicle","SketchActionAddToVehicle","SketchPendingOrderBrief","order","Icons","Add","Check","Remove","MergeType","Splitscreen","ChangeCircle","Timer","ReplayCircleFilled","BusAlert","AddBox","ArrowCircleUp","ArrowCircleDown","PendingOrderMenu","PendingOrderMenuAnchor","PendingOrderMenuId","isPendingOrderMenuOpen","handlePendingOrderMenuClick","handlePendingOrderMenuClose","pendingOrdersActions","item","OrderActionButton","actionClickHandler","pendingOrderMenuId","SketchPendingOrderFull","pendingOrderAnchorEl","setPendingOrderAnchorEl","orderId","CLICKED_ADD_TO_VEHICLE_PENDING_ORDER","CLICKED_MOVE_TO_TOP_PENDING_ORDER","CLICKED_MOVE_TO_BOTTOM_PENDING_ORDER","CLICKED_REMOVE_PENDING_ORDER","CLICKED_SPLIT_PENDING_ORDER","CLICKED_MERGE_PENDING_ORDER","CLICKED_REPLACE_EXISTING_PENDING_ORDER","CLICKED_PUBLIC_TRANSPORT_PENDING_ORDER","n","actionType","moerActions","CLICKED_CLOSE_PENDING_ORDER","close","SketchPendingOrder","isInEdit","maxWidth","CLICKED_PENDING_ORDER","tabIndex","mt","Collapse","SketchPendingOrders","pendingOrderInEdit","PendingOrders","pendingOrders","AirbnbSlider","Slider","borderRadius","border","marginLeft","marginRight","AirbnbThumbComponent","_data","other","random","sliderSx","formatHourLabel","hourInNumber","VerticalHourField","InitialInputAsNumbers","input","negativeInitialInput","setValue","timeMargins","maxSlider","minSlider","Thumb","orientation","valueLabelDisplay","valueLabelFormat","disableSwap","min","scale","step","newValue","positiveNewValue","onHoursChange","ConfigService","Constants","RoutesMinutesOptions","HomeLocationId","HomeLocation","ETA","EnName","Home","MinimumMinuetGapFormNotifications","SidurEditorService","getRelevantDriveIdsToChoose","sketch","pendingOrderId","pendingOrder","originOrd","getAllDrivesFromSketch","drv","shouldIMergeDrives","getOnlyOneRelevantDriveIdsToChoose","forEach","v","currentVehicleClosestDrive","allDrives","origin","destination","hours","f","org","dest","some","SuggestMergedDrive","orderToMerge","h2n","issues","newDrive","orderToMergeBrief","driveStart","driveFinish","orderStart","orderFinish","startGapInMinutes","abs","finishGapInMinutes","message","gapForMergeDrives1","gapForMergeDrives3StartTimes","gapForMergeDrives3FinishTimes","newDriveStartHour","newDriveFinishHour","suggestedDrive","getDriveDurationInHours","ride","splitTsamudOrder","eta","orderTo","orderFrom","beforeSplit","SketchDriveEditDialog","onDelete","sketchDriveData","driveData","sketchInEdit","sketchOrders","driveChangedData","setDriveChangedData","descriptionValueRef","filedWrapper","handleCloseEdit","editedData","implementedOrders","EditDrive","align","DriveTimes","newSketchData","DriveDescription","none","connectedOrders","pb","REMOVE_ORDER_FROM_SKETCH_DRIVE","sketchDriveId","addToPendingClickHandler","sketchDriveDataForDelete","SketchNoSketchMessage","CardContent","NoSketchMessage","SketchDriveMergeDialog","PendingOrderToMergeId","originalDriveData","driveDataAndIssues","newImplementedOrders","MergeDrive","DriveTimesAfterMerge","newriveData","DriveDescriptionNew","issue","newMergedOrder","CancelMerge","ApproveMerge","SketchVehicleAddButton","SketchOrderToTransportDialog","PendingOrderToTransportId","console","log","secondOrderToMergeBrief","secondDescriptionValueRef","publicTransportSolution","Update","sketchDriveEditOpen","setSketchDriveEditOpen","sketchDriveMergeOpen","setSketchDriveMergeOpen","sketchOrderToTransportOpen","setSketchOrderToTransportOpen","chosenDrive","setChosenDrive","addToVehicleButtonShown","handleSketchDriveEditDelete","DELETE_SKETCH_DRIVE","sketchDriveClickHandler","vehicleId","Order","driveToReplace","REPLACE_SKETCH_DRIVE_WITH_ORDER","pendingOrderToMerge","driveToMerge","HandleDriveMerge","getVehicleNameFromId","vehicleTimeTable","ev","vehicleTimeTableId","ADD_SKETCH_DRIVE_FROM_PENDING_ORDER","TransitionGroup","borderRight","flexItem","UPDATE_SKETCH_DRIVE","UPDATE_SKETCH_DRIVE_WITH_MERGED_ORDER","REMOVE_PENDING_ORDER_STATUS","SketchesContainerMessage","messageText","pendingORderInEdit","SketchActionMergeInfoMessage","SketchActionReplaceInfoMessage","SketchActionAddToVehicleInfoMessage","textDecoration","clickCancel","cancellation","SketchesContainer","setSketchMoreAnchorEl","sketchName","fontWight","chosenSketch","NEW_SKETCH","CHOOSE_SKETCH","handleSketchChanged","CreateSketch","oneSketch","CLONE_SKETCH","DELETE_SKETCH","RENAME_SKETCH","RouteOrTransport","LocationGroupMenu","locationGroupMoreAnchorEl","locationGroupMenuId","isLocationGroupMenuOpen","handleLocationGroupMenuClick","handleLocationGroupMenuClose","preventDelete","isEditable","LightTooltip","classes","popper","tooltipClasses","tooltip","common","white","shadows","DeleteButton","toolTip","disabled","deleteClickHandler","buildCantDeleteText","uses","txt","cantDeleteLocation","u","LocationForm","wasJustEdited","setWasJustEdited","nameValue","setNameValue","etaValue","setEtaValue","valueNameRef","valueMinutesRef","updatedLocation","refName","refMinutes","onUpdate","InputProps","isLocationNameValid","lineHeight","nameExists","inputProps","ETAtext","usedIn","stopPropagation","DELETE_LOCATION","visibility","LocationsEdit","locationGroupInEditId","locationGroups","isLocationInSidur","lb","currentLocationGroup","allRawLocations","routeStopsWithLocations","Routes","routStops","rs","locationId","transportsWithLocations","Transports","TransportStops","locationsNames","setOfNames","Set","repeatingNames","has","add","allLocations","usesRoutes","usesTransports","IsValid","filterText","setFilterText","handleStopEditLocation","_event","STOP_EDIT_LOCATION","handleLocationUpdate","UPDATE_LOCATION","filteredLocations","sort","a","b","ADD_NEW_LOCATION","addLocation","placeholder","searchLocation","handleFilterValueChanged","overflowY","maxHeight","onBlur","START_EDIT_LOCATION","RouteOrTransEditAction","LocationChooseButton","justLocationObject","isHome","RouteTransportEditMenu","routeMoreAnchorEl","routeMenuId","isRouteMenuOpen","handleRouteMenuClick","handleRouteMenuClose","RenameRoute","DeleteRoute","CloneRoute","LocationRouteEdit","setRouteMoreAnchorEl","allStops","route","locationName","minuetsFromLastCode","minuetsFromLast","minutesFromLastOptions","handleRemoveLast","updatedRout","pop","UPDATE_ROUTE","isLongRoute","flex","stop","newStop","handleDriveLengthChanged","option","ArrowBack","CLONE_ROUTE","DELETE_ROUTE","LocationRouteTransportChoose","routeOrTransport","Route","routeClicked","LocationsRoutesEditWrapper","allRoutes","filterLocationText","setFilterLocationText","filterRouteText","setFilterRouteText","handleAddLocationToRoute","ADD_LOCATION_TO_ROUTE","routeClickedHandler","routId","START_EDIT_ROUTE","routInEdit","filteredLocationsBeforeRouteCalc","routInEditLocations","filteredRoutes","flexCol","handleFilterLocationValueChanged","ADD_NEW_ROUTE","addRoute","searchRoute","handleFilterRouteValueChanged","TransportScheduleDialog","transport","sxRoot","emptyValues","allTimes","TransportTime","hourValues","setHourValues","_e","changedHourValues","onDeleteHour","changeEvent","newHourValues","onChangeHour","addHours","LocationTransportEdit","scheduleOpen","setScheduleOpen","transportRoute","UPDATE_TRANSPORT","timeTableBrief","t","DirectionsBusFilled","LocationOn","editTimeStarts","CLONE_TRANSPORT","DELETE_TRANSPORT","LocationsTransportEditWrapper","transportRouteIdInEdit","allLocationsFromStore","allTransportRoutes","unshift","ADD_LOCATION_TO_TRANSPORT","START_EDIT_TRANSPORT","transportRoutInEdit","ADD_NEW_TRANSPORT","addTransportRoute","searchTransport","Transport","TabPanel","role","a11yProps","LocationsEditTabs","locationTabSelected","borderColor","Tabs","CHOOSE_LOCATION_GROUP_TAB","Tab","roadTracks","PublicTransport","LocationCantEditMessage","LockTwoTone","lockedForEdit","cantEditLocationMessag","LocationGroupEditWrapper","setLocationGroupMoreAnchorEl","lGroup","LocationBase","NEW_LOCATION_GROUP","CHOOSE_LOCATION_GROUP","handleLocationGroupChanged","verticalAlign","Eshbal","CreateLocationGroup","oneLocationGroup","sidurim","retText","thisCollectionIsInUse","suffix","InArchive","InTrash","thisCollectionIsInUseandAnother","thisCollectionIsInUseandAnothersidurim","thisCollectionIsInUsedCannotbeDeleted","buildTextForLocationInSidurim","CLONE_LOCATION_GROUP","DELETE_LOCATION_GROUP","RENAME_LOCATION_GROUP","HourPicker","custom","meta","inActive","sxExtra","RenderTextField","labelSx","_theme","RenderSelectField","root","paddingLeft","InputLabel","labelId","rootSx","StyledRating","Rating","RenderPassengerField","convertedInput","emptyIcon","renderFlexibilityText","flexValues","absValue","flexEarly","flexLate","RenderFlexibilityField","RenderSelectFieldAutoComplete","options","selectoptions","replaceAll","inputAsText","inputWithTextValue","Autocomplete","isOptionEqualToValue","thisLabel","disableClearable","openOnFocus","autoSelect","autoComplete","clonedEvent","renderInput","params","TRL","fieldWrapper","padding","selectFieldWrapper","paddingBottom","fieldWrapperText","orderFields","Divider","MaterialUiForm","muiFormProps","handleSubmit","submitting","typeOfDrive","isAdvanced","setIsAdvanced","advanceFieldWrapper","onSubmit","rows","handleSetAdvanced","Advanced","Submit","OrderCarForm","formProps","initialValues","_typeOfDrive","set_typeOfDrive","_values","validate","values","UPDATE_ORDER_IN_EDIT","UPDATE_ORDER","render","OrderCarBrief","missingDetailsShown","areDetailsMissing","missingDetails","CloneButton","cloneClickHandler","ContentCopy","OrderCar","cardBase","cardHeader","paddingTop","additionalText","dividerBox","briefOrderStyle","transition","CLICKED_ORDER","CLONE_ORDER","DELETE_ORDER","pristine","reset","AddButton","addClickHandler","AddOrder","ADD_NEW_ORDER","VehicleEditDialog","vehicleData","seatsValue","setSeatsValue","didDialogJustClosed","setDidDialogJustClosed","nameValueRef","commentsValueRef","handleSeatsValueChanged","selected","Vehicles","vehicleEditOpen","setVehicleEditOpen","vehicleClicked","setVehicleClicked","vehicleButtonDesign","vehicleClickHandler","foundVehicle","vehicle","Badge","invisible","badgeContent","TimeToLeave","AddVehicles","NEW_VEHICLE","UPDATE_VEHICLE","DELETE_VEHICLE","LocationGroupSelect","currenSidur","currentSidurLocationGroupId","isNewSidur","LocationBaseSidurText","chosenLocationGroup","CHANGE_SIDUR_LOCATION_GROUP","OrdersLayout","MainLayout","displaySetting","view","path","element","AppLayout","ThemeProvider","App","OrderMetaStatus","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","DefaultSidur","SidurReducer","chosenSidurId","previousSidurId","chosenSidurObj","record","previousSidurObj","NewPreviousSidurObj","setChosenSidur","newName","locationGroupId","newLocationGroup","lg","sidurIdToDelete","deletedSidur","getDefaultSidur","chosenSidurAfterDelete","sidurIdToArchive","archivedSidur","chosenSidurAfterArchive","newSidurId","getAllSidurIDs","loactionGroupId","newSidur","c","sidurIdToClone","sidurForCloning","CopyOf","sidurIdToActivate","toActivateSidur","sidurIdToDeleteForever","collectionIds","ArchiveIds","OrderReducer","newId","getAllOrdersIDs","newOrder","updateOrdersWithEditedOrder","cloneOriginId","cloneOriginOrder","orderIndex","indexOf","splice","clickedOrderId","deleteOrderId","ordersIds","deletedIdsWithWords","deletedIds","currentOrderId","NewRowToken","convertTimeTo4Digits","match","convert2DigitTimeTo4Digits","getLocationAndTypeFromComments","LocationSearchResult","results","locationFound","locName","toPrefixes","toLocationLe","tzamudPrefix","From","fromLocationWithThe","pre","TsamudWord","searchLocationInText","anotherTimeSearchResults","anotherTime","matchingTime","matchAll","matchingArray","from","convertedTime","searchAnotherTimeInText","ImportOrdersFromText","rowsWithoutUserLineBreaks","EshbalOrders","row","newRide","rowsToEshbalOrders","appOrders","idNum","defaultValues","eOrder","appOrder","ordersToOrderModel","ImportExportReducer","filename","document","createElement","setAttribute","encodeURIComponent","body","appendChild","click","removeChild","DownloadFile","fileObj","storeFromFile","modeledImportedOrders","VehicleReducer","newVehicle","updateVehicle","newIdIfNeeded","deleteVehiclerId","DisplayReducer","SidurBuilderBuildOrdersMetaData","idCount","clonedOrders","deep","ordersMeta","metaOrder","status","None","locationObj","EtaInHours","SidurBuilderTools","first","second","third","number","startId","currentId","getId","getStrId","SidurBuilderBuildVehiclesAndUnAssigned","enumerator","metaOrderScheduleData","schedule","currentHour","relevantMetaDrive","Approved","fakeOrder","SketchReducer","deconstructedSidur","newSketch","settings","ordersMetaData","BuildResult","initialVehicles","baseSketch","SidurBuilder","chosenSketchId","previousSketchId","sketchId","updatedSketch","sketchToDelete","posOfDeletedSketch","deletedSketch","sketchesIds","sketchIdToClone","sketchForCloning","newSketchId","getAllSketchesIDs","PendingOrdersReducer","orderToRemoveId","sketchObj","orderToRemove","orderToMoveId","orderToMove","relavantDrives","orderToSplitId","orderToSplit","newOrders","allSketchOrders","newId1","newId2","CLICKED_CHANGE_PENDING_ORDER","CLICKED_CHANGE_TIME_PENDING_ORDER","CLICKED_ADD_TO_PENDING_PENDING_ORDER","SketchDriveReducer","sketchDriveChanged","getVehicleIdFromDriveId","relevantVehicle","sortVehicleByStartHour","pendingOrdersToPassToAssigned","ordersToMoveToAssigned","sketchDriveToReplace","newDriveId","getNewDriveIdFromSketch","newDriveToInsert","assignedOrdersPassToPending","implementedOrdersFromReplacedDrive","ordersToMoveToPending","sketchDriveChangedId","orderIdToRemove","ord","OrderToMoveToUnassinged","sketchDriveToDelete","newDrives","driveId","allDriveIds","aDrive","bDrive","LocationGroupReducer","UPDATE_LOCATION_GROUP","groupToDeleteId","groupIdWasChosen","tabWasChosen","locationGroupIdToClone","locationGroupForCloning","newLocGroup","deepCloneLocationGroup","newLocGroupId","groupToRenameId","newLG","LocationReducer","currentLocationGroupId","newLocation","g","currentSidur","locationToUpdate","locationToDeleteId","DefaultSidurFetching","RouteReducer","newRoute","comments","buildRouteName","locationToAdd","routeInEdit","isNameAutoBuild","allPositions","maxPosition","routeStop","STOP_EDIT_ROUTE","routeToUpdate","routBeforeUpdate","routeToDeleteId","routeToCloneId","routeToClone","getLocationName","TransportReducer","newTransport","buildTransportName","transportInEdit","transportStop","transportId","STOP_EDIT_TRANSPORT","transportToUpdate","transportToDeleteId","transportToCloneId","transportToClone","initialState","buildInitialState","reducer","store","createStore","window","__REDUX_DEVTOOLS_EXTENSION__","Root","StrictMode","ReactDOM","getElementById"],"mappings":"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","file":"static/js/main.916932d8.chunk.js","sourcesContent":["export enum ProfileMenuClickActionType {\r\n    MyProfile = 1,\r\n    Export = 2,\r\n    Import = 3\r\n}\r\n","export default __webpack_public_path__ + \"static/media/Assistant-Regular.e0bb8a20.ttf\";","// A custom theme for this app\r\nimport {createTheme, Theme} from '@mui/material';\r\nimport {red} from '@mui/material/colors';\r\nimport Assistant from '../assets/fonts/Assistant-Regular.ttf';\r\nimport {SxProps} from '@mui/system';\r\n\r\n// @ts-ignore\r\n// @ts-ignore\r\nexport const themeMain: Theme = createTheme({\r\n    direction: 'rtl',\r\n    typography: {\r\n        fontFamily: 'Segoe UI, sans-serif',\r\n        h1: {\r\n            fontSize: '3rem',\r\n            marginTop: 0,\r\n            marginBottom: 0\r\n        }\r\n    },\r\n    components: {\r\n        MuiCssBaseline: {\r\n            styleOverrides: `\r\n        @font-face {\r\n          font-family: 'Assistant';\r\n          font-style: normal;\r\n          font-display: swap;\r\n          font-weight: 400;\r\n          src: local('Assistant'), local('Assistant-Regular'), url(${Assistant}) format('ttf');\r\n          unicodeRange: U+0000-00FF, U+0131, U+0152-0153, U+02BB-02BC, U+02C6, U+02DA, U+02DC, U+2000-206F, U+2074, U+20AC, U+2122, U+2191, U+2193, U+2212, U+2215, U+FEFF;\r\n        }\r\n      `,\r\n        },\r\n\r\n        MuiSelect: {\r\n            styleOverrides: {icon: {position: 'relative'}},\r\n\r\n        }\r\n    },\r\n\r\n    palette: {\r\n        primary: {\r\n            main: '#556cd6',\r\n        },\r\n        secondary: {\r\n            main: '#9e18be',\r\n        },\r\n        error: {\r\n            main: red.A400,\r\n        },\r\n        background: {\r\n            default: '#fff',\r\n        },\r\n    },\r\n\r\n\r\n});\r\n\r\nexport const Colors: Record<string, string> = {\r\n    'warningRed': 'rgb(255,59,59)',\r\n    'warningYellow': '#fcd632'\r\n}\r\nexport const Styles: Record<string, SxProps> = {\r\n    smallIcons: {\r\n        height: '0.7em',\r\n        width: '0.7em'\r\n    },\r\n    flexRow: {\r\n        display: 'flex',\r\n        flexDirection: 'row',\r\n        alignItems: 'start',\r\n        alignContent: 'start'\r\n    },\r\n    flexColumn: {\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        alignItems: 'start',\r\n        alignContent: 'start'\r\n    },\r\n\r\n}\r\n","//interface\r\n\r\nexport const translations = {\r\n    'close': 'סגור',\r\n    'DriveDescription': 'תאור הנסיעה',\r\n    'DriveDescriptionNew': 'תיאור הנסיעה לאחר המיזוג',\r\n    'DriveTimes': 'זמני הנסיעה',\r\n    'DriveTimesAfterMerge': 'זמני הנסיעה לאחר המיזוג',\r\n    'ETA': 'זמן הגעה',\r\n    'ETAtext': 'דקות נסיעה',\r\n    'OverlapingDrives': 'חפיפה בין זמני הנסיעות',\r\n    'EditDrive': 'עריכת נסיעה',\r\n    'MergeDrive': 'מיזוג נסיעות ',\r\n    'publicTransportSolution': 'חלופת תחבורה ציבורית',\r\n    'connectedOrders': ' הזמנות מקושרות',\r\n    'cancellation': 'ביטול',\r\n    'newMergedOrder': '  הזמנה שחוברה לנסיעה',\r\n    'All': 'הכל',\r\n    'Sidur': 'סידור',\r\n    'Order': 'הזמנה',\r\n    'Orders': 'הזמנות',\r\n    'Nesia': 'נסיעה',\r\n    'Name': 'שם',\r\n    'Rename': 'שנה שם',\r\n    'MyProfile': 'החשבון שלי',\r\n    'ExportAllData': 'יצוא הכל',\r\n    'ImportAllData': 'יבוא הכל',\r\n    'DeleteAndImportAllData': 'מחק הכל והחלף ביבוא הכל',\r\n    'ImportPart': 'יבוא חלקי',\r\n    'NewName': 'שם חדש',\r\n    'nameExists': 'השם כבר קיים',\r\n    'searchLocation': 'חיפוש מיקום',\r\n    'searchRoute': 'חיפוש מסלול נסיעה',\r\n    'searchTransport': 'חיפוש מסלול תחב\"צ',\r\n    'Route': 'מסלול נסיעה',\r\n    'newRoute': 'מסלול חדש',\r\n    'PastHere': 'הדבק כאן את הטקסט',\r\n    'NewSidur': 'סידור חדש',\r\n    'ManageAllSidrurim': 'ניהול סידורים',\r\n    'Delete': 'מחק',\r\n    'ExportToFile': 'יצא לקובץ',\r\n    'ImportFromFile': 'יבא מקובץ',\r\n    'ImportOrders': 'יבוא הזמנות',\r\n    'ChooseFile': 'בחר קובץ',\r\n    'Archive': 'העברה לארכיון',\r\n    'InArchive': 'בארכיון',\r\n    'MoveToActive': 'העברה לסידורים פעילים',\r\n    'MoveToTrash': 'העברה לאשפה',\r\n    'InTrash': 'באשפה',\r\n    'DeleteForever': 'מחיקה לנצח',\r\n    'CreateCopy': 'צור עותק',\r\n    'newTransport': 'מסלול תחב\"צ חדש',\r\n    'Hour': 'שעה',\r\n    'From': 'מ',\r\n    'Until': 'עד',\r\n    'Home': 'בית',\r\n    'toWhere': 'למקום',\r\n    'Where': 'מקום',\r\n    'addLocation': 'הוסף מקום',\r\n    'addRoute': 'הוסף מסלול נסיעה',\r\n    'addTransportRoute': 'הוסף מסלול תחב\"צ',\r\n    'editTimeStarts': 'ערוך זמנים',\r\n    'addHours': 'הוסף שעות',\r\n    'edit': 'הוסף מסלול תחבורה ציבורית',\r\n    'Start': 'התחלה',\r\n    'Finish': 'סיום',\r\n    'TypeOfDrive': 'סוג הנסיעה',\r\n    'Tsamud': 'צמוד',\r\n    'TsamudWord': 'צמוד',\r\n    'OneWayTo': 'הסעה',\r\n    'OneWayFrom': 'איסוף',\r\n    'TwoWay': 'הלוך חזור',\r\n    'Submit': 'סיום ',\r\n    'Advanced': 'מתקדם ',\r\n    'AddOrder': 'הוסף נסיעה ',\r\n    'Comments': 'הערות ',\r\n    'Approve': 'אישור',\r\n    'ApproveMerge': 'אישור מיזוג',\r\n    'Update': 'עדכן',\r\n    'Cancel': 'ביטול',\r\n    'CancelMerge': 'ביטול מיזוג',\r\n    'CreateSketch': 'צור סקיצה חדשה',\r\n    'CreateLocationGroup': 'צור אוסף חדש',\r\n    'thisCollectionIsInUse': 'אוסף זה נמצא בשימוש בסידורים ',\r\n    'thisCollectionIsInUseandAnother': '  ובעוד ',\r\n    'thisCollectionIsInUseandAnothersidurim': 'סידורים ',\r\n    'thisCollectionIsInUsedCannotbeDeleted': 'לא ניתן למחוק את האוסף או  את המקומות הקיימים בו. ',\r\n    'cantDeleteLocation': 'לא ניתן למחוק מיקום המשמש במסלולים / תחב\"צ',\r\n\r\n    'newLocationGroup': 'אוסף מיקומים חדש',\r\n    'Eshbal': 'אשבל',\r\n    'NoSketchMessage': 'לא קיימות סקיצות לסידור, לאחר הזנת כל ההזמנות ניתן ללחוץ על \"יצירת סקיצה חדשה\"',\r\n    'cantEditLocationMessag': ' מיקום זה נעול ולא ניתן לערוך אותו, או למחוק אותו. ניתן ליצור עותק שלו על ידי לחיצה על העיפרון ואז \"צור עותק\". העותק ניתן לעריכה, שינוי ומחיקה',\r\n    'lockedForEdit': 'נעול לעריכה',\r\n    'NewOrder': 'הזמנה חדשה',\r\n    'PendingOrders': 'הזמנות לטיפול',\r\n    'CopyOf': '(עותק)',\r\n    'Trash': 'אשפה',\r\n    'inArchive': 'ארכיון',\r\n    'vehicles': 'רכבים',\r\n    'AddVehicles': 'הוסף רכב',\r\n    'Add': 'הוסף',\r\n    'seats': 'מושבים',\r\n    'passengers': 'נוסעים',\r\n    'flexibility': 'גמישות',\r\n    'missingDetails': 'מידע חלקי',\r\n\r\n    'onePassenger': 'נוסע/ת אחד/ת',\r\n    'none': 'אין',\r\n    'exitTime': 'זמני יציאה',\r\n    'flexEarly': 'הקדמה',\r\n    'min': 'דק\\'',\r\n    'flexLate': 'איחור',\r\n    'exitTimeToPickup': 'יציאה לאיסוף',\r\n    'returnTime': 'חזרה',\r\n    'pickupTime': ' בשעה',\r\n    'toLocation': ' אל  ',\r\n    'Locations': 'מקומות',\r\n    'roadTracks': 'מסלולים',\r\n    'PublicTransport': 'חלופות תחב\"צ',\r\n    'fromLocation': 'מ',\r\n    'fromLocationWithThe': 'מה',\r\n    'inLocation': 'ב',\r\n    'toLocationLe': 'ל',\r\n    'Sketch': 'סקיצה',\r\n    'LocationBase': 'הגדרת מקומות ומסלולים',\r\n    'LocationBaseSidurText': 'הגדרת מקומות, מסלולים, ותחב\"ץ לסידור',\r\n    'ActiveSidurim': 'סידורים פעילים',\r\n    'number': 'מספר',\r\n    'first': 'ראשונה',\r\n    'second': 'שנייה',\r\n    'third': 'שלישית',\r\n    'action': 'פעולה',\r\n    'moerActions': 'פעולות נוספות',\r\n    'SketchActionRemove': 'סמן כטופלה',\r\n    'SketchActionMerge': 'מזג עם נסיעה אחרת',\r\n    'SketchActionMergeInfoMessage': 'בחר נסיעה למיזוג עם',\r\n    'SketchActionReplaceInfoMessage': 'בחר נסיעה להחלפה עם',\r\n    'SketchActionAddToVehicleInfoMessage': 'בחר היכן להוסיף את',\r\n    'SketchActionSplit': 'פיצול להסעה ואיסוף',\r\n    'SketchActionChange': 'שינוי נסיעה',\r\n    'SketchActionChangeTime': 'שינוי שעות של נסיעה קיימת',\r\n    'SketchActionReplaceExisting': 'הוסף כנסיעה לרכב במקום נסיעה קיימת',\r\n    'SketchActionAddToVehicle': 'הוסף כנסיעה לרכב',\r\n    'SketchActionPublicTransport': 'צור פתרון בתחב\"צ',\r\n    'SketchActionAddToPending': 'סמן כ\"לא מטופלת\"',\r\n    'SketchActionMoveToTop': 'העבר לתחילת הרשימה',\r\n    'SketchActionMoverToBottom': 'העבר לסוף הרשימה',\r\n\r\n    'gapForMergeDrives1': 'קיים פער של ',\r\n    'beforeSplit': 'בוצע פיצול נסיעה',\r\n\r\n    'gapForMergeDrives3StartTimes': 'דקות בין זמני היציאה של הנסיעות',\r\n    'gapForMergeDrives3FinishTimes': 'דקות בין זמני הסיום של הנסיעות',\r\n    'issues': 'הערות',\r\n\r\n\r\n}\r\n","export enum ActionsTypes {\r\n    /* Orders */\r\n\r\n    UPDATE_ORDER = 'UPDATE_ORDER',\r\n    UPDATE_ORDER_IN_EDIT = 'UPDATE_ORDER_IN_EDIT',\r\n    DELETE_ORDER = 'DELETE_ORDER',\r\n    CLONE_ORDER = 'CLONE_ORDER',\r\n\r\n    CLICKED_ORDER = 'CLICKED_ORDER',\r\n    ADD_NEW_ORDER = 'ADD_NEW_ORDER',\r\n\r\n    /* Import - Export */\r\n    OPEN_MY_PROFILE = 'OPEN_MY_PROFILE',\r\n    EXPORT_ALL = 'EXPORT_ALL',\r\n\r\n    IMPORT_FILE_UPLOADED = 'IMPORT_FILE_UPLOADED',\r\n    IMPORT_ORDERS_AS_TEXT = 'IMPORT_ORDERS_AS_TEXT',\r\n\r\n\r\n    /* Sidur */\r\n    DELETE_SIDUR = 'DELETE_SIDUR',\r\n    DELETE_FOREVER_SIDUR = 'DELETE_FOREVER_SIDUR',\r\n    RENAME_SIDUR = 'RENAME_SIDUR',\r\n    ADD_NEW_SIDUR = 'ADD_NEW_SIDUR',\r\n    CLONE_SIDUR = 'CLONE_SIDUR',\r\n    CHOOSE_SIDUR = 'CHOOSE_SIDUR',\r\n    CHANGE_SIDUR_LOCATION_GROUP = 'CHANGE_SIDUR_LOCATION_GROUP',\r\n    ARCHIVE_SIDUR = 'ARCHIVE_SIDUR',\r\n    MOVE_TO_ACTIVE_SIDUR = 'MOVE_TO_ACTIVE_SIDUR',\r\n\r\n\r\n    /* Vehicle */\r\n    UPDATE_VEHICLE = 'UPDATE_VEHICLE',\r\n    NEW_VEHICLE = 'NEW_VEHICLE',\r\n    DELETE_VEHICLE = 'DELETE_VEHICLE',\r\n\r\n    /* display */\r\n    STOP_LOADING_ANIMATION = 'STOP_LOADING_ANIMATION',\r\n    START_LOADING_ANIMATION = 'START_LOADING_ANIMATION',\r\n    CHANGE_VIEW = 'CHANGE_VIEW',\r\n\r\n    /* Sketch */\r\n    NEW_SKETCH = 'NEW_SKETCH',\r\n    DELETE_SKETCH = 'DELETE_SKETCH',\r\n    RENAME_SKETCH = 'RENAME_SKETCH',\r\n    CLONE_SKETCH = 'CLONE_SKETCH',\r\n    CHOOSE_SKETCH = 'CHOOSE_SKETCH',\r\n\r\n    /* Sketch Drive */\r\n    UPDATE_SKETCH_DRIVE = 'UPDATE_SKETCH_DRIVE',\r\n    ADD_SKETCH_DRIVE_FROM_PENDING_ORDER = 'ADD_SKETCH_DRIVE_FROM_PENDING_ORDER',\r\n    UPDATE_SKETCH_DRIVE_WITH_MERGED_ORDER = 'UPDATE_SKETCH_DRIVE_WITH_MERGED_ORDER',\r\n    REPLACE_SKETCH_DRIVE_WITH_ORDER = 'REPLACE_SKETCH_DRIVE_WITH_ORDER',\r\n\r\n    DELETE_SKETCH_DRIVE = 'DELETE_SKETCH_DRIVE',\r\n    REMOVE_ORDER_FROM_SKETCH_DRIVE = 'REMOVE_ORDER_FROM_SKETCH_DRIVE',\r\n\r\n    /*pending Orders */\r\n    CLICKED_PENDING_ORDER = 'CLICKED_PENDING_ORDER',\r\n    CLICKED_CLOSE_PENDING_ORDER = 'CLICKED_CLOSE_PENDING_ORDER',\r\n    CLICKED_REMOVE_PENDING_ORDER = 'CLICKED_REMOVE_PENDING_ORDER',\r\n    CLICKED_MOVE_TO_TOP_PENDING_ORDER = 'CLICKED_MOVE_TO_TOP_PENDING_ORDER',\r\n    CLICKED_ADD_TO_VEHICLE_PENDING_ORDER = 'CLICKED_ADD_TO_VEHICLE_PENDING_ORDER',\r\n    CLICKED_MOVE_TO_BOTTOM_PENDING_ORDER = 'CLICKED_MOVE_TO_BOTTOM_PENDING_ORDER',\r\n    CLICKED_MERGE_PENDING_ORDER = 'CLICKED_MERGE_PENDING_ORDER',\r\n    CLICKED_SPLIT_PENDING_ORDER = 'CLICKED_SPLIT_PENDING_ORDER',\r\n    CLICKED_CHANGE_PENDING_ORDER = 'CLICKED_CHANGE_PENDING_ORDER',\r\n    CLICKED_CHANGE_TIME_PENDING_ORDER = 'CLICKED_CHANGE_TIME_PENDING_ORDER',\r\n    CLICKED_REPLACE_EXISTING_PENDING_ORDER = 'CLICKED_REPLACE_EXISTING_PENDING_ORDER',\r\n    CLICKED_PUBLIC_TRANSPORT_PENDING_ORDER = 'CLICKED_PUBLIC_TRANSPORT_PENDING_ORDER',\r\n    CLICKED_ADD_TO_PENDING_PENDING_ORDER = 'CLICKED_ADD_TO_PENDING_PENDING_ORDER',\r\n    REMOVE_PENDING_ORDER_STATUS = 'REMOVE_PENDING_ORDER_STATUS',\r\n\r\n\r\n    /* Location groups */\r\n    UPDATE_LOCATION_GROUP = 'UPDATE_LOCATION_GROUP',\r\n    DELETE_LOCATION_GROUP = 'DELETE_LOCATION_GROUP',\r\n    NEW_LOCATION_GROUP = 'NEW_LOCATION_GROUP',\r\n    CLONE_LOCATION_GROUP = 'CLONE_LOCATION_GROUP',\r\n    RENAME_LOCATION_GROUP = 'RENAME_LOCATION_GROUP',\r\n    CHOOSE_LOCATION_GROUP = 'CHOOSE_LOCATION_GROUP',\r\n    CHOOSE_LOCATION_GROUP_TAB = 'CHOOSE_LOCATION_GROUP_TAB',\r\n\r\n    /* Locations */\r\n    START_EDIT_LOCATION = 'START_EDIT_LOCATION',\r\n    STOP_EDIT_LOCATION = 'STOP_EDIT_LOCATION',\r\n    ADD_NEW_LOCATION = 'ADD_NEW_LOCATION',\r\n    UPDATE_LOCATION = 'UPDATE_LOCATION',\r\n    DELETE_LOCATION = 'DELETE_LOCATION',\r\n\r\n    /* Routes */\r\n    START_EDIT_ROUTE = 'START_EDIT_ROUTE',\r\n    STOP_EDIT_ROUTE = 'STOP_EDIT_ROUTE',\r\n    ADD_NEW_ROUTE = 'ADD_NEW_ROUTE',\r\n    ADD_LOCATION_TO_ROUTE = 'ADD_LOCATION_TO_ROUTE',\r\n    UPDATE_ROUTE = 'UPDATE_ROUTE',\r\n    DELETE_ROUTE = 'DELETE_ROUTE',\r\n    CLONE_ROUTE = 'CLONE_ROUTE',\r\n\r\n    /* Transport */\r\n    START_EDIT_TRANSPORT = 'START_EDIT_TRANSPORT',\r\n    STOP_EDIT_TRANSPORT = 'STOP_EDIT_TRANSPORT',\r\n    ADD_NEW_TRANSPORT = 'ADD_NEW_TRANSPORT',\r\n    ADD_LOCATION_TO_TRANSPORT = 'ADD_LOCATION_TO_TRANSPORT',\r\n    UPDATE_TRANSPORT = 'UPDATE_TRANSPORT',\r\n    DELETE_TRANSPORT = 'DELETE_TRANSPORT',\r\n    CLONE_TRANSPORT = 'CLONE_TRANSPORT',\r\n}\r\n\r\n\r\n","import Menu from '@mui/material/Menu';\r\nimport MenuItem from '@mui/material/MenuItem';\r\nimport * as React from 'react';\r\nimport {translations} from '../../services/translations';\r\nimport {ImportExport, Person} from '@mui/icons-material';\r\nimport {ProfileMenuClickActionType} from '../../models/profile-menu-click-action-type.enum';\r\n\r\ninterface profileMenuProps {\r\n    anchorEl: Element | ((element: Element) => Element) | null | undefined;\r\n    menuId: string,\r\n    isMenuOpen: boolean,\r\n    handleMenuClose: (result: any, action?: ProfileMenuClickActionType) => void\r\n}\r\n\r\nexport const ProfileMenu = (props: profileMenuProps) => {\r\n    const {\r\n        anchorEl,\r\n        menuId,\r\n        isMenuOpen,\r\n        handleMenuClose\r\n    } = props;\r\n    return (\r\n        <Menu\r\n            anchorEl={anchorEl}\r\n            anchorOrigin={{\r\n                vertical: 'top',\r\n                horizontal: 'right',\r\n            }}\r\n            id={menuId}\r\n            keepMounted\r\n            transformOrigin={{\r\n                vertical: 'top',\r\n                horizontal: 'right',\r\n            }}\r\n            open={isMenuOpen}\r\n            onClose={(e: any) => handleMenuClose(e)}\r\n        >\r\n            <MenuItem onClick={(event) => handleMenuClose(event, ProfileMenuClickActionType.MyProfile)}>\r\n                <Person/> &nbsp;{translations.MyProfile}</MenuItem>\r\n            <MenuItem onClick={(event) => handleMenuClose(event, ProfileMenuClickActionType.Export)}>\r\n                <ImportExport/> &nbsp;{translations.ExportToFile}</MenuItem>\r\n            <MenuItem onClick={(event) => handleMenuClose(event, ProfileMenuClickActionType.Import)}>\r\n                <ImportExport/>&nbsp; {translations.ImportFromFile}</MenuItem>\r\n        </Menu>\r\n    );\r\n\r\n}\r\n","export enum SidurActionType {\r\n    Rename = 1,\r\n    Delete = 2,\r\n    ManageSidurim = 3,\r\n    CreateCopy = 4,\r\n    Archive = 5,\r\n    CreateNew = 6,\r\n    ImportOrders = 7\r\n}\r\n\r\nexport enum SidurManagementActionType {\r\n    Rename = 1,\r\n    MoveToTrash = 2,\r\n    MoveToArchive = 3,\r\n    MoveToActive = 4,\r\n    DeleteForever = 5,\r\n    EmptyTrash = 6\r\n}\r\n","import Menu from '@mui/material/Menu';\r\nimport MenuItem from '@mui/material/MenuItem';\r\nimport * as React from 'react';\r\nimport {Archive, Delete, DriveFileRenameOutline, FileCopy, ImportContacts, ListAlt} from '@mui/icons-material';\r\nimport {translations} from '../../services/translations';\r\nimport {SidurActionType} from '../../models/SidurMenuClickActionType.enum';\r\n\r\n\r\ninterface sidurMenuProps {\r\n    sidurMoreAnchorEl: Element | ((element: Element) => Element) | null | undefined;\r\n    sidurMenuId: string,\r\n    isSidurMenuOpen: boolean,\r\n    handleSidurMenuClick: (event: React.MouseEvent<HTMLElement>, clickAction: SidurActionType) => void\r\n    handleSidurMenuClose: () => void\r\n}\r\n\r\nexport const SidurMenu = (props: sidurMenuProps) => {\r\n    const {\r\n        sidurMoreAnchorEl,\r\n        sidurMenuId,\r\n        isSidurMenuOpen,\r\n        handleSidurMenuClick,\r\n        handleSidurMenuClose\r\n    } = props;\r\n    return (\r\n        <Menu\r\n            anchorEl={sidurMoreAnchorEl}\r\n            anchorOrigin={{\r\n                vertical: 'top',\r\n                horizontal: 'right',\r\n            }}\r\n            id={sidurMenuId}\r\n            keepMounted\r\n            transformOrigin={{\r\n                vertical: 'top',\r\n                horizontal: 'right',\r\n            }}\r\n            open={isSidurMenuOpen}\r\n            onClose={handleSidurMenuClose}\r\n        >\r\n\r\n            <MenuItem onClick={(e) => handleSidurMenuClick(e, SidurActionType.Rename)}>\r\n\r\n                <DriveFileRenameOutline/>&nbsp;\r\n                {translations.Rename}\r\n            </MenuItem>\r\n            <MenuItem onClick={(e) => handleSidurMenuClick(e, SidurActionType.Delete)}>\r\n\r\n                <Delete/>&nbsp;\r\n                {translations.Delete}\r\n            </MenuItem>\r\n            <MenuItem onClick={(e) => handleSidurMenuClick(e, SidurActionType.CreateCopy)}>\r\n\r\n                <FileCopy/>&nbsp;\r\n                {translations.CreateCopy}\r\n            </MenuItem>\r\n            <MenuItem onClick={(e) => handleSidurMenuClick(e, SidurActionType.Archive)}>\r\n                <Archive/> &nbsp;\r\n                {translations.Archive}\r\n            </MenuItem>\r\n            <MenuItem onClick={(e) => handleSidurMenuClick(e, SidurActionType.ImportOrders)}>\r\n\r\n                <ImportContacts/>&nbsp;\r\n                {translations.ImportOrders}\r\n            </MenuItem>\r\n            <MenuItem onClick={(e) => handleSidurMenuClick(e, SidurActionType.ManageSidurim)}>\r\n\r\n                <ListAlt/>&nbsp;\r\n                {translations.ManageAllSidrurim}\r\n            </MenuItem>\r\n        </Menu>\r\n    );\r\n\r\n\r\n}\r\n","export enum DriveType {\r\n    TwoWay = '1',\r\n    Tsamud = '2',\r\n    OneWayTo = '3',\r\n    OneWayFrom = '4'\r\n\r\n}\r\n","import {ActionsTypes} from './types.actions'\r\nimport {OrderModel} from '../models/Order.model';\r\nimport {DriveType} from '../models/DriveType.enum';\r\nimport {VehicleModel} from '../models/Vehicle.model';\r\nimport {SketchModel} from '../models/Sketch.model';\r\nimport {LocationGroup, LocationModel} from '../models/Location.model';\r\nimport {SketchDriveOrderEditActionEnum} from '../models/SketchDriveOrderEditActionEnum';\r\n\r\nexport type ActionType = string;\r\n\r\nexport type IAction = {\r\n    type: ActionsTypes\r\n    payload: any | { value: any }\r\n}\r\n\r\nexport interface SidurRecord {\r\n    id: string,\r\n    dbId: string,\r\n    Name: string,\r\n    orders: OrderModel[];\r\n    vehicles: VehicleModel[];\r\n    deletedOrders: OrderModel[];\r\n    defaultOrderValues?: OrderModel,\r\n    sketches: SketchModel[],\r\n    chosenSketch: string,\r\n    locationGroupIdForSidur: string;\r\n}\r\n\r\nexport interface DisplaySettings {\r\n    view: 'orders' | 'sketch' | 'locationsView'\r\n}\r\n\r\nexport interface SessionModel {\r\n    locationGroupInEdit: null | string;\r\n    orderIdInEdit: null | string;\r\n    routeIdInEdit: null | string;\r\n    transportIdInEdit: null | string;\r\n    pendingOrderIdInEdit: null | string;\r\n    pendingOrderInEditAction: null | SketchDriveOrderEditActionEnum;\r\n    pendingOrderInEditActionSelectDrives: null | string[];\r\n    SketchIdInEdit: null | string;\r\n    LocationGroupTabOpen: null | string;\r\n    dataHolderForCurrentOrderInEdit: null | OrderModel,\r\n    isAnimationRunning: boolean,\r\n    locationMainInEdit: null | string\r\n}\r\n\r\nexport enum TypeOfRecord {\r\n    Sidur = 1,\r\n    LocationGroup = 2\r\n}\r\n\r\nexport interface RecordBriefModel {\r\n    id: string,\r\n    dbId: string,\r\n    name: string,\r\n    typeOfRecord: TypeOfRecord,\r\n    locationGroupOrSidurId: string\r\n}\r\n\r\nexport interface SidurStore {\r\n    sidurCollection: SidurRecord[];\r\n    sidurArchive: SidurRecord[];\r\n    orders: OrderModel[];\r\n    vehicles: VehicleModel[];\r\n    deletedOrders: OrderModel[];\r\n    defaultOrderValues: OrderModel,\r\n    displaySetting: DisplaySettings,\r\n    sketches: SketchModel[];\r\n    sidurId: string;\r\n    Locations: LocationModel[];\r\n    LocationGroups: LocationGroup[];\r\n    sessionState: SessionModel;\r\n    recordBriefs: RecordBriefModel[]\r\n\r\n\r\n}\r\n\r\nexport const defaultOrderValues: OrderModel = {\r\n    id: '1',\r\n    driverName: '',\r\n    startHour: '08:00',\r\n    finishHour: '09:00',\r\n    TypeOfDrive: DriveType.OneWayTo,\r\n    Comments: '',\r\n    passengers: '1',\r\n    flexibility: ['-30', '10'],\r\n    location: ''\r\n}\r\nexport const defaultVehicleValues: VehicleModel = {\r\n    id: '1',\r\n    vehicleName: 'רכב',\r\n    startHour: '08:00',\r\n    endHour: '09:00',\r\n    kmLimit: '',\r\n    seats: '5',\r\n    Comments: ''\r\n}\r\nexport const AppConstants = {\r\n    deleteIdPrefix: 'Del',\r\n    ArchiveIdPrefix: 'Arch',\r\n\r\n}\r\n\r\nexport enum FileUploadType {\r\n    uploadFullDataAndReplace = 1,\r\n    uploadFullDataAndAdd = 2,\r\n    uploadSpecificData = 3\r\n}\r\n\r\nexport interface SaveDataModel {\r\n    userId: string,\r\n    userName: string,\r\n    timeStamp: string,\r\n    savedStore: SidurStore,\r\n    hash: string\r\n}\r\n","import * as React from 'react';\r\nimport {useState} from 'react';\r\nimport Button from '@mui/material/Button';\r\nimport Dialog from '@mui/material/Dialog';\r\nimport DialogActions from '@mui/material/DialogActions';\r\nimport DialogContent from '@mui/material/DialogContent';\r\nimport DialogTitle from '@mui/material/DialogTitle';\r\nimport {translations} from '../../services/translations';\r\nimport {Box, Select, SelectChangeEvent} from '@mui/material';\r\nimport MenuItem from '@mui/material/MenuItem';\r\nimport {FileUploadType} from '../../store/store.types';\r\n\r\n\r\ninterface FileUploadProps {\r\n    open: boolean;\r\n    selectedValue: string;\r\n    onClose: (result: { uploadType: FileUploadType, fileAsString: string } | null) => void;\r\n\r\n}\r\n\r\ninterface TypeOfUpload {\r\n    type: FileUploadType,\r\n    id: string,\r\n    name: string\r\n}\r\n\r\nconst fileUploadTypes: TypeOfUpload[] = [\r\n    {\r\n\r\n        type: FileUploadType.uploadFullDataAndAdd,\r\n        id: FileUploadType[FileUploadType.uploadFullDataAndAdd] as string,\r\n        name: translations.ImportAllData\r\n    },\r\n    {\r\n        type: FileUploadType.uploadFullDataAndReplace,\r\n        id: FileUploadType[FileUploadType.uploadFullDataAndReplace] as string,\r\n        name: translations.DeleteAndImportAllData\r\n    },\r\n    {\r\n        type: FileUploadType.uploadSpecificData,\r\n        id: FileUploadType[FileUploadType.uploadSpecificData] as string,\r\n        name: translations.ImportPart\r\n    }\r\n]\r\nconst defaultUploadType: FileUploadType = FileUploadType.uploadFullDataAndAdd;\r\nconst defaultId: string = fileUploadTypes.find(upload => upload.type === defaultUploadType)?.id || '1'\r\nexport const FileUploadDialog = (props: FileUploadProps) => {\r\n\r\n    const {\r\n        onClose,\r\n        selectedValue,\r\n        open\r\n    } = props;\r\n    const [uploadType, setUploadType] = useState<string>(defaultId)\r\n    const handleCloseCancel = () => {\r\n        onClose(null);\r\n    };\r\n    if (selectedValue) {\r\n\r\n    }\r\n\r\n\r\n    const onFileLoadChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n        const files = event.target?.files;\r\n        if (uploadType === '3') {\r\n            return\r\n        }\r\n        if (files?.length) {\r\n            const file = files[0];\r\n            const reader = new FileReader();\r\n            reader.onload = (event) => {\r\n                if (event) {\r\n                    const fileAsString = event?.target?.result as string;\r\n                    onClose({\r\n                        uploadType: FileUploadType.uploadFullDataAndAdd,\r\n                        fileAsString\r\n                    })\r\n\r\n                }\r\n            };\r\n            reader.readAsText(file);\r\n        }\r\n\r\n    }\r\n    return (\r\n        <div>\r\n            <Dialog open={open} onClose={handleCloseCancel}>\r\n                <DialogTitle> {translations.ImportFromFile}</DialogTitle>\r\n                <DialogContent>\r\n                    <Box sx={{\r\n                        minWidth: '25vw',\r\n                        display: 'flex',\r\n                        alignItems: 'center',\r\n\r\n                        flexDirection: 'column',\r\n                        justifyContent: 'center'\r\n                    }}>\r\n\r\n\r\n                        <Select dir={'rtl'} disableUnderline={true} variant={'standard'}\r\n                                defaultValue={defaultId}\r\n                                sx={{\r\n\r\n                                    fontSize: '1.25rem',\r\n                                    fontWeight: 'normal'\r\n                                }}\r\n                                onChange={(event: SelectChangeEvent<any>, _child: React.ReactNode) => {\r\n                                    const chosenId = event.target.value as string;\r\n                                    //  const typeOfUploadChosen: FileUploadType = fileUploadTypes.find(upload => upload.id.toString() === chosenId)?.type || defaultUploadType\r\n                                    setUploadType(chosenId)\r\n                                }}\r\n                        >\r\n\r\n                            {fileUploadTypes.map((typeOfUpload: TypeOfUpload) => <MenuItem key={typeOfUpload.id}\r\n                                                                                           value={typeOfUpload.id}> &nbsp;&nbsp;{typeOfUpload.name} &nbsp;&nbsp;</MenuItem>)}\r\n                        </Select>\r\n\r\n                        <Button id={'choose-file-button'} sx={{m: '15px'}}\r\n                                variant=\"contained\"\r\n                                component=\"label\"\r\n                        >\r\n                            {translations.ChooseFile}\r\n                            <input\r\n\r\n                                onChange={onFileLoadChange}\r\n                                type=\"file\"\r\n                                hidden\r\n                            />\r\n                        </Button>\r\n                    </Box>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button id={'file-upload-cancel-button'} onClick={handleCloseCancel}>{translations.Cancel}</Button>\r\n                    {/*<Button onClick={handleCloseUploaded}>{translations.Approve}</Button>*/}\r\n                </DialogActions>\r\n            </Dialog>\r\n        </div>\r\n    )\r\n        ;\r\n}\r\n","export enum SketchActionType {\r\n    Rename = 1,\r\n    Delete = 2,\r\n    CreateCopy = 3,\r\n    Archive = 4,\r\n    CreateNew = 5,\r\n}\r\n\r\n\r\n","import * as React from 'react';\r\nimport {ReactNode} from 'react';\r\nimport Button from '@mui/material/Button';\r\nimport Dialog from '@mui/material/Dialog';\r\nimport DialogActions from '@mui/material/DialogActions';\r\nimport DialogContent from '@mui/material/DialogContent';\r\nimport DialogTitle from '@mui/material/DialogTitle';\r\nimport {translations} from '../../services/translations';\r\nimport {Box, Tooltip} from '@mui/material';\r\nimport {AppConstants, SidurRecord, SidurStore} from '../../store/store.types';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport {Archive, Delete, DeleteForever, Edit, Unarchive} from '@mui/icons-material';\r\nimport {SidurManagementActionType} from '../../models/SidurMenuClickActionType.enum';\r\nimport {SxProps} from '@mui/system';\r\nimport {Styles} from '../../hoc/themes';\r\nimport {red} from '@mui/material/colors';\r\nimport {ActionsTypes} from '../../store/types.actions';\r\n\r\n\r\ninterface FileUploadProps {\r\n    open: boolean;\r\n    onClose: () => void;\r\n\r\n}\r\n\r\nexport const SidurManagementDialog = (props: FileUploadProps) => {\r\n    const {\r\n        onClose,\r\n        open\r\n    } = props;\r\n    const sidurArchive: SidurRecord[] = useSelector((state: SidurStore) => state.sidurArchive);\r\n    const sidurCollection: SidurRecord[] = useSelector((state: SidurStore) => state.sidurCollection);\r\n    const dispatch = useDispatch()\r\n\r\n    const handleCloseCancel = () => {\r\n        onClose();\r\n    };\r\n    const handleActionClick = (event: any, props: { action: SidurManagementActionType, sidurId: string }) => {\r\n        switch (props.action) {\r\n            case SidurManagementActionType.DeleteForever:\r\n                dispatch({\r\n                    type: ActionsTypes.DELETE_FOREVER_SIDUR,\r\n                    payload: {id: props.sidurId}\r\n                })\r\n                break;\r\n            case SidurManagementActionType.MoveToArchive:\r\n                dispatch({\r\n                    type: ActionsTypes.ARCHIVE_SIDUR,\r\n                    payload: {id: props.sidurId}\r\n                })\r\n                break;\r\n            case SidurManagementActionType.MoveToTrash:\r\n                dispatch({\r\n                    type: ActionsTypes.DELETE_SIDUR,\r\n                    payload: {id: props.sidurId}\r\n                })\r\n                break;\r\n            case SidurManagementActionType.Rename:\r\n                // dispatch({\r\n                //     type: ActionTypes.ARCHIVE_SIDUR,\r\n                //     payload: {id: props.sidurId}\r\n                // })\r\n                break;\r\n            case SidurManagementActionType.MoveToActive:\r\n                dispatch({\r\n                    type: ActionsTypes.MOVE_TO_ACTIVE_SIDUR,\r\n                    payload: {id: props.sidurId}\r\n                })\r\n                break;\r\n        }\r\n    }\r\n    const ActionButton = (props: { action: SidurManagementActionType, sidurId: string }) => {\r\n\r\n        const buttonBuilder = (action: SidurManagementActionType): { text: string, icon: ReactNode } | null => {\r\n            switch (action) {\r\n                case SidurManagementActionType.DeleteForever:\r\n                    return {\r\n                        text: translations.DeleteForever,\r\n                        icon: (<DeleteForever sx={{\r\n                            ...Styles.smallIcons,\r\n                            color: red\r\n                        }}/>)\r\n                    }\r\n                case SidurManagementActionType.MoveToArchive:\r\n                    return {\r\n                        text: translations.Archive,\r\n                        icon: (<Archive sx={Styles.smallIcons}/>)\r\n                    }\r\n                case SidurManagementActionType.MoveToTrash:\r\n                    return {\r\n                        text: translations.MoveToTrash,\r\n                        icon: (<Delete sx={Styles.smallIcons}/>)\r\n                    }\r\n                case SidurManagementActionType.Rename:\r\n                    return {\r\n                        text: translations.Rename,\r\n                        icon: (<Edit sx={Styles.smallIcons}/>)\r\n                    }\r\n                case SidurManagementActionType.MoveToActive:\r\n                    return {\r\n                        text: translations.MoveToActive,\r\n                        icon: (<Unarchive sx={Styles.smallIcons}/>)\r\n                    }\r\n                default:\r\n                    return null\r\n\r\n            }\r\n\r\n        }\r\n        const buttonProps = buttonBuilder(props.action)\r\n        return (\r\n            <Tooltip title={buttonProps?.text || ''} placement=\"top\">\r\n                <IconButton\r\n                    size=\"small\"\r\n                    aria-label=\"show more\"\r\n                    onClick={(event) =>\r\n                        handleActionClick(event, props)}\r\n                    color=\"inherit\"\r\n                >\r\n                    {buttonProps?.icon}\r\n                </IconButton>\r\n            </Tooltip>\r\n        )\r\n    }\r\n    const DividingLine = () =>\r\n        (\r\n\r\n            <Box sx={{\r\n                borderBottom: 'solid grey 1px',\r\n                margin: '20px 5px',\r\n                width: '100%',\r\n                height: '5px',\r\n            }}/>\r\n        )\r\n\r\n    const listBoxSx: SxProps = {\r\n        minWidth: '5vw',\r\n        display: 'flex',\r\n        alignItems: 'start',\r\n        flexDirection: 'column',\r\n    }\r\n    const headerSx: SxProps = {\r\n        fontWeight: 'bold',\r\n        mb: '15px'\r\n    }\r\n    const oneSidurSx: SxProps = {\r\n        minWidth: '20vw',\r\n        display: 'flex',\r\n        alignItems: 'start',\r\n        flexDirection: 'row',\r\n        flexWrap: 'wrap'\r\n    }\r\n    //Box sx={headerSx}\r\n    return (\r\n        <div>\r\n            <Dialog open={open} onClose={handleCloseCancel}>\r\n                <DialogTitle> {translations.ManageAllSidrurim}</DialogTitle>\r\n                <DialogContent>\r\n                    <Box sx={{\r\n                        minWidth: '40vw',\r\n                        display: 'flex',\r\n                        m: '20px',\r\n                        alignItems: 'start',\r\n                        flexDirection: 'column',\r\n                        justifyContent: 'space-between'\r\n                    }}>\r\n                        <Box sx={listBoxSx}>\r\n                            <Box sx={headerSx}>{translations.ActiveSidurim}</Box>\r\n                            {sidurCollection.map((sidur: SidurRecord, index: number) => (\r\n                                <Box sx={oneSidurSx} key={index}> {sidur.Name}\r\n                                    <ActionButton sidurId={sidur.id} action={SidurManagementActionType.MoveToArchive}/>\r\n                                    <ActionButton sidurId={sidur.id} action={SidurManagementActionType.MoveToTrash}/>\r\n                                    <ActionButton sidurId={sidur.id} action={SidurManagementActionType.Rename}/>\r\n                                </Box>))}\r\n                        </Box>\r\n                        <DividingLine/>\r\n                        <Box sx={listBoxSx}>\r\n                            <Box sx={headerSx}>{translations.inArchive}</Box>\r\n\r\n                            {sidurArchive.filter((s: SidurRecord) => s.id.includes(AppConstants.ArchiveIdPrefix)).map((sidur: SidurRecord, index: number) => (\r\n                                <Box sx={oneSidurSx} key={index}>  {sidur.Name}\r\n                                    <ActionButton sidurId={sidur.id} action={SidurManagementActionType.MoveToActive}/>\r\n                                    <ActionButton sidurId={sidur.id} action={SidurManagementActionType.MoveToTrash}/>\r\n                                    <ActionButton sidurId={sidur.id} action={SidurManagementActionType.Rename}/>\r\n                                </Box>))}\r\n\r\n                        </Box>\r\n                        <DividingLine/>\r\n                        <Box sx={listBoxSx}>\r\n                            <Box sx={headerSx}>{translations.Trash}</Box>\r\n                            {sidurArchive.filter((s: SidurRecord) => s.id.includes(AppConstants.deleteIdPrefix)).map((sidur: SidurRecord, index: number) => (\r\n                                <Box sx={oneSidurSx} key={index}> {sidur.Name}<ActionButton sidurId={sidur.id}\r\n                                                                                            action={SidurManagementActionType.MoveToActive}/>\r\n                                    <ActionButton sidurId={sidur.id}\r\n                                                  action={SidurManagementActionType.DeleteForever}/> </Box>))}\r\n                        </Box>\r\n\r\n\r\n                    </Box>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={handleCloseCancel}>{translations.Finish}</Button>\r\n                    {/*<Button onClick={handleCloseUploaded}>{translations.Approve}</Button>*/}\r\n                </DialogActions>\r\n            </Dialog>\r\n        </div>\r\n    )\r\n        ;\r\n}\r\n","import * as React from 'react';\r\nimport {useRef} from 'react';\r\nimport Button from '@mui/material/Button';\r\nimport Dialog from '@mui/material/Dialog';\r\nimport DialogActions from '@mui/material/DialogActions';\r\nimport DialogContent from '@mui/material/DialogContent';\r\nimport DialogTitle from '@mui/material/DialogTitle';\r\nimport {translations} from '../../services/translations';\r\nimport {useDispatch} from 'react-redux';\r\nimport {ActionsTypes} from '../../store/types.actions';\r\nimport TextField from '@mui/material/TextField';\r\nimport {Box, Typography} from '@mui/material';\r\n\r\n\r\ninterface FileUploadProps {\r\n    open: boolean;\r\n    onClose: () => void;\r\n\r\n}\r\n\r\nexport const OrderImportDialog = (props: FileUploadProps) => {\r\n    const {\r\n        onClose,\r\n        open\r\n    } = props;\r\n    const dispatch = useDispatch()\r\n    const valueRef: any = useRef('');\r\n    const handleCloseCancel = () => {\r\n        onClose();\r\n    };\r\n    const handleCloseImportOrder = () => {\r\n\r\n\r\n        if (valueRef.current.value && valueRef.current.value.length) {\r\n\r\n            dispatch({\r\n                type: ActionsTypes.IMPORT_ORDERS_AS_TEXT,\r\n                payload: {importedOrders: valueRef.current.value}\r\n            })\r\n        }\r\n        onClose();\r\n\r\n\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Dialog open={open} onClose={handleCloseCancel}>\r\n                <DialogTitle> {translations.ImportOrders}</DialogTitle>\r\n                <Box>\r\n                    {/*<DialogContentText> {translations.PastHere}</DialogContentText>*/}\r\n                </Box>\r\n\r\n                <Typography/>\r\n                <DialogContent>\r\n                    <TextField id={'import-orders-dialog-text-field'}\r\n                               autoFocus\r\n                               sx={{\r\n                                   width:\r\n                                       '200px',\r\n                               }}\r\n                               label={translations.PastHere}\r\n                               type=\"text\"\r\n                               fullWidth\r\n                               multiline={true}\r\n                               variant=\"standard\"\r\n                               inputRef={valueRef}\r\n                               onKeyUp={(event) => {\r\n                                   if (event.key === 'Enter') {\r\n                                       handleCloseCancel()\r\n                                   }\r\n                               }}\r\n                    />\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button id={'orders-import-cancel-button'}\r\n                            onClick={handleCloseCancel}>{translations.Finish}</Button>\r\n                    <Button id={'orders-import-approve-button'} onClick={handleCloseImportOrder}>{translations.Approve}</Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n        </div>\r\n    )\r\n        ;\r\n}\r\n","import {styled} from '@mui/system';\r\nimport {ToggleButtonGroup} from '@mui/material';\r\n\r\n\r\nexport const StyledToggleButtonGroup = styled(ToggleButtonGroup)(({theme: _theme}) => ({\r\n    '& .MuiToggleButtonGroup-grouped': {\r\n        backgroundColor: 'rgba(255,255,255,0.11)',\r\n        '&:hover': {\r\n            backgroundColor: 'rgba(255,255,255,0.21)',\r\n        },\r\n        // margin: _theme.spacing(0.5),\r\n        // border: 0,\r\n        '&.Mui-disabled': {\r\n            // border: 0,\r\n        },\r\n        '&.Mui-selected': {\r\n            backgroundColor: 'rgb(187,185,249)',\r\n            // border: 0,\r\n        },\r\n\r\n        '&:not(:first-of-type)': {\r\n            // borderRadius: _theme.shape.borderRadius,\r\n        },\r\n        '&:first-of-type': {\r\n            // borderRadius: _theme.shape.borderRadius,\r\n        },\r\n    },\r\n}));\r\n","import * as React from 'react';\r\nimport ToggleButton from '@mui/material/ToggleButton';\r\nimport {translations} from '../../services/translations';\r\nimport {useDispatch} from 'react-redux';\r\nimport {ActionsTypes} from '../../store/types.actions';\r\nimport {StyledToggleButtonGroup} from './styled-toggle-button';\r\nimport {Link} from 'react-router-dom';\r\n\r\n\r\nexport const ToggleButtons = () => {\r\n    const [alignment, setAlignment] = React.useState('web');\r\n    const dispatch = useDispatch()\r\n    const handleChange = (\r\n        event: React.MouseEvent<HTMLElement>,\r\n        newAlignment: string,\r\n    ) => {\r\n        setAlignment(newAlignment);\r\n\r\n        dispatch({\r\n            type: ActionsTypes.CHANGE_VIEW,\r\n            payload: {\r\n                value: newAlignment\r\n            }\r\n        })\r\n\r\n    };\r\n\r\n    return (\r\n        <StyledToggleButtonGroup\r\n            value={alignment}\r\n            exclusive\r\n            sx={{\r\n                color: 'white',\r\n                direction: 'ltr'\r\n            }}\r\n            color={'standard'}\r\n\r\n            onChange={handleChange}\r\n        >\r\n\r\n            <ToggleButton component={Link} to=\"/locations\" sx={{color: 'white'}}\r\n                          value={'locationsView'}>{translations.Locations}</ToggleButton>\r\n\r\n       \r\n            <ToggleButton component={Link} to=\"/sketch\" sx={{color: 'white'}} value={'sketch'}>{translations.Sketch}</ToggleButton>\r\n\r\n            <ToggleButton component={Link} to=\"/orders\" sx={{color: 'white'}} value={'orders'}> {translations.Orders} </ToggleButton>\r\n\r\n        </StyledToggleButtonGroup>\r\n    );\r\n}\r\n","import * as React from 'react';\r\nimport {useRef} from 'react';\r\nimport Button from '@mui/material/Button';\r\nimport TextField from '@mui/material/TextField';\r\nimport Dialog from '@mui/material/Dialog';\r\nimport DialogActions from '@mui/material/DialogActions';\r\nimport DialogContent from '@mui/material/DialogContent';\r\nimport DialogTitle from '@mui/material/DialogTitle';\r\nimport {translations} from '../../services/translations';\r\n\r\ninterface RenameProps {\r\n    open: boolean;\r\n    selectedValue: string;\r\n    onClose: (value: string | null) => void;\r\n}\r\n\r\nexport const RenameDialog = (props: RenameProps) => {\r\n    // const [open, setOpen] = React.useState(false);\r\n    const {\r\n        onClose,\r\n        selectedValue,\r\n        open\r\n    } = props;\r\n    const valueRef: any = useRef('')\r\n    const handleCloseCancel = () => {\r\n        onClose(null);\r\n    };\r\n    const handleCloseRename = () => {\r\n        onClose(valueRef.current.value || selectedValue);\r\n    };\r\n    return (\r\n        <div>\r\n\r\n            <Dialog open={open} onClose={handleCloseCancel}>\r\n                <DialogTitle> {translations.Rename}</DialogTitle>\r\n                <DialogContent>\r\n\r\n                    <TextField\r\n                        autoFocus\r\n                        margin=\"dense\"\r\n                        id={'sidur-rename-dialog-text-field'}\r\n                        label={translations.NewName}\r\n                        type=\"text\"\r\n                        fullWidth\r\n                        variant=\"standard\"\r\n                        defaultValue={selectedValue}\r\n                        inputRef={valueRef}\r\n                        onKeyUp={(event) => {\r\n                            if (event.key === 'Enter') {\r\n                                handleCloseRename()\r\n                            }\r\n                        }}\r\n                    />\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button id={'sidur-rename-cancel-button'} onClick={handleCloseCancel}>{translations.Cancel}</Button>\r\n                    <Button id={'sidur-rename-approve-button'} onClick={handleCloseRename}>{translations.Approve}</Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n        </div>\r\n    );\r\n}\r\n","//interface\r\nimport {SaveDataModel} from '../store/store.types';\r\n\r\n\r\nconst APPID = '$123AT6'\r\nexport const SaveLoadService = {\r\n    saveToLocalStorage: (data: SaveDataModel): { success: boolean } => {\r\n        const userId = data.userId || 'Chen123';\r\n        data.timeStamp = data.timeStamp || SaveLoadService.getTimeStampFromDate()\r\n        localStorage.setItem(APPID + userId, JSON.stringify(data));\r\n        return {success: true}\r\n    },\r\n    loadFromLocalStorage(userId: string): { data: SaveDataModel | null, success: boolean } {\r\n        userId = userId || 'Chen123';\r\n\r\n        const data = localStorage.getItem(APPID + userId);\r\n        const parsedData = data ? JSON.parse(data) : '';\r\n\r\n        return {\r\n            data: parsedData as SaveDataModel | null,\r\n            success: !!data\r\n        }\r\n\r\n\r\n    },\r\n    getTimeStampFromDate: (date: Date = new Date()): string => {\r\n        return date.getTime().toString()\r\n    }\r\n}\r\n\r\n","export const hashFunction = function (str: string) {\r\n    let h = 0xdeadbeef;\r\n    for (let i = 0; i < str.length; i++) {\r\n        h = Math.imul(h ^ str.charCodeAt(i), 2654435761);\r\n    }\r\n    return (((h ^ h) >>> 16) >>> 0);\r\n}\r\n","import {DriveModel, SketchModel, VehicleScheduleModel} from '../models/Sketch.model';\r\nimport {OrderModel} from '../models/Order.model';\r\nimport {SidurRecord} from '../store/store.types';\r\nimport {LocationGroup} from '../models/Location.model';\r\n\r\n\r\nexport class CloneUtil {\r\n \r\n\r\n    static deepCloneOrder(obj: OrderModel): OrderModel {\r\n        const cloned: OrderModel = {...obj}\r\n        cloned.flexibility = [...cloned.flexibility]\r\n        return cloned\r\n    }\r\n\r\n    static deepCloneDrive(obj: DriveModel): DriveModel {\r\n        const cloned: DriveModel = {...obj}\r\n        cloned.flexibility = [...cloned.flexibility]\r\n        return cloned\r\n    }\r\n\r\n    static deepCloneVehicleSchedules(obj: VehicleScheduleModel): VehicleScheduleModel {\r\n        const cloned: VehicleScheduleModel = {...obj}\r\n        cloned.drives = cloned.drives.map(d => CloneUtil.deepCloneDrive(d))\r\n        return cloned\r\n    }\r\n\r\n    static deepCloneSidur(sidur: SidurRecord): SidurRecord {\r\n        const clonedSidur = {...sidur}\r\n        clonedSidur.orders = clonedSidur.orders.map(o => (CloneUtil.deepCloneOrder(o)));\r\n        clonedSidur.deletedOrders = clonedSidur.deletedOrders.map(o => (CloneUtil.deepCloneOrder(o)));\r\n        clonedSidur.sketches = clonedSidur.sketches.map(o => (CloneUtil.deepCloneSketch(o)));\r\n        clonedSidur.defaultOrderValues = clonedSidur.defaultOrderValues ? {...clonedSidur.defaultOrderValues} : undefined\r\n        return clonedSidur\r\n    }\r\n\r\n    static deepCloneSketch(obj: SketchModel): SketchModel {\r\n        obj.vehicleSchedules = obj.vehicleSchedules.map(vs => CloneUtil.deepCloneVehicleSchedules(vs))\r\n        return {...obj}\r\n    }\r\n\r\n    static deepCloneLocationGroup(obj: LocationGroup): LocationGroup {\r\n        obj.Locations = obj.Locations.map(l => ({...l}))\r\n        return {...obj}\r\n    }\r\n\r\n    public static deep(obj: SidurRecord, name: 'SidurRecord'): OrderModel ;\r\n    public static deep(obj: OrderModel, name: 'OrderModel'): OrderModel ;\r\n    public static deep(obj: SketchModel, name: 'SketchModel'): SketchModel ;\r\n    public static deep(obj: any, name: string,): any {\r\n        const newObj = {...obj}\r\n        switch (name) {\r\n            case 'SketchModel':\r\n                return CloneUtil.deepCloneSketch(obj)\r\n            case 'SidurRecord':\r\n                return CloneUtil.deepCloneSidur(obj)\r\n            case 'OrderModel':\r\n                newObj.flexibility = [(newObj).flexibility[0], (newObj).flexibility[1]];\r\n        }\r\n        return newObj;\r\n    }\r\n}\r\n\r\n","import {AppConstants, RecordBriefModel, SaveDataModel, SessionModel, SidurRecord, SidurStore, TypeOfRecord} from './store.types';\r\nimport {SaveLoadService} from '../services/save-load.service';\r\nimport {hashFunction} from '../services/hash-function';\r\nimport {CloneUtil} from '../services/clone-utility';\r\nimport {ActionsTypes} from './types.actions';\r\n\r\n\r\nexport const StoreUtils = {\r\n    removeIdPrefix: (id: string): string => {\r\n        const replaceIdsNames: RegExp = new RegExp(AppConstants.ArchiveIdPrefix + '|' + AppConstants.deleteIdPrefix, 'g');\r\n        return id.replace(replaceIdsNames, '')\r\n    },\r\n    HandleReducerSaveToLocalStorage: (state: SidurStore): void => {\r\n        const saveObj: SaveDataModel = StoreUtils.buildSaveDataModel(state, 'chen', 'chen')\r\n        SaveLoadService.saveToLocalStorage(saveObj);\r\n    },\r\n    updateRecordBrief: (state: SidurStore): SidurStore => {\r\n        const newState = {...state}\r\n        const allSiduresVisiable = newState.sidurCollection.concat(newState.sidurArchive);\r\n        const allLocationGroups = [...newState.LocationGroups]\r\n        const sidurRecords: RecordBriefModel[] = allSiduresVisiable.map(s => {\r\n            const newSidurRecord: RecordBriefModel = {\r\n                dbId: s.dbId,\r\n                id: s.id,\r\n                locationGroupOrSidurId: s.locationGroupIdForSidur,\r\n                name: s.Name,\r\n                typeOfRecord: TypeOfRecord.Sidur\r\n            }\r\n            return newSidurRecord\r\n        })\r\n        const locationRecords: RecordBriefModel[] = allLocationGroups.map(s => {\r\n            const newSidurRecord: RecordBriefModel = {\r\n                dbId: s.dbId,\r\n                id: s.id,\r\n                locationGroupOrSidurId: s.id,\r\n                name: s.name,\r\n                typeOfRecord: TypeOfRecord.LocationGroup\r\n            }\r\n            return newSidurRecord\r\n        })\r\n\r\n        newState.recordBriefs = sidurRecords.concat(locationRecords)\r\n        return newState\r\n    },\r\n\r\n    UpdateSidurCollectionWithCurrenSidur: (state: SidurStore): SidurRecord[] => {\r\n        const newState = {...state}\r\n        const sidurId = newState.sidurId;\r\n        const updatedOrders = newState.orders.map(o => ({...o}));\r\n        const updatedVehicles = newState.vehicles.map(o => ({...o}));\r\n        const updatedDeletedOrders = newState.deletedOrders.map(o => ({...o}));\r\n        const updatedSketches = newState.sketches.map(o => ({...o}))\r\n        newState.sidurCollection = newState.sidurCollection.map((sidur: SidurRecord) => {\r\n            if (sidur.id === sidurId) {\r\n                const updatedSidur = {...sidur};\r\n                updatedSidur.orders = updatedOrders;\r\n                updatedSidur.vehicles = updatedVehicles;\r\n                updatedSidur.sketches = updatedSketches;\r\n                updatedSidur.deletedOrders = updatedDeletedOrders;\r\n                return updatedSidur\r\n            } else {\r\n                return sidur\r\n            }\r\n        });\r\n        return newState.sidurCollection\r\n    },\r\n    buildSaveDataModel: (state: SidurStore, userName: string = 'chen', userId: string = 'chen'): SaveDataModel => {\r\n        const hash = hashFunction(JSON.stringify(state))\r\n        return {\r\n            userName: 'chen',\r\n            userId: 'chen',\r\n            savedStore: state,\r\n            timeStamp: SaveLoadService.getTimeStampFromDate(),\r\n            hash: hash.toString()\r\n        }\r\n\r\n    },\r\n    updateSidurRecordWithSketchChanges(state: SidurStore): SidurStore {\r\n        const newState = {...state};\r\n        const thisSidurInCollection: SidurRecord | undefined = newState.sidurCollection.find((sidur: SidurRecord) => sidur.id === newState.sidurId);\r\n\r\n\r\n        if (thisSidurInCollection) {\r\n            thisSidurInCollection.sketches = newState.sketches.map(s => CloneUtil.deepCloneSketch(s))\r\n        }\r\n\r\n        return newState\r\n\r\n    },\r\n    shieldAnimationBeforeDispatch(dispatchingAction: () => void, dispatchFunct: any, delay: number = 600) {\r\n        const callArguments = {\r\n            type: ActionsTypes.START_LOADING_ANIMATION,\r\n            payload: {\r\n                value: null,\r\n            }\r\n        }\r\n        dispatchFunct(callArguments)\r\n        setTimeout(_ => {\r\n            dispatchingAction();\r\n        }, delay)\r\n\r\n    },\r\n\r\n    defaultSessionState(): SessionModel {\r\n        const defaultSession: SessionModel = {\r\n            LocationGroupTabOpen: null,\r\n            SketchIdInEdit: null,\r\n            dataHolderForCurrentOrderInEdit: null,\r\n            isAnimationRunning: true,\r\n            locationGroupInEdit: null,\r\n            locationMainInEdit: null,\r\n            orderIdInEdit: null,\r\n            pendingOrderInEditAction: null,\r\n            pendingOrderInEditActionSelectDrives: null,\r\n            pendingOrderIdInEdit: null,\r\n            routeIdInEdit: null,\r\n            transportIdInEdit: null\r\n\r\n        }\r\n        return defaultSession\r\n    },\r\n    abortSessionPendingOrderState(state: SidurStore) {\r\n        state.sessionState.pendingOrderInEditActionSelectDrives = [];\r\n        state.sessionState.pendingOrderInEditAction = null;\r\n    }\r\n}\r\n","import * as React from 'react';\r\nimport AppBar from '@mui/material/AppBar';\r\nimport Box from '@mui/material/Box';\r\nimport Toolbar from '@mui/material/Toolbar';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport Typography from '@mui/material/Typography';\r\nimport MenuItem from '@mui/material/MenuItem';\r\nimport MenuIcon from '@mui/icons-material/Menu';\r\nimport AccountCircle from '@mui/icons-material/AccountCircle';\r\nimport MoreIcon from '@mui/icons-material/MoreVert';\r\nimport {translations} from '../../services/translations';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {Select, SelectChangeEvent} from '@mui/material';\r\nimport {Edit} from '@mui/icons-material';\r\nimport {ProfileMenu} from './profile-menu';\r\nimport {ActionsTypes} from '../../store/types.actions';\r\nimport {SidurMenu} from './sidur-menu';\r\nimport {SidurActionType} from '../../models/SidurMenuClickActionType.enum';\r\nimport {ProfileMenuClickActionType} from '../../models/profile-menu-click-action-type.enum';\r\nimport {FileUploadType, SidurRecord, SidurStore} from '../../store/store.types';\r\nimport {FileUploadDialog} from '../Dialogs/file-uplaod-dialog';\r\nimport {SidurManagementDialog} from '../Dialogs/sidur-management-dialog';\r\nimport {OrderImportDialog} from '../Dialogs/orders-import-dialog';\r\nimport {ToggleButtons} from '../buttons/toggle-button-group';\r\nimport {RenameDialog} from '../Dialogs/rename-dialog';\r\nimport {StoreUtils} from '../../store/store-utils';\r\n\r\n\r\nexport const AppNavBar = () => {\r\n    const dispatch = useDispatch()\r\n    const [anchorEl, setAnchorEl] = React.useState<null | HTMLElement>(null);\r\n    const [RenameOpen, setRenameOpen] = React.useState(false);\r\n    const [UploadOpen, setUploadOpen] = React.useState(false);\r\n    const [ManageSidurimOpen, setManageSidurimOpen] = React.useState(false);\r\n    const [importOrdersOpen, setImportOrdersOpen] = React.useState(false);\r\n    const [sidurMoreAnchorEl, setSidurMoreAnchorEl] =\r\n        React.useState<null | HTMLElement>(null);\r\n    const sidurId = useSelector((state: SidurStore) => state.sidurId);\r\n    const sidurCollection = useSelector((state: SidurStore) => state.sidurCollection);\r\n    const sidurSelected = sidurCollection.find((sidurRecord: SidurRecord) => sidurRecord.id === sidurId);\r\n\r\n    const sidurName = sidurSelected?.Name || '';\r\n\r\n\r\n    const isProfileMenuOpen = Boolean(anchorEl);\r\n    const isSidurMenuOpen = Boolean(sidurMoreAnchorEl);\r\n\r\n    const handleProfileMenuOpen = (event: React.MouseEvent<HTMLElement>) => {\r\n        setAnchorEl(event.currentTarget);\r\n    };\r\n\r\n    const handleRenameClose = (value: string | null) => {\r\n        setRenameOpen(false);\r\n        const id = sidurId;\r\n        if (value) {\r\n            dispatch({\r\n                type: ActionsTypes.RENAME_SIDUR,\r\n                payload: {\r\n                    value,\r\n                    id\r\n                }\r\n            })\r\n        }\r\n    };\r\n    const handleUploadClose = (result: { uploadType: FileUploadType, fileAsString: string } | null): void => {\r\n        setUploadOpen(false);\r\n        if (result) {\r\n            dispatch({\r\n                type: ActionsTypes.IMPORT_FILE_UPLOADED,\r\n                payload: {...result}\r\n            })\r\n        }\r\n    };\r\n    const handleSidurMenuClick = (event: React.MouseEvent<HTMLElement>, clickAction: SidurActionType) => {\r\n\r\n        switch (clickAction) {\r\n\r\n            case SidurActionType.CreateCopy:\r\n                dispatch({\r\n                    type: ActionsTypes.CLONE_SIDUR,\r\n                    payload: {id: sidurId}\r\n                })\r\n                break;\r\n            case SidurActionType.Archive:\r\n                dispatch({\r\n                    type: ActionsTypes.ARCHIVE_SIDUR,\r\n                    payload: {id: sidurId}\r\n                })\r\n                break;\r\n            case SidurActionType.Delete:\r\n                dispatch({\r\n                    type: ActionsTypes.DELETE_SIDUR,\r\n                    payload: {id: sidurId}\r\n                })\r\n                break;\r\n            case SidurActionType.Rename:\r\n                setRenameOpen(true);\r\n                break;\r\n            case SidurActionType.ManageSidurim:\r\n                setManageSidurimOpen(true);\r\n                break;\r\n            case SidurActionType.ImportOrders:\r\n                setImportOrdersOpen(true);\r\n                break;\r\n\r\n            default:\r\n        }\r\n        handleSidurMenuClose()\r\n    };\r\n    const handleSidurMenuClose = () => {\r\n        setSidurMoreAnchorEl(null);\r\n    };\r\n\r\n    const handleProfileMenuClose = (result: any, action?: ProfileMenuClickActionType) => {\r\n        setAnchorEl(null);\r\n        switch (action) {\r\n            case ProfileMenuClickActionType.MyProfile:\r\n                dispatch({\r\n                    type: ActionsTypes.OPEN_MY_PROFILE,\r\n                    payload: null\r\n                })\r\n                break;\r\n            case ProfileMenuClickActionType.Export:\r\n                StoreUtils.shieldAnimationBeforeDispatch(() => {\r\n                    dispatch({\r\n                        type: ActionsTypes.EXPORT_ALL,\r\n                        payload: null\r\n                    })\r\n                }, dispatch)\r\n                break;\r\n            case ProfileMenuClickActionType.Import:\r\n                setUploadOpen(true)\r\n                break;\r\n            case null:\r\n            case undefined:\r\n                break;\r\n            default:\r\n        }\r\n        handleSidurMenuClose();\r\n    };\r\n\r\n    const handleSidurMenuOpen = (event: React.MouseEvent<HTMLElement>) => {\r\n        setSidurMoreAnchorEl(event.currentTarget);\r\n    };\r\n    const handleSidurChanged = (event: any, _child: React.ReactNode) => {\r\n\r\n        const chosenSidur = event.target.value as string;\r\n        if (chosenSidur === 'NEW') {\r\n            dispatch({\r\n                type: ActionsTypes.ADD_NEW_SIDUR,\r\n                payload: null\r\n            });\r\n        } else {\r\n            dispatch({\r\n                type: ActionsTypes.CHOOSE_SIDUR,\r\n                payload: {id: chosenSidur}\r\n            })\r\n        }\r\n\r\n\r\n    }\r\n    const menuId = 'primary-search-account-menu';\r\n    const sidurMenuId = 'primary-search-account-menu-mobile';\r\n    return (\r\n        <Box dir=\"rtl\"\r\n        >\r\n            <AppBar position=\"static\" sx={{\r\n                mr: 0,\r\n                ml: 0,\r\n                'div.MuiToolbar-root.MuiToolbar-gutters.MuiToolbar-regular': {\r\n                    margin: 0\r\n                }\r\n            }}>\r\n                <Toolbar sx={{\r\n                    mr: 0,\r\n                    ml: 0\r\n                }}>\r\n                    <IconButton\r\n                        size=\"large\"\r\n                        color=\"inherit\"\r\n                        aria-label=\"open drawer\"\r\n                        sx={{mr: 0}}\r\n                    >\r\n                        <MenuIcon/>\r\n                    </IconButton>\r\n                    <Typography\r\n                        variant=\"h6\"\r\n                        noWrap\r\n                        component=\"div\"\r\n                        sx={{\r\n                            display: {\r\n                                xs: 'none',\r\n                                sm: 'block'\r\n                            }\r\n                        }}\r\n                    >    &nbsp; &nbsp;\r\n                        {translations.Sidur}\r\n                        <Select dir={'rtl'} disableUnderline={true} variant={'standard'} value={sidurId}\r\n                                sx={{\r\n                                    color: 'white',\r\n                                    fontSize: '1.25rem',\r\n                                    fontWeight: 'normal'\r\n                                }}\r\n                                onChange={(event: SelectChangeEvent<any>, child: React.ReactNode) => {\r\n                                    handleSidurChanged(event, child)\r\n                                }}>\r\n                            <MenuItem key={10000}\r\n                                      value={'NEW'}> &nbsp;&nbsp;<b>{translations.NewSidur}</b> &nbsp;&nbsp;</MenuItem>\r\n\r\n                            {sidurCollection.map((sidurRecord: SidurRecord, i: number) => <MenuItem key={i}\r\n                                                                                                    value={sidurRecord.id}> &nbsp;&nbsp;{sidurRecord.Name} &nbsp;&nbsp;</MenuItem>)}\r\n                        </Select>\r\n                    </Typography>\r\n                    <IconButton\r\n                        size=\"small\"\r\n                        aria-label=\"show more\"\r\n                        aria-controls={sidurMenuId}\r\n                        aria-haspopup=\"true\"\r\n                        onClick={handleSidurMenuOpen}\r\n                        color=\"inherit\"\r\n                    >\r\n                        <Edit/>\r\n                    </IconButton>\r\n                    <Box sx={{\r\n                        width: '20px',\r\n                        height: '5px'\r\n                    }}/>\r\n                    <ToggleButtons/>\r\n\r\n                    <Box sx={{flexGrow: 1}}/>\r\n                    <Box sx={{\r\n                        display: {\r\n                            xs: 'none',\r\n                            md: 'flex'\r\n                        }\r\n                    }}>\r\n\r\n                        <IconButton\r\n                            size=\"large\"\r\n                            edge=\"end\"\r\n                            aria-label=\"account of current user\"\r\n                            aria-controls={menuId}\r\n                            aria-haspopup=\"true\"\r\n                            onClick={handleProfileMenuOpen}\r\n                            color=\"inherit\"\r\n                        >\r\n                            <AccountCircle/>\r\n                        </IconButton>\r\n                    </Box>\r\n                    <Box sx={{\r\n                        display: {\r\n                            xs: 'flex',\r\n                            md: 'none'\r\n                        }\r\n                    }}>\r\n                        <IconButton\r\n                            size=\"large\"\r\n                            aria-label=\"show more\"\r\n                            aria-controls={sidurMenuId}\r\n                            aria-haspopup=\"true\"\r\n                            onClick={handleSidurMenuOpen}\r\n                            color=\"inherit\"\r\n                        >\r\n                            <MoreIcon/>\r\n                        </IconButton>\r\n                    </Box>\r\n                </Toolbar>\r\n            </AppBar>\r\n\r\n            <SidurMenu sidurMoreAnchorEl={sidurMoreAnchorEl} sidurMenuId={sidurMenuId} isSidurMenuOpen={isSidurMenuOpen}\r\n                       handleSidurMenuClick={handleSidurMenuClick} handleSidurMenuClose={handleSidurMenuClose}/>\r\n            <ProfileMenu menuId={menuId} anchorEl={anchorEl} handleMenuClose={handleProfileMenuClose} isMenuOpen={isProfileMenuOpen}/>\r\n            <RenameDialog open={RenameOpen} onClose={handleRenameClose} selectedValue={sidurName}/>\r\n            <FileUploadDialog open={UploadOpen} onClose={handleUploadClose} selectedValue={''}/>\r\n            <SidurManagementDialog open={ManageSidurimOpen} onClose={() => {\r\n                setManageSidurimOpen(false)\r\n            }}/>\r\n            <OrderImportDialog open={importOrdersOpen} onClose={() => {\r\n                setImportOrdersOpen(false)\r\n            }}/>\r\n\r\n        </Box>\r\n    );\r\n}\r\n","import {Box} from '@mui/material';\r\nimport {useEffect} from 'react';\r\nimport {useDispatch} from 'react-redux';\r\nimport {ActionsTypes} from '../../store/types.actions';\r\n\r\n\r\nexport const LoadingShield = () => {\r\n    const dispatch = useDispatch();\r\n    const activeEffect = () => {\r\n        const inter: any = setInterval(() => {\r\n            dispatch({\r\n                type: ActionsTypes.STOP_LOADING_ANIMATION,\r\n                payload: null\r\n\r\n            })\r\n        }, 2000);\r\n        return () => {\r\n            clearInterval(inter)\r\n        }\r\n    }\r\n    useEffect(activeEffect, [activeEffect])\r\n\r\n\r\n    return (<Box>\r\n\r\n            <div style={{\r\n                'width': '100px',\r\n                'color': '#536377'\r\n            }}>\r\n                <svg version=\"1.1\" id=\"Cap_1\" x=\"0px\" y=\"0px\" viewBox=\"0 0 460.384 460.384\"\r\n\r\n\r\n                     xmlns=\"http://www.w3.org/2000/svg\">\r\n\r\n                    <defs id=\"defs93\">\r\n                        <radialGradient id=\"RadialGradient1\" cx=\"65%\" cy=\"50%\" r=\"50%\" fx=\"50%\" fy=\"50%\">\r\n                            <stop offset=\"0%\" stopColor=\"#3e5440\"/>\r\n                            <stop offset=\"100%\" stopColor=\"#536377\"/>\r\n                        </radialGradient>\r\n\r\n                    </defs>\r\n                    <g id=\"g58\">\r\n\r\n\r\n                        <path\r\n                            d=\"M409.227,196.421l-66.917-7.645l-35.714-58.056c-10.905-17.728-30.61-28.741-51.424-28.741H133.676   c-34.925,0-65.792,23.518-75.063,57.193l-0.948,3.445c-4.607,16.733-17.845,30.052-34.549,34.762   C9.506,201.217,0,213.773,0,227.914v83.012c0,4.142,3.358,7.5,7.5,7.5h38.557c4.757,22.798,25.006,39.978,49.195,39.978   s44.438-17.18,49.195-39.978h163.37c4.757,22.798,25.006,39.978,49.195,39.978s44.438-17.18,49.195-39.978h40.477   c3.813,0,7.02-2.861,7.452-6.65l5.874-51.483C463.614,228.69,440.834,200.037,409.227,196.421z M15,294.313h31.949   c-0.843,2.938-1.43,5.983-1.724,9.113H15V294.313z M95.252,343.404c-19.44,0-35.255-15.815-35.255-35.255   s15.815-35.256,35.255-35.256s35.255,15.816,35.255,35.256S114.692,343.404,95.252,343.404z M357.012,343.404   c-19.44,0-35.255-15.815-35.255-35.255s15.815-35.256,35.255-35.256s35.255,15.816,35.255,35.256S376.452,343.404,357.012,343.404z    M357.012,257.893c-16.987,0-32.021,8.48-41.122,21.42H182.425c-4.142,0-7.5,3.358-7.5,7.5s3.358,7.5,7.5,7.5h126.284   c-0.843,2.938-1.43,5.983-1.724,9.113H145.279c-2.389-25.504-23.909-45.533-50.027-45.533c-16.987,0-32.021,8.48-41.122,21.42H15   v-51.399c0-7.455,5.012-14.075,12.187-16.098c21.728-6.126,38.947-23.452,44.94-45.218l0.948-3.445   c7.484-27.186,32.405-46.174,60.601-46.174h121.496c15.643,0,30.452,8.277,38.647,21.6l37.626,61.164   c1.207,1.962,3.249,3.26,5.537,3.522l70.541,8.059c16.002,1.831,28.943,12.335,34.67,26.276h-23.413c-4.142,0-7.5,3.358-7.5,7.5   s3.358,7.5,7.5,7.5h26.578c0.052,1.975-0.023,3.975-0.253,5.993l-2.364,20.72h-44.608   C389.033,266.373,373.998,257.893,357.012,257.893z M407.038,303.426c-0.293-3.13-0.881-6.175-1.724-9.113h35.716l-1.04,9.113   H407.038z\"\r\n                            id=\"path52\">\r\n                        </path>\r\n\r\n\r\n                        <path\r\n                            d=\"M286.014,143.391c-6.531-10.637-18.348-17.245-30.841-17.245h-121.5c-24.087,0-45.371,16.217-51.761,39.443l-0.943,3.438   c-2.468,8.956-6.268,24.34-6.429,24.991c-0.553,2.238-0.045,4.606,1.376,6.422c1.422,1.815,3.599,2.876,5.905,2.876h227.64   c2.717,0,5.222-1.469,6.547-3.841c1.326-2.372,1.265-5.275-0.159-7.589L286.014,143.391z M199.352,141.145v47.169h-69.054v-47.018   c1.115-0.098,2.24-0.151,3.375-0.151H199.352z M95.432,173.002l0.944-3.441c2.86-10.395,9.865-18.839,18.922-23.747v42.499H91.432   C92.697,183.321,94.242,177.323,95.432,173.002z M214.352,188.314v-47.169h40.821c7.316,0,14.235,3.868,18.062,10.1l22.807,37.069   H214.352z\"\r\n                            id=\"path54\">\r\n                        </path>\r\n                        <path className=\"move-animation\" strokeWidth=\"25\" d=\"M -45 361 H 483\" id=\"path56\">\r\n                        </path>\r\n\r\n                    </g>\r\n                    <g id=\"g60\">\r\n                    </g>\r\n                    <g id=\"g62\">\r\n                    </g>\r\n                    <g id=\"g64\">\r\n                    </g>\r\n                    <g id=\"g66\">\r\n                    </g>\r\n                    <g id=\"g68\">\r\n                    </g>\r\n                    <g id=\"g70\">\r\n                    </g>\r\n                    <g id=\"g72\">\r\n                    </g>\r\n                    <g id=\"g74\">\r\n                    </g>\r\n                    <g id=\"g76\">\r\n                    </g>\r\n                    <g id=\"g78\">\r\n                    </g>\r\n                    <g id=\"g80\">\r\n                    </g>\r\n                    <g id=\"g82\">\r\n                    </g>\r\n                    <g id=\"g84\">\r\n                    </g>\r\n                    <g id=\"g86\">\r\n                    </g>\r\n                    <g id=\"g88\">\r\n                    </g>\r\n                    <path className=\"car-body-fill\" style={{\r\n                        'stroke': 'none',\r\n                        'strokeWidth': '0.615487'\r\n                    }}\r\n                          d=\"m 144.78292,298.29978 c -2.12822,-10.33921 -6.92045,-19.09839 -14.39869,-26.31778 -7.12023,-6.87376 -14.07014,-10.70132 -23.5377,-12.96306 -7.144565,-1.70678 -19.709392,-1.36507 -26.217781,0.71304 -9.206063,2.93946 -18.302083,8.87426 -23.521535,15.34689 l -2.94439,3.65133 -19.541701,0.0426 -19.541701,0.0426 v -25.7163 c 0,-27.91918 0.202055,-30.00814 3.340598,-34.53706 2.291671,-3.30688 5.31678,-5.26796 10.973219,-7.11356 14.327643,-4.67489 26.53887,-14.03019 34.753188,-26.62522 4.130852,-6.33384 5.525396,-9.48836 8.788774,-19.88054 1.433755,-4.56578 3.581205,-10.2402 4.772103,-12.60982 8.085144,-16.08758 21.378978,-27.18143 39.235156,-32.74218 l 5.53938,-1.72507 h 70.78096 70.78096 l 4.9239,1.67684 c 7.14231,2.43232 12.26476,5.6647 17.82567,11.24838 4.48263,4.50097 6.62381,7.72098 24.9289,37.48914 11.53598,18.76009 20.74413,33.0975 21.72129,33.82078 1.47818,1.09415 6.34396,1.78536 37.85243,5.37714 19.88591,2.26687 37.79037,4.44677 39.78768,4.84422 11.27708,2.24402 21.85543,9.76155 27.88233,19.81465 3.57077,5.95617 4.54367,5.441 -10.27522,5.441 h -13.05262 l -2.05638,2.05638 c -1.131,1.131 -2.25414,2.84433 -2.49584,3.80739 -0.60562,2.41297 0.89747,6.35116 3.02625,7.92892 1.6291,1.20742 2.64474,1.29814 16.47821,1.47178 l 14.74211,0.18506 -0.4197,4.12335 c -0.23083,2.26785 -0.86511,8.00092 -1.40952,12.74017 l -0.98983,8.61681 -22.16843,0.16141 -22.16844,0.16141 -2.32085,-3.04331 c -4.88723,-6.40855 -15.1725,-13.26536 -24.10177,-16.06776 -5.39502,-1.69318 -17.80022,-2.34057 -24.03734,-1.25443 -10.9015,1.89842 -21.43671,8.01511 -29.13669,16.9166 l -2.70412,3.12608 -68.07684,0.30774 c -64.37092,0.29099 -68.1661,0.36834 -69.71641,1.42089 -1.81416,1.23169 -3.59207,4.4887 -3.59207,6.58044 0,2.09174 1.77791,5.34875 3.59207,6.58044 1.55186,1.05359 5.07534,1.12197 65.86797,1.27815 l 64.22841,0.16502 -0.3835,1.528 c -0.21093,0.8404 -0.55431,2.77417 -0.76307,4.29726 l -0.37957,2.76927 h -80.40642 -80.40642 z m 167.89058,-95.4599 c 1.16652,-0.48741 2.69614,-1.80301 3.39914,-2.92356 2.55189,-4.06761 2.21905,-4.79017 -15.44581,-33.53026 -17.93021,-29.17184 -19.98936,-31.81861 -28.04618,-36.04969 -9.02341,-4.73869 -4.26198,-4.46935 -79.0101,-4.46935 h -66.7803 l -5.53938,1.40469 c -11.59117,2.93931 -22.158415,9.62833 -29.435664,18.63263 -6.186379,7.65454 -8.392062,12.74608 -13.071004,30.1728 -5.717412,21.29447 -5.771687,23.35132 -0.697832,26.44504 1.931052,1.17744 4.067406,1.19933 117.23653,1.20159 98.93209,0.002 115.57025,-0.1233 117.3906,-0.88389 z\"\r\n                          id=\"path212\"/>\r\n                    <path className=\"car-body-fill\" style={{\r\n                        'stroke': 'none',\r\n                        'strokeWidth': '0.615487'\r\n                    }}\r\n                          d=\"m 406.93215,300.66564 c -0.20876,-1.52309 -0.5534,-3.46188 -0.76586,-4.3084 l -0.3863,-1.53914 h 17.30035 17.30034 v 1.45281 c 0,0.79905 -0.17613,2.73783 -0.3914,4.30841 l -0.3914,2.85559 H 423.4548 407.31173 Z\"\r\n                          id=\"path251\"/>\r\n                    <path className=\"car-body-fill\" style={{\r\n                        'stroke': 'none',\r\n                        'strokeWidth': '0.615487'\r\n                    }}\r\n                          d=\"m 15.079422,299.1265 v -4.3084 h 15.76076 c 14.761555,0 15.73386,0.0683 15.336472,1.0771 -0.233357,0.5924 -0.578707,2.53119 -0.767444,4.3084 l -0.343159,3.23131 H 30.072736 15.079422 Z\"\r\n                          id=\"path290\"/>\r\n                    <path className=\"car-wheel-fill\" fill=\"url(#RadialGradient1)\"\r\n                          style={{'strokeWidth': '0.615487'}}\r\n                          d=\"m 348.13386,341.8919 c -12.02779,-3.36898 -22.19732,-13.78884 -24.98033,-25.59524 -2.8441,-12.06552 0.52707,-23.67929 9.46401,-32.60383 7.58686,-7.57632 16.4522,-10.96254 26.79057,-10.23295 9.10118,0.64228 16.53841,4.26829 23.06512,11.24537 10.16813,10.86976 12.18167,26.40614 5.1585,39.80281 -3.80207,7.25243 -10.21288,12.90625 -18.33975,16.17417 -3.62599,1.45807 -5.38078,1.76447 -11.07876,1.9345 -4.70455,0.14038 -7.78002,-0.0808 -10.07936,-0.72483 z\"\r\n                          id=\"path440\"/>\r\n                    <path className=\"car-wheel-fill\" fill=\"url(#RadialGradient1)\"\r\n                          style={{'strokeWidth': '0.615487'}}\r\n                          d=\"m 84.321668,341.11938 c -9.129893,-3.11591 -16.170625,-9.25316 -20.21198,-17.61835 -2.754989,-5.70254 -3.554495,-9.25192 -3.536878,-15.70182 0.04955,-18.14083 14.485132,-33.31809 32.673415,-34.35212 19.739955,-1.12225 36.872285,14.96103 36.920105,34.65939 0.0113,4.67059 -1.88806,12.25751 -4.11946,16.45471 -2.32862,4.38008 -10.09961,12.01478 -14.64379,14.38696 -8.25998,4.31193 -18.421779,5.12665 -27.081412,2.17123 z\"\r\n                          id=\"path479\"/>\r\n                    <path className=\"car-window-fill\" style={{'strokeWidth': '0.615487'}}\r\n                          d=\"M 214.49709,164.61466 V 141.5059 l 22.92688,0.18189 22.92687,0.18188 3.39062,1.59058 c 1.86485,0.87482 4.56594,2.81361 6.00244,4.30841 1.4365,1.4948 7.20261,10.19598 12.81359,19.33596 5.61096,9.13998 10.75682,17.51829 11.43525,18.61847 l 1.2335,2.00033 h -40.36458 -40.36457 z\"\r\n                          id=\"path914\"/>\r\n                    <path className={'car-window-fill'} style={{'strokeWidth': '0.615487'}}\r\n                          d=\"m 130.79091,164.64267 v -23.08074 h 34.15951 34.15951 v 23.08074 23.08075 h -34.15951 -34.15951 z\"\r\n                          id=\"path953\"/>\r\n                    <path className={'car-window-fill'} style={{'strokeWidth': '0.615487'}}\r\n                          d=\"m 92.240868,186.64632 c 0.169713,-0.59241 1.287046,-4.85181 2.482962,-9.46535 1.195915,-4.61353 2.74067,-9.8249 3.432789,-11.58082 2.592711,-6.57776 7.801531,-13.09912 13.708081,-17.16231 l 2.92356,-2.01116 v 20.64837 20.64837 h -11.42798 c -10.591017,0 -11.405382,-0.0789 -11.119412,-1.0771 z\"\r\n                          id=\"path992\"/>\r\n                </svg>\r\n\r\n            </div>\r\n\r\n\r\n        </Box>\r\n    )\r\n}\r\n","import {Box, Fade} from '@mui/material';\r\nimport {SxProps} from '@mui/system';\r\nimport {LoadingShield} from './loading-shield';\r\nimport {useSelector} from 'react-redux';\r\nimport {SessionModel} from '../../store/store.types';\r\n\r\nconst loadingSx: SxProps = {\r\n    position: 'absolute',\r\n    top: '65px',\r\n    left: '75px',\r\n    height: '50px',\r\n    width: '50px',\r\n    zIndex: 10000\r\n}\r\n\r\n\r\nexport const Loading = () => {\r\n\r\n    const session: SessionModel = useSelector((state: { sessionState: SessionModel }) => state.sessionState);\r\n    const isAnimationRunning = session ? session.isAnimationRunning : true;\r\n\r\n    return (\r\n        <Fade in={isAnimationRunning} unmountOnExit>\r\n            <Box sx={loadingSx}>\r\n                <LoadingShield/>\r\n            </Box>\r\n        </Fade>\r\n\r\n    )\r\n}\r\n","import {HashRouter} from 'react-router-dom';\r\n\r\n\r\nexport const RouterMain = ({\r\n                               children\r\n                           }: any) => {\r\n\r\n    return (\r\n        <HashRouter basename={'h/'}>\r\n            {\r\n                children\r\n            }\r\n        </HashRouter>\r\n    )\r\n\r\n}\r\n\r\n","import Menu from '@mui/material/Menu';\r\nimport MenuItem from '@mui/material/MenuItem';\r\nimport * as React from 'react';\r\nimport {Archive, Delete, DriveFileRenameOutline, FileCopy} from '@mui/icons-material';\r\nimport {translations} from '../../services/translations';\r\nimport {SketchActionType} from '../../models/SketchMenuClickActionType.enum';\r\n\r\n\r\ninterface SketchMenuProps {\r\n    sketchMoreAnchorEl: Element | ((element: Element) => Element) | null | undefined;\r\n    sketchMenuId: string,\r\n    isSketchMenuOpen: boolean,\r\n    handleSketchMenuClick: (event: React.MouseEvent<HTMLElement>, clickAction: SketchActionType) => void\r\n    handleSketchMenuClose: () => void\r\n}\r\n\r\nexport const SketchMenu = (props: SketchMenuProps) => {\r\n    const {\r\n        sketchMoreAnchorEl,\r\n        sketchMenuId,\r\n        isSketchMenuOpen,\r\n        handleSketchMenuClick,\r\n        handleSketchMenuClose\r\n    } = props;\r\n    return (\r\n        <Menu\r\n            anchorEl={sketchMoreAnchorEl}\r\n            anchorOrigin={{\r\n                vertical: 'top',\r\n                horizontal: 'right',\r\n            }}\r\n            id={sketchMenuId}\r\n            keepMounted\r\n            transformOrigin={{\r\n                vertical: 'top',\r\n                horizontal: 'right',\r\n            }}\r\n            open={isSketchMenuOpen}\r\n            onClose={handleSketchMenuClose}\r\n        >\r\n\r\n            <MenuItem onClick={(e) => handleSketchMenuClick(e, SketchActionType.Rename)}>\r\n\r\n                <DriveFileRenameOutline/>&nbsp;\r\n                {translations.Rename}\r\n            </MenuItem>\r\n            <MenuItem onClick={(e) => handleSketchMenuClick(e, SketchActionType.Delete)}>\r\n\r\n                <Delete/>&nbsp;\r\n                {translations.Delete}\r\n            </MenuItem>\r\n            <MenuItem onClick={(e) => handleSketchMenuClick(e, SketchActionType.CreateCopy)}>\r\n\r\n                <FileCopy/>&nbsp;\r\n                {translations.CreateCopy}\r\n            </MenuItem>\r\n            <MenuItem onClick={(e) => handleSketchMenuClick(e, SketchActionType.Archive)}>\r\n                <Archive/> &nbsp;\r\n                {translations.Archive}\r\n            </MenuItem>\r\n     \r\n        </Menu>\r\n    );\r\n\r\n\r\n}\r\n","import React, {useState} from 'react'\r\nimport {Box, SxProps} from '@mui/system';\r\nimport {Card, Typography} from '@mui/material';\r\nimport {DriveModel} from '../../models/Sketch.model';\r\nimport {DriveType} from '../../models/DriveType.enum';\r\nimport {Utils} from '../../services/utils';\r\nimport {translations} from '../../services/translations';\r\nimport {Colors, Styles} from '../../hoc/themes';\r\nimport {WarningIcon} from '../buttons/warning-icon';\r\n\r\nexport enum ChooseDriveMode {\r\n    NotActive = 0,\r\n    selectable = 1,\r\n    nonSelectable = 2,\r\n\r\n}\r\n\r\ninterface sketchDriveProps {\r\n    chooseDriveMode: ChooseDriveMode\r\n    drive: DriveModel,\r\n    previousDrive: DriveModel | null,\r\n    sketchDriveClick: (event: React.MouseEvent<HTMLElement>, drive: DriveModel) => void\r\n}\r\n\r\nconst custumSxMaker = (chooseDriveMode: ChooseDriveMode): SxProps => {\r\n    switch (chooseDriveMode) {\r\n\r\n\r\n        case ChooseDriveMode.nonSelectable:\r\n            return {\r\n                filter: 'grayscale(120%);',\r\n                opacity: '0.5'\r\n            }\r\n        case ChooseDriveMode.selectable:\r\n            return {\r\n                filter: `drop-shadow(0px 0px 3px ${'#00b705'})`,\r\n\r\n            }\r\n        case ChooseDriveMode.NotActive:\r\n        default:\r\n            return {};\r\n\r\n    }\r\n}\r\nexport const SketchDrive = (props: sketchDriveProps) => {\r\n\r\n    const drive = props.drive;\r\n    const [inHover, setInHover] = useState(false);\r\n    const onMouseOver = () => {\r\n        setInHover(true)\r\n    };\r\n    const onMouseOut = () => {\r\n        setInHover(false)\r\n    };\r\n    const calculateIfDrivesOverlap = (thisDrive: DriveModel, previousDrive: DriveModel | null): DriveModel | null => {\r\n        if (!previousDrive) {\r\n            return null\r\n        }\r\n        const prevFinish = Utils.hourTextToDecimal(previousDrive.finishHour);\r\n        const thisStart = Utils.hourTextToDecimal(thisDrive.startHour);\r\n        if (prevFinish > thisStart) {\r\n            return previousDrive\r\n        } else {\r\n            return null\r\n        }\r\n    }\r\n    const driveOverlap = !!calculateIfDrivesOverlap(props.drive, props.previousDrive);\r\n\r\n\r\n    const customSx = custumSxMaker(props.chooseDriveMode)\r\n    return (\r\n\r\n        <Box>\r\n            {driveOverlap ? <Box sx={{\r\n                zIndex: 50,\r\n                position: 'relative',\r\n                m: '0.2em',\r\n                mb: '0.3em',\r\n\r\n                display: 'flex',\r\n                flexDirection: 'row',\r\n                alignItems: 'stretch',\r\n                justifyContent: 'start',\r\n                cursor: 'default',\r\n                bgcolor: Colors.warningRed,\r\n                boxShadow: '0px -1px 7px 7px ' + Colors.warningRed.replace('1.0', '0.8'),\r\n                p: '0 0.5em'\r\n            }}> <Box sx={{\r\n                ...Styles.flexRow,\r\n                alignItems: 'center',\r\n                justifyContent: 'center',\r\n                textAlign: 'center'\r\n            }}> < Box sx={Styles.flexColumn}> <WarningIcon/>\r\n            </Box><Box sx={{\r\n                ...Styles.flexRow,\r\n                alignItems: 'center',\r\n                justifyContent: 'center',\r\n                textAlign: 'center'\r\n            }}> <b> {translations.OverlapingDrives}</b></Box>\r\n            </Box></Box> : null}\r\n            <Card onClick={(event: any) => props.sketchDriveClick(event, drive)} onMouseOver={onMouseOver}\r\n                  onMouseOut={onMouseOut} elevation={inHover ? 8 : 2} sx={{\r\n                m: '0.2em',\r\n                mb: '0.3em',\r\n                position: 'relative',\r\n\r\n                zIndex: 40,\r\n                minHeight: '10vh',\r\n                display: 'flex',\r\n                flexDirection: 'row',\r\n                alignItems: 'stretch',\r\n                justifyContent: 'start',\r\n                cursor: 'default',\r\n                ...customSx\r\n            }}>\r\n                <Box id={'drive-hour'} sx={{\r\n                    display: 'flex',\r\n                    flexDirection: 'column',\r\n                    alignItems: 'start',\r\n                    justifyContent: 'start',\r\n                    flexWrap: 'wrap',\r\n                    p: '0.2em',\r\n                    pl: '0.25em',\r\n                    pr: '0.25em',\r\n                    bgcolor: '#aadcff',\r\n                    //flexShrink: 4,\r\n                    //width: '20%',\r\n                    minHeight: '100%',\r\n                    //flexShrink: '4'\r\n\r\n                }}>\r\n                    <Typography dir=\"ltr\"\r\n                                variant={'subtitle1'}>{drive.startHour}  </Typography>\r\n                    {drive.TypeOfDrive === DriveType.Tsamud || drive.TypeOfDrive === DriveType.TwoWay ?\r\n                        (<><Box sx={{\r\n                            width: '10px',\r\n                            height: '2px',\r\n                            borderBottom: '1px solid black',\r\n                            alignSelf: 'center'\r\n                        }}/>\r\n                            <Typography dir=\"ltr\"\r\n                                        variant={'subtitle1'}>{drive.finishHour}  </Typography>\r\n\r\n                        </>) : null\r\n                    }</Box>\r\n\r\n                <Box id={'drive-description'} sx={{\r\n                    display: 'flex',\r\n                    flexDirection: 'row',\r\n                    alignItems: 'start',\r\n                    justifyContent: 'start',\r\n                    p: '0.2em',\r\n                    pl: '0.4em',\r\n                    pr: '0.4em',\r\n                    flexGrow: 4,\r\n\r\n                }}>\r\n                    <Box sx={{\r\n                        width: '5px',\r\n                        height: '10px'\r\n                    }}/>\r\n                    <Typography\r\n                        variant={'subtitle1'}>{drive.description}  </Typography>\r\n\r\n                </Box>\r\n            </Card>\r\n        </Box>\r\n\r\n\r\n    )\r\n\r\n}\r\n","import {hashFunction} from './hash-function';\r\nimport {DriveModel, SketchModel, VehicleScheduleModel} from '../models/Sketch.model';\r\nimport {DriveType} from '../models/DriveType.enum';\r\n\r\n\r\nexport const Utils = {\r\n    getNextId: (currentIds: string[]): string => {\r\n        const allIds: number [] = currentIds.map(id => Number(id) || 0);\r\n        allIds.push(0)\r\n        const newId = Math.max(...allIds) + 1;\r\n        return newId.toString()\r\n    },\r\n    validateHash: (data: string, hash: string): boolean => {\r\n        return (data && hash) ? hashFunction(data).toString() === hash : false\r\n    },\r\n    convertStrToNum: (str: string): number => {\r\n        let numberToReturn = 0\r\n        try {\r\n            const parsed = parseInt(str, 10)\r\n            if (!isNaN(parsed)) {\r\n                numberToReturn = parsed;\r\n            }\r\n        } catch (e) {\r\n\r\n        } finally {\r\n\r\n        }\r\n        return numberToReturn\r\n\r\n    },\r\n    defaultSketchMMock(): SketchModel {\r\n        let ids: number = 1\r\n        const mkDrv = (driver: string, start: string, finish: string, location: string, TypeOfDrive: DriveType = DriveType.Tsamud): DriveModel => {\r\n            ids++\r\n            return {\r\n                id: ids.toString(),\r\n                driverName: driver,\r\n                startHour: start,\r\n                finishHour: finish,\r\n                TypeOfDrive: TypeOfDrive,\r\n                location: '1',\r\n                Comments: '',\r\n                passengers: '1',\r\n                flexibility: ['-30', '10'],\r\n                implementsOrders: [],\r\n                description: '',\r\n            }\r\n\r\n        }\r\n        const vehicle1: VehicleScheduleModel = {\r\n            id: '1',\r\n            VehicleId: '1',\r\n            drives: [\r\n                mkDrv('יוסי', '08:00', '10:00', '1'),\r\n                mkDrv('חן', '11:00', '14:00', '1'),\r\n                mkDrv('אברהם', '16:00', '20:00', '1'),\r\n                mkDrv('רונה', '20:30', '20:00', '1'),\r\n            ],\r\n            Comments: 'רכב ראשון'\r\n        }\r\n        const vehicle2: VehicleScheduleModel = {\r\n            id: '2',\r\n            VehicleId: '1',\r\n            drives: [\r\n                mkDrv('יוליה', '06:00', '12:00', '1'),\r\n                mkDrv('רונן', '12:30', '14:00', '1'),\r\n                mkDrv('שמואל', '15:00', '19:00', '1'),\r\n                mkDrv('מיכל', '20:00', '23:00', '1'),\r\n            ],\r\n            Comments: 'רכב ראשון'\r\n        }\r\n        return {\r\n            vehicleSchedules: [vehicle1, vehicle2],\r\n            id: '1',\r\n            Comments: '',\r\n            name: 'סידור בשני רכבים',\r\n            unassignedOrders: [],\r\n            assignedOrders: [],\r\n        }\r\n    },\r\n    hourTextToDecimal(hourText: string): number {\r\n        if (!hourText.includes(':')) {\r\n\r\n        }\r\n        const splitHour = hourText.split(':');\r\n        const hour = Number(splitHour[0]) || 0;\r\n        const minutes = Number(splitHour[1]) || 0;\r\n        const minutesAsFraction = this.minutesToFraction(minutes);\r\n        return hour + minutesAsFraction;\r\n\r\n\r\n    },\r\n    DecimalTimeToHourText(time: number): string {\r\n        if (time !== 0 && !time) {\r\n            return ''\r\n        }\r\n        const numberToTwoDigit = (num: number): string => {\r\n            if (!num) {\r\n                num = 0;\r\n            }\r\n            let addZero = ''\r\n            if (num < 10) {\r\n                addZero = '0'\r\n            }\r\n            return addZero + num.toString()\r\n        }\r\n        const correctSmallDiversions = (num: number): number => {\r\n            if (!num) {\r\n                return num\r\n            }\r\n            const remainder = num % 5\r\n            if (remainder === 0) {\r\n                return num\r\n            }\r\n            if (remainder && remainder > 2.5) {\r\n                return num + (5 - remainder);\r\n            } else {\r\n                return num - remainder;\r\n            }\r\n\r\n        }\r\n        time += 0.02;\r\n        const hour = Math.floor(time);\r\n        const minutesAsFraction = Math.floor(100 * (time - Math.floor(time)));\r\n        const minutes = this.FractionToMinutes(minutesAsFraction);\r\n        const minutesCorrected = correctSmallDiversions(minutes);\r\n        const hourText = numberToTwoDigit(hour)\r\n        const minuteText = numberToTwoDigit(minutesCorrected)\r\n        return hourText + ':' + minuteText;\r\n\r\n\r\n    },\r\n\r\n    minutesToFraction(minute: string | number): number {\r\n        const minAsNumber = Number(minute) || 0;\r\n        if (minAsNumber === 0) {\r\n            return 0\r\n        }\r\n        return Math.floor((minAsNumber / 60) * 100) / 100\r\n    },\r\n    FractionToMinutes(minute: number): number {\r\n        const minAsNumber = Number(minute) || 0;\r\n        if (minAsNumber === 0) {\r\n            return 0\r\n        }\r\n        return Math.floor((minAsNumber / 100) * 60)\r\n    },\r\n    HourDecimalToMinutes(hourDecimal: number): number {\r\n        const hourAsNumber = Number(hourDecimal) || 0;\r\n        if (hourAsNumber === 0) {\r\n            return 0\r\n        }\r\n        return Math.floor((hourAsNumber) * 60)\r\n    },\r\n\r\n}\r\n","import React from 'react';\r\nimport {Warning} from '@mui/icons-material';\r\nimport {Box} from '@mui/material';\r\nimport {SxProps} from '@mui/system';\r\nimport {Colors} from '../../hoc/themes';\r\n\r\n\r\nexport const WarningIcon = (props: { custom?: any, sx?: SxProps }) => {\r\n\r\n\r\n    return (\r\n\r\n        <Box>\r\n            <Warning sx={{\r\n                filter: 'drop-shadow(0 0 .12rem black)',\r\n                color: Colors.warningYellow, ...props.sx\r\n            }}/>\r\n        </Box>\r\n\r\n\r\n    )\r\n\r\n}\r\n","export enum SketchDriveOrderEditActionEnum {\r\n    RemoveFromPending = 1,\r\n    Merge = 2,\r\n    Split = 3,\r\n    Change = 4,\r\n    ChangeTime = 5,\r\n    AddToVehicle = 6,\r\n    ReplaceExisting = 7,\r\n    publicTransport = 8,\r\n    AddToPending = 9,\r\n    MoveToTop = 10,\r\n    MoveToBottom = 11,\r\n}\r\n","import {DriveType} from '../models/DriveType.enum';\r\nimport {translations} from './translations';\r\nimport {OrderModel} from '../models/Order.model';\r\nimport {LocationModel} from '../models/Location.model';\r\nimport {DriveModel} from '../models/Sketch.model';\r\nimport {SketchDriveOrderEditActionEnum} from '../models/SketchDriveOrderEditActionEnum';\r\n\r\ninterface driveHourPrefixes {\r\n    timeStart: string,\r\n    timeEnd: string,\r\n    location: string\r\n\r\n}\r\n\r\nexport const LanguageUtilities = {\r\n    getPrefixByDriveType(driveType: DriveType | undefined): driveHourPrefixes {\r\n        switch (driveType) {\r\n            case DriveType.OneWayFrom:\r\n                return {\r\n                    timeStart: translations.pickupTime,\r\n                    timeEnd: '',\r\n                    location: translations.fromLocation\r\n                }\r\n            case DriveType.OneWayTo:\r\n                return {\r\n                    timeStart: translations.exitTime,\r\n                    timeEnd: '',\r\n                    location: translations.toLocation\r\n                }\r\n            case DriveType.Tsamud:\r\n                return {\r\n                    timeStart: translations.exitTime,\r\n                    timeEnd: translations.returnTime,\r\n                    location: translations.inLocation\r\n                }\r\n            case DriveType.TwoWay:\r\n                return {\r\n                    timeStart: translations.Start,\r\n                    timeEnd: translations.returnTime,\r\n                    location: translations.inLocation\r\n                }\r\n\r\n        }\r\n        return {\r\n            timeStart: translations.exitTime,\r\n            timeEnd: translations.returnTime,\r\n            location: translations.Where + ' '\r\n        }\r\n\r\n    },\r\n\r\n    buildBriefText(orderValues: OrderModel | DriveModel, locations: LocationModel[]): { timeText: string, driverAndLocation: string } {\r\n        //console.log(orderValues)\r\n        const isWithName = orderValues.driverName.trim() !== '';\r\n        if (!isWithName) {\r\n            return {\r\n                timeText: '',\r\n                driverAndLocation: translations.NewOrder\r\n            }\r\n\r\n        }\r\n        let timeText = orderValues?.startHour || '';\r\n        if (orderValues.TypeOfDrive === DriveType.Tsamud && orderValues?.startHour && orderValues?.finishHour) {\r\n            timeText = orderValues.startHour + ' - ' + orderValues.finishHour;\r\n        }\r\n        let briefText = orderValues.driverName;\r\n        if (orderValues.TypeOfDrive && orderValues.location) {\r\n            const driveTimeLanguage = LanguageUtilities.getPrefixByDriveType(orderValues.TypeOfDrive);\r\n            const location = locations.find(l => l.id === orderValues.location);\r\n            if (location) {\r\n                briefText += ' ' + driveTimeLanguage.location + location.name\r\n            }\r\n\r\n        }\r\n\r\n        return {\r\n            timeText: timeText,\r\n            driverAndLocation: briefText\r\n        }\r\n    },\r\n    renderPassengerText(num: string): string {\r\n        if (num === '1') {\r\n            return translations.onePassenger\r\n        }\r\n        return num.toString() + ' ' + translations.passengers\r\n    },\r\n    addLineBreaksToString(str: string, numberOfBR: number = 2): string {\r\n        const br = '\\n   ';\r\n        const arr = new Array(numberOfBR)\r\n        return str + arr.map(s => br).join('')\r\n    },\r\n    buildSketchEditActionsArray(): { action: SketchDriveOrderEditActionEnum, name: string, icon: string } [] {\r\n        const ret: { action: SketchDriveOrderEditActionEnum, name: string, icon: string } [] = []\r\n        for (let sketchEditActionEnumKey in SketchDriveOrderEditActionEnum) {\r\n            if (isNaN(Number(sketchEditActionEnumKey))) {\r\n                continue\r\n            }\r\n            let name = sketchEditActionEnumKey;\r\n            const enumbEntry = Number(sketchEditActionEnumKey) as SketchDriveOrderEditActionEnum;\r\n            let icon = SketchDriveOrderEditActionEnum[enumbEntry];\r\n            let isDisabled: boolean = false\r\n            switch (enumbEntry) {\r\n                case SketchDriveOrderEditActionEnum.Split:\r\n                    name = translations.SketchActionSplit;\r\n                    break;\r\n                case SketchDriveOrderEditActionEnum.Merge:\r\n                    name = translations.SketchActionMerge;\r\n                    break;\r\n                case SketchDriveOrderEditActionEnum.Change:\r\n                    name = translations.SketchActionChange;\r\n                    isDisabled = true;\r\n                    break;\r\n                case SketchDriveOrderEditActionEnum.ChangeTime:\r\n                    name = translations.SketchActionChangeTime;\r\n                    isDisabled = true;\r\n                    break;\r\n                case SketchDriveOrderEditActionEnum.ReplaceExisting:\r\n                    name = translations.SketchActionReplaceExisting;\r\n                    break;\r\n                case SketchDriveOrderEditActionEnum.publicTransport:\r\n                    name = translations.SketchActionPublicTransport\r\n                    break;\r\n                case SketchDriveOrderEditActionEnum.RemoveFromPending:\r\n                    name = translations.SketchActionRemove;\r\n                    isDisabled = true;\r\n                    break;\r\n                case SketchDriveOrderEditActionEnum.AddToPending:\r\n                    name = translations.SketchActionAddToPending;\r\n                    isDisabled = true;\r\n                    break;\r\n                case SketchDriveOrderEditActionEnum.MoveToTop:\r\n                    name = translations.SketchActionMoveToTop;\r\n                    break;\r\n                case SketchDriveOrderEditActionEnum.MoveToBottom:\r\n                    name = translations.SketchActionMoverToBottom;\r\n                    break;\r\n                case SketchDriveOrderEditActionEnum.AddToVehicle:\r\n                    name = translations.SketchActionAddToVehicle;\r\n                    break;\r\n            }\r\n            if (isDisabled) {\r\n                continue\r\n            }\r\n            ret.push({\r\n                action: Number(sketchEditActionEnumKey),\r\n                name: name,\r\n                icon: icon\r\n            })\r\n        }\r\n        return ret\r\n    }\r\n}\r\n","export enum LocationGroupActionType {\r\n    Rename = 1,\r\n    Delete = 2,\r\n    CreateCopy = 3,\r\n \r\n}\r\n","import React from 'react'\r\nimport {Box} from '@mui/system';\r\nimport {useSelector} from 'react-redux';\r\nimport {Typography} from '@mui/material';\r\nimport {LanguageUtilities} from '../../services/language-utilities';\r\nimport {OrderModel} from '../../models/Order.model';\r\nimport {LocationModel} from '../../models/Location.model';\r\n\r\n\r\ninterface sketchPendingOrderProps {\r\n    order: OrderModel,\r\n    isInEdit: boolean\r\n}\r\n\r\n\r\nconst timeText = (drive: OrderModel, locations: LocationModel[]) => LanguageUtilities.buildBriefText(drive, locations).timeText;\r\nconst driverAndLocation = (drive: OrderModel, locations: LocationModel[]) => LanguageUtilities.buildBriefText(drive, locations).driverAndLocation;\r\nexport const SketchPendingOrderBrief = (props: sketchPendingOrderProps) => {\r\n\r\n    const order = props.order;\r\n    const locations = useSelector(((state: { Locations: LocationModel[] }) => state.Locations));\r\n\r\n\r\n    return ((<Box id={'pending-order'}>\r\n\r\n\r\n            <Box id={'drive-description'}>\r\n                <Box sx={{\r\n                    width: '5px',\r\n                    height: '10px'\r\n                }}/>\r\n                <Typography\r\n                    variant={'subtitle1'}>{timeText(order, locations) + ' ' + driverAndLocation(order, locations)}  </Typography>\r\n\r\n            </Box>\r\n\r\n        </Box>)\r\n\r\n    )\r\n\r\n}\r\n","import React from 'react';\r\nimport {\r\n    Add,\r\n    AddBox,\r\n    ArrowCircleDown,\r\n    ArrowCircleUp,\r\n    BusAlert,\r\n    ChangeCircle,\r\n    Check,\r\n    MergeType,\r\n    Remove,\r\n    ReplayCircleFilled,\r\n    Splitscreen,\r\n    Timer\r\n} from '@mui/icons-material';\r\n\r\n\r\nexport const Icons: Record<string, React.ReactElement> = {\r\n    'add': (<Add/>),\r\n    'RemoveFromPending': (<Check/>),\r\n    'Remove': (<Remove/>),\r\n    'Merge': (<MergeType/>),\r\n    'Split': (<Splitscreen/>),\r\n    'Change': (<ChangeCircle/>),\r\n    'ChangeTime': (<Timer/>),\r\n    'ReplaceExisting': (<ReplayCircleFilled/>),\r\n    'publicTransport': (<BusAlert/>),\r\n    'AddToPending': (<AddBox/>),\r\n    'MoveToTop': (<ArrowCircleUp/>),\r\n    'MoveToBottom': (<ArrowCircleDown/>),\r\n    'AddToVehicle': (<AddBox/>)\r\n}\r\n\r\n\r\n","import Menu from '@mui/material/Menu';\r\nimport MenuItem from '@mui/material/MenuItem';\r\nimport * as React from 'react';\r\nimport {LanguageUtilities} from '../../services/language-utilities';\r\nimport {SketchDriveOrderEditActionEnum} from '../../models/SketchDriveOrderEditActionEnum';\r\nimport {Icons} from '../Icons/icons';\r\n\r\n\r\ninterface PendingOrderMenuProps {\r\n    PendingOrderMenuAnchor: Element | ((element: Element) => Element) | null | undefined;\r\n    PendingOrderMenuId: string,\r\n    isPendingOrderMenuOpen: boolean,\r\n    handlePendingOrderMenuClick: (event: React.MouseEvent<HTMLElement>, action: SketchDriveOrderEditActionEnum) => void\r\n    handlePendingOrderMenuClose: () => void\r\n}\r\n\r\nexport const PendingOrderMenu = (props: PendingOrderMenuProps) => {\r\n    const {\r\n        PendingOrderMenuAnchor,\r\n        PendingOrderMenuId,\r\n        isPendingOrderMenuOpen,\r\n        handlePendingOrderMenuClick,\r\n        handlePendingOrderMenuClose\r\n    } = props;\r\n\r\n    let pendingOrdersActions: { action: SketchDriveOrderEditActionEnum, name: string, icon: string } [] = LanguageUtilities.buildSketchEditActionsArray();\r\n\r\n    return (\r\n        <Menu\r\n            anchorEl={PendingOrderMenuAnchor}\r\n            anchorOrigin={{\r\n                vertical: 'top',\r\n                horizontal: 'right',\r\n            }}\r\n            id={PendingOrderMenuId}\r\n            keepMounted\r\n            transformOrigin={{\r\n                vertical: 'top',\r\n                horizontal: 'right',\r\n            }}\r\n            open={isPendingOrderMenuOpen}\r\n            onClose={handlePendingOrderMenuClose}\r\n        >\r\n            {pendingOrdersActions.map((item, i: number) => <MenuItem key={i} onClick={(e) => handlePendingOrderMenuClick(e, item.action)}>\r\n                {Icons[item.icon] as React.ReactElement} &nbsp;\r\n                {item.name}\r\n            </MenuItem>)}\r\n\r\n\r\n        </Menu>\r\n    );\r\n\r\n\r\n}\r\n","import {SxProps} from '@mui/system';\r\nimport React from 'react';\r\nimport {Box, Button} from '@mui/material';\r\nimport {SketchDriveOrderEditActionEnum} from '../../models/SketchDriveOrderEditActionEnum';\r\n\r\n\r\nexport interface OrderActionButtonProps {\r\n    sx?: SxProps,\r\n    actionClickHandler: any,\r\n    actionType: SketchDriveOrderEditActionEnum,\r\n    text: string,\r\n    size?: 'medium' | 'small'\r\n\r\n}\r\n\r\nexport const OrderActionButton = (props: OrderActionButtonProps) => {\r\n    const size = props.size ? props.size : 'medium'\r\n    const sx = props.sx || {}\r\n    return (\r\n\r\n        <Box>\r\n            <Button sx={sx} id={'action-order-button'} variant=\"contained\" onClick={props.actionClickHandler} aria-label=\"add\" size={size}>\r\n                {props.text}\r\n            </Button>\r\n\r\n        </Box>\r\n\r\n\r\n    )\r\n\r\n}\r\n","import React from 'react'\r\nimport {Box} from '@mui/system';\r\nimport {useDispatch} from 'react-redux';\r\nimport {Button, Typography} from '@mui/material';\r\nimport {LanguageUtilities} from '../../services/language-utilities';\r\nimport {OrderModel} from '../../models/Order.model';\r\nimport {ActionsTypes} from '../../store/types.actions';\r\nimport {PendingOrderMenu} from './pending-order-menu';\r\nimport MoreIcon from '@mui/icons-material/MoreVert';\r\nimport {OrderActionButton} from '../buttons/order-action-button';\r\nimport {translations} from '../../services/translations';\r\nimport {SketchDriveOrderEditActionEnum} from '../../models/SketchDriveOrderEditActionEnum';\r\n\r\n\r\ninterface sketchPendingOrderProps {\r\n    order: OrderModel,\r\n    isInEdit: boolean\r\n}\r\n\r\nconst pendingOrderMenuId = 'sketch-pending-menu-button';\r\n\r\nexport const SketchPendingOrderFull = (props: sketchPendingOrderProps) => {\r\n    const dispatch = useDispatch();\r\n    const [pendingOrderAnchorEl, setPendingOrderAnchorEl] =\r\n        React.useState<null | HTMLElement>(null);\r\n    const handlePendingOrderMenuClick = (event: React.MouseEvent<HTMLElement>, clickAction: SketchDriveOrderEditActionEnum) => {\r\n        const orderId = props.order.id\r\n        switch (clickAction) {\r\n            case SketchDriveOrderEditActionEnum.AddToVehicle:\r\n                dispatch({\r\n                    type: ActionsTypes.CLICKED_ADD_TO_VEHICLE_PENDING_ORDER,\r\n                    payload: {id: orderId}\r\n                })\r\n                break;\r\n\r\n            case SketchDriveOrderEditActionEnum.MoveToTop:\r\n                dispatch({\r\n                    type: ActionsTypes.CLICKED_MOVE_TO_TOP_PENDING_ORDER,\r\n                    payload: {id: orderId}\r\n                })\r\n                break;\r\n            case SketchDriveOrderEditActionEnum.MoveToBottom:\r\n                dispatch({\r\n                    type: ActionsTypes.CLICKED_MOVE_TO_BOTTOM_PENDING_ORDER,\r\n                    payload: {id: orderId}\r\n                })\r\n                break;\r\n            case SketchDriveOrderEditActionEnum.RemoveFromPending:\r\n                dispatch({\r\n                    type: ActionsTypes.CLICKED_REMOVE_PENDING_ORDER,\r\n                    payload: {id: orderId}\r\n                })\r\n                break;\r\n            case SketchDriveOrderEditActionEnum.Split:\r\n                dispatch({\r\n                    type: ActionsTypes.CLICKED_SPLIT_PENDING_ORDER,\r\n                    payload: {id: orderId}\r\n                })\r\n                break;\r\n            case SketchDriveOrderEditActionEnum.Merge:\r\n                dispatch({\r\n                    type: ActionsTypes.CLICKED_MERGE_PENDING_ORDER,\r\n                    payload: {id: orderId}\r\n                })\r\n                break;\r\n            case SketchDriveOrderEditActionEnum.ReplaceExisting:\r\n                dispatch({\r\n                    type: ActionsTypes.CLICKED_REPLACE_EXISTING_PENDING_ORDER,\r\n                    payload: {id: orderId}\r\n                })\r\n                break;\r\n            case SketchDriveOrderEditActionEnum.publicTransport:\r\n                dispatch({\r\n                    type: ActionsTypes.CLICKED_PUBLIC_TRANSPORT_PENDING_ORDER,\r\n                    payload: {id: orderId}\r\n                })\r\n                break;\r\n\r\n\r\n            default:\r\n        }\r\n        handleSidurMenuClose()\r\n    };\r\n    const handleSidurMenuClose = () => {\r\n        setPendingOrderAnchorEl(null);\r\n    };\r\n    const handlePendingOrderMenuOpen = (event: React.MouseEvent<HTMLElement>) => {\r\n        setPendingOrderAnchorEl(event.currentTarget);\r\n    };\r\n    const actionClickHandler = () => {\r\n\r\n    }\r\n    const handlePendingOrderClose = () => {\r\n        dispatch({\r\n            type: ActionsTypes.CLICKED_CLOSE_PENDING_ORDER,\r\n            payload: {\r\n                id: props.order.id\r\n            }\r\n        })\r\n    }\r\n    let pendingOrdersActions: any;\r\n    pendingOrdersActions = [];\r\n    const order = props.order;\r\n    const isSidurMenuOpen = Boolean(pendingOrderAnchorEl);\r\n\r\n    return ((<Box id={'pending-order'}>\r\n            <Box id={'pending-order-data'} sx={{\r\n                display: 'flex',\r\n                flexDirection: 'row',\r\n                flexWrap: 'wrap',\r\n                alignItems: 'start',\r\n                justifyContent: 'start',\r\n                p: '0.2em',\r\n                pl: '0.4em',\r\n                pr: '0.4em',\r\n                flexGrow: 4,\r\n\r\n            }}>\r\n\r\n                <Typography\r\n                    variant={'subtitle1'}>{order.Comments + ', ' + LanguageUtilities.renderPassengerText(order.passengers)}  </Typography>\r\n\r\n            </Box>\r\n\r\n            <Box id={'pending-order-actions'} sx={{\r\n                display: 'flex',\r\n                flexDirection: 'row',\r\n                flexWrap: 'wrap',\r\n                alignItems: 'start',\r\n                justifyContent: 'start',\r\n                p: '0.2em',\r\n                pl: '0.4em',\r\n                pr: '0.4em',\r\n                flexGrow: 4,\r\n\r\n            }}>\r\n\r\n\r\n                {[...pendingOrdersActions].map((n, i: number) => (\r\n                    <Box key={i} sx={{p: '0.5em'}}> <OrderActionButton key={n.action.toString()} text={n.name} actionType={n.action}\r\n                                                                       actionClickHandler={actionClickHandler}/>\r\n                    </Box>))}\r\n                <Box sx={{p: '0.5em'}}>\r\n                    <Button\r\n                        size=\"medium\"\r\n                        aria-label=\"show more\"\r\n                        aria-controls={pendingOrderMenuId}\r\n                        aria-haspopup=\"true\"\r\n                        onClick={(event) => handlePendingOrderMenuClick(event, SketchDriveOrderEditActionEnum.RemoveFromPending)}\r\n                        variant={'contained'}\r\n                    > {translations.SketchActionRemove}\r\n                    </Button>\r\n                </Box>\r\n                <Box sx={{p: '0.5em'}}>\r\n                    <Button sx={{\r\n                        pl: '5px',\r\n                        pr: '5px'\r\n                    }}\r\n                            size=\"medium\"\r\n                            aria-label=\"show more\"\r\n                            aria-controls={pendingOrderMenuId}\r\n                            aria-haspopup=\"true\"\r\n                            onClick={handlePendingOrderMenuOpen}\r\n                            variant={'contained'}\r\n                    >&nbsp; {translations.moerActions}\r\n                        <MoreIcon sx={{\r\n                            pl: 0,\r\n                            pr: 0,\r\n                            mr: 0,\r\n                            ml: 0\r\n                        }}/>\r\n                    </Button>\r\n                </Box>\r\n                <Box sx={{p: '0.5em'}}>\r\n                    <Button\r\n                        size=\"medium\"\r\n                        aria-label=\"show more\"\r\n                        aria-controls={pendingOrderMenuId}\r\n                        aria-haspopup=\"true\"\r\n                        onClick={handlePendingOrderClose}\r\n                        variant={'contained'}\r\n                    > {translations.close}\r\n                    </Button>\r\n                </Box>\r\n\r\n\r\n            </Box>\r\n            <PendingOrderMenu PendingOrderMenuAnchor={pendingOrderAnchorEl} PendingOrderMenuId={pendingOrderMenuId}\r\n                              isPendingOrderMenuOpen={isSidurMenuOpen}\r\n                              handlePendingOrderMenuClick={handlePendingOrderMenuClick} handlePendingOrderMenuClose={handleSidurMenuClose}/>\r\n        </Box>)\r\n\r\n    )\r\n\r\n}\r\n","import React, {useState} from 'react'\r\nimport {useDispatch} from 'react-redux';\r\nimport {OrderModel} from '../../models/Order.model';\r\nimport {SketchPendingOrderBrief} from './SketchPendingOrderBrief';\r\nimport {ActionsTypes} from '../../store/types.actions';\r\nimport {Box, Card, Collapse} from '@mui/material';\r\nimport {SketchPendingOrderFull} from './SketchPendingOrderFull';\r\n\r\n\r\ninterface sketchPendingOrderProps {\r\n    order: OrderModel,\r\n    isInEdit: boolean\r\n}\r\n\r\nexport const SketchPendingOrder = (props: sketchPendingOrderProps) => {\r\n\r\n    const [inHover, setInHover] = useState(false);\r\n    const onMouseOver = () => {\r\n        setInHover(!props.isInEdit)\r\n    };\r\n    const onMouseOut = () => {\r\n        setInHover(false)\r\n    };\r\n    const dispatch = useDispatch();\r\n    const cardClickHandler = (_event: MouseEvent) => {\r\n        dispatch({\r\n            type: ActionsTypes.CLICKED_PENDING_ORDER,\r\n            payload: {\r\n                id: props.order.id\r\n            }\r\n        })\r\n    }\r\n\r\n\r\n    const order = props.order;\r\n    return (<>\r\n            <Box sx={{display: 'flex'}}>\r\n                <Card onMouseOver={onMouseOver}\r\n                      onMouseOut={onMouseOut} elevation={inHover ? 7 : 2} sx={{\r\n                    m: '0.2em',\r\n                    mb: '0.3em',\r\n                    minHeight: '10vh',\r\n                    minWidth: '30vw',\r\n                    maxWidth: '50vw',\r\n                    cursor: 'pointer',\r\n                    display: 'flex',\r\n                    flexDirection: 'row',\r\n                    alignItems: 'stretch',\r\n                    justifyContent: 'start',\r\n                }}\r\n                      onClick={(event: any) => !props.isInEdit ? cardClickHandler(event) : null}>\r\n                    <Box sx={{\r\n                        display: 'flex',\r\n                        flexDirection: 'column',\r\n                        alignItems: 'start',\r\n                        justifyContent: 'start'\r\n                    }}>\r\n                        <div tabIndex={0}>\r\n                            <Box sx={{\r\n\r\n                                display: 'flex',\r\n                                flexDirection: 'row',\r\n                                justifyContent: 'space-between',\r\n                                mr: '0.6em',\r\n                                ml: '0.6em',\r\n                                mt: '0'\r\n                            }}>\r\n                                <SketchPendingOrderBrief isInEdit={props.isInEdit} order={props.order}/>\r\n\r\n\r\n                            </Box>\r\n                        </div>\r\n\r\n\r\n                        <Collapse in={props.isInEdit} unmountOnExit>\r\n\r\n                            <SketchPendingOrderFull isInEdit={props.isInEdit} order={order}/>\r\n\r\n                        </Collapse>\r\n                    </Box>\r\n\r\n                </Card>\r\n\r\n\r\n            </Box>\r\n            <Box sx={{}}/>  </>\r\n\r\n\r\n    )\r\n\r\n}\r\n","import React from 'react'\r\nimport {Box} from '@mui/system';\r\nimport {useSelector} from 'react-redux';\r\nimport {Typography} from '@mui/material';\r\nimport {OrderModel} from '../../models/Order.model';\r\nimport {translations} from '../../services/translations';\r\nimport {SketchPendingOrder} from './SketchPendingOrder';\r\nimport {SidurStore} from '../../store/store.types';\r\n\r\n\r\ninterface sketchPendingOrdersProps {\r\n    pendingOrders: OrderModel[],\r\n}\r\n\r\n\r\nexport const SketchPendingOrders = (props: sketchPendingOrdersProps) => {\r\n\r\n    const pendingOrderInEdit = useSelector((state: SidurStore) => state.sessionState.pendingOrderIdInEdit);\r\n\r\n    return (<Box id={'pending-order-container'} sx={{\r\n            m: '0.2em',\r\n            mb: '0.3em',\r\n            minHeight: '10vh',\r\n            minWidth: '30vw',\r\n            display: 'flex',\r\n            flexDirection: 'column',\r\n            alignItems: 'stretch',\r\n            justifyContent: 'start',\r\n        }}>\r\n            <Typography variant={'h6'}> {translations.PendingOrders} </Typography>\r\n\r\n            {(props.pendingOrders || []).map((order: OrderModel) => {\r\n                return <SketchPendingOrder isInEdit={pendingOrderInEdit === order.id} key={order.id} order={order}/>\r\n            })}\r\n        </Box>\r\n\r\n    )\r\n\r\n}\r\n","import * as React from 'react';\r\nimport Slider, {SliderThumb} from '@mui/material/Slider';\r\nimport {styled} from '@mui/material/styles';\r\nimport {Box} from '@mui/material';\r\n\r\n\r\nexport const AirbnbSlider = styled(Slider)(({theme}) => ({\r\n    // color: '#3a8589',\r\n    // //  height: 3,\r\n    // padding: '13px 0',\r\n    '& .MuiSlider-thumb': {\r\n        borderRadius: '5px',\r\n        width: '80px',\r\n        height: '2em',\r\n        // after: {\r\n        //     content: '',\r\n        //     backgroundColor: '#fff',\r\n        //     width: '80px',\r\n        //     height: '0.5em',\r\n        // }\r\n    },\r\n    '& .MuiSlider-thumb-origin': {\r\n        height: 27,\r\n        width: 27,\r\n        backgroundColor: '#fff',\r\n        border: '1px solid currentColor',\r\n        '&:hover': {\r\n            boxShadow: '0 0 0 8px rgba(58, 133, 137, 0.16)',\r\n        },\r\n        '& .airbnb-bar': {\r\n            height: 9,\r\n            width: 1,\r\n            backgroundColor: 'currentColor',\r\n            marginLeft: 1,\r\n            marginRight: 1,\r\n        },\r\n    },\r\n    '& .MuiSlider-valueLabel': {\r\n        fontSize: theme.typography.fontSize + 4,\r\n        fontWeight: 'bold',\r\n        position: 'absolute',\r\n        //bottom: '-10px',\r\n        top: '32px',\r\n        backgroundColor: 'unset',\r\n        color: theme.palette.text.primary,\r\n        '&:before': {\r\n            display: 'none',\r\n        },\r\n        '& *': {\r\n            background: 'transparent',\r\n            //  backgroundColor: theme.palette.text.primary,\r\n            color: '#ffffff'\r\n            // color: theme.palette.mode === 'dark' ? '#fff' : '#000',\r\n        },\r\n    },\r\n    '& .MuiSlider-track': {\r\n        height: 3,\r\n        width: 8\r\n    },\r\n    '& .MuiSlider-rail': {\r\n        // color: theme.palette.mode === 'dark' ? '#bfbfbf' : '#d8d8d8',\r\n        //  opacity: theme.palette.mode === 'dark' ? undefined : 1,\r\n        width: 5\r\n        //height: 3,\r\n    },\r\n}));\r\n\r\nexport interface AirbnbThumbComponentProps extends React.HTMLAttributes<unknown> {\r\n}\r\n\r\nexport const AirbnbThumbComponent = (props: AirbnbThumbComponentProps, _data: any): any => {\r\n    const {\r\n        children,\r\n        ...other\r\n    } = props;\r\n\r\n    return (\r\n        <Box key={Math.random().toString()}> <SliderThumb {...other}    >   {children}\r\n\r\n        </SliderThumb>\r\n        </Box>\r\n    );\r\n}\r\n","import React from 'react';\r\nimport {Box, Theme} from '@mui/material';\r\nimport {Utils} from '../../services/utils';\r\nimport {AirbnbSlider, AirbnbThumbComponent} from './air-bnb-slider';\r\n\r\n\r\nconst sliderSx = {\r\n\r\n    direction: (theme: Theme) => theme.direction,\r\n\r\n    '& .MuiSlider-thumb': {\r\n        marginRight: -2,\r\n        marginLeft: 0\r\n    }\r\n}\r\n\r\ninterface VerticalHourFieldProps {\r\n    input: [string, string],\r\n    label: string,\r\n    onHoursChange: (event: Event, newHours: any) => void\r\n}\r\n\r\nconst formatHourLabel = (hourInNumber: number) =>\r\n    Utils.DecimalTimeToHourText(hourInNumber)\r\nexport const VerticalHourField = (\r\n    props: VerticalHourFieldProps\r\n) => {\r\n\r\n    const InitialInputAsNumbers: [number, number] = props.input.map(i => Utils.hourTextToDecimal(i)) as [number, number]\r\n\r\n\r\n    const handleSliderChange = (event: Event, newValue: any) => {\r\n        setValue(newValue);\r\n        const positiveNewValue: [number, number] = [(newValue[1] * -1), (newValue[0] * -1)]\r\n        props.onHoursChange(event, positiveNewValue)\r\n    };\r\n    const negativeInitialInput: [number, number] = InitialInputAsNumbers.map(n => n * -1) as [number, number]\r\n    const [value, setValue] = React.useState<number | [number, number]>(\r\n        negativeInitialInput,\r\n    );\r\n    const DriveDuration = InitialInputAsNumbers[1] - InitialInputAsNumbers[0];\r\n    const timeMargins = DriveDuration > 2 ? 2 : 1;\r\n    const maxSlider = -1 * (InitialInputAsNumbers[0] - timeMargins);\r\n    const minSlider = -1 * (InitialInputAsNumbers[1] + timeMargins);\r\n\r\n    return (\r\n        <Box>\r\n            <Box sx={{\r\n                display: 'flex',\r\n                flexDirection: 'column',\r\n                alignItems: 'center',\r\n                justifyContent: 'center',\r\n                height: '250px'\r\n            }}>\r\n\r\n\r\n                <AirbnbSlider\r\n                    components={{Thumb: AirbnbThumbComponent}}\r\n                    orientation=\"vertical\"\r\n                    aria-labelledby=\"input-slider\"\r\n                    valueLabelDisplay=\"on\"\r\n                    valueLabelFormat={formatHourLabel}\r\n                    // variant={'standard'}\r\n                    sx={sliderSx}\r\n                    disableSwap\r\n                    min={minSlider}\r\n                    max={maxSlider}\r\n                    scale={x => -x}\r\n\r\n                    step={0.0833333333333}\r\n                    value={value}\r\n                    onChange={handleSliderChange}\r\n\r\n                />\r\n            </Box> </Box>\r\n    );\r\n}\r\n","import {LocationModel} from '../models/Location.model';\r\nimport {translations} from './translations';\r\n\r\n\r\nexport const ConfigService = {\r\n    Constants: {\r\n        RoutesMinutesOptions: [5, 10, 15, 20, 30, 45, 60, 90, 120],\r\n        HomeLocationId: 'HOME_LOCATION',\r\n        get HomeLocation(): LocationModel {\r\n            const id = this.HomeLocationId;\r\n            return {\r\n                ETA: 0,\r\n                EnName: 'HOME_LOCATION',\r\n                id: id,\r\n                name: translations.Home\r\n            }\r\n        }\r\n    },\r\n    MinimumMinuetGapFormNotifications: 30\r\n}\r\n","import {DriveModel, SketchModel} from '../models/Sketch.model';\r\nimport {Utils} from '../services/utils';\r\nimport {OrderModel} from '../models/Order.model';\r\nimport {LocationModel} from '../models/Location.model';\r\nimport {LanguageUtilities} from '../services/language-utilities';\r\nimport {CloneUtil} from '../services/clone-utility';\r\nimport {ConfigService} from '../services/config-service';\r\nimport {translations} from '../services/translations';\r\nimport {DriveType} from '../models/DriveType.enum';\r\n\r\nexport const SidurEditorService = {\r\n    getRelevantDriveIdsToChoose(sketch: SketchModel, pendingOrderId: string): string [] {\r\n        const pendingOrder = sketch.unassignedOrders.find(o => o.id === pendingOrderId);\r\n        if (!pendingOrder) {\r\n            return []\r\n        }\r\n        const originOrd = {\r\n            start: Utils.hourTextToDecimal(pendingOrder.startHour),\r\n            finish: Utils.hourTextToDecimal(pendingOrder.finishHour)\r\n\r\n        }\r\n\r\n        const allDrives: DriveModel[] = this.getAllDrivesFromSketch(sketch)\r\n\r\n        const allRelevantDrives = allDrives.filter((d: DriveModel) => {\r\n            const drv = {\r\n                start: Utils.hourTextToDecimal(d.startHour),\r\n                finish: Utils.hourTextToDecimal(d.finishHour),\r\n            }\r\n            return this.shouldIMergeDrives(originOrd, drv)\r\n        })\r\n\r\n        return allRelevantDrives.map(d => d.id)\r\n    },\r\n    getOnlyOneRelevantDriveIdsToChoose(sketch: SketchModel, pendingOrderId: string): string [] {\r\n        const pendingOrder = sketch.unassignedOrders.find(o => o.id === pendingOrderId);\r\n        if (!pendingOrder) {\r\n            return []\r\n        }\r\n        const originOrd = {\r\n            start: Utils.hourTextToDecimal(pendingOrder.startHour),\r\n            finish: Utils.hourTextToDecimal(pendingOrder.finishHour)\r\n\r\n        }\r\n\r\n\r\n        const allRelevantDrives: DriveModel[] = [];\r\n        sketch.vehicleSchedules.forEach(v => {\r\n            let currentVehicleClosestDrive: string | null = null;\r\n            v.drives.forEach(d => {\r\n                if (currentVehicleClosestDrive) {\r\n                    currentVehicleClosestDrive = null\r\n                }\r\n\r\n            })\r\n        })\r\n\r\n        return allRelevantDrives.map(d => d.id)\r\n    },\r\n    getAllDrivesFromSketch(sketch: SketchModel): DriveModel[] {\r\n        const allDrives: DriveModel[] = []\r\n\r\n        sketch.vehicleSchedules.forEach(v => {\r\n            const drives = v.drives.map(d => ({...d}))\r\n            allDrives.push(...drives)\r\n        })\r\n        return allDrives\r\n    },\r\n    shouldIMergeDrives(origin: { start: number, finish: number }, destination: { start: number, finish: number }): boolean {\r\n        const hours = (s: number, f: number): number[] => {\r\n            const arr = [];\r\n            for (let i: number = Math.floor(s) - 1; i < (f); i++) {\r\n                arr.push(i)\r\n            }\r\n            return arr\r\n        }\r\n        const org: number [] = hours(origin.start, origin.finish)\r\n        const dest: number [] = hours(destination.start, destination.finish)\r\n        return org.some(n => dest.includes(n))\r\n    },\r\n\r\n    SuggestMergedDrive(drive: DriveModel, orderToMerge: OrderModel, locations: LocationModel[]): { suggestedDrive: DriveModel, issues: string[] } {\r\n        const h2n = (h: string): number => {\r\n            return Utils.hourTextToDecimal(h)\r\n        }\r\n        const issues: string[] = [];\r\n        const newDrive = CloneUtil.deepCloneDrive(drive);\r\n        const orderToMergeBrief = LanguageUtilities.buildBriefText(orderToMerge, locations).driverAndLocation;\r\n        newDrive.description = newDrive.description + ', ' + orderToMergeBrief;\r\n        const driveStart: number = h2n(newDrive.startHour);\r\n        const driveFinish: number = h2n(newDrive.finishHour);\r\n        const orderStart: number = h2n(orderToMerge.startHour);\r\n        const orderFinish: number = h2n(orderToMerge.finishHour);\r\n\r\n        const startGapInMinutes = Utils.HourDecimalToMinutes(Math.abs((driveStart - orderStart)));\r\n        const finishGapInMinutes = Utils.HourDecimalToMinutes(Math.abs((driveFinish - orderFinish)));\r\n\r\n        if (startGapInMinutes > ConfigService.MinimumMinuetGapFormNotifications) {\r\n            let message = translations.gapForMergeDrives1 + ' ' + startGapInMinutes.toString() + ' ' + translations.gapForMergeDrives3StartTimes\r\n            issues.push(message)\r\n        }\r\n        if (finishGapInMinutes > ConfigService.MinimumMinuetGapFormNotifications) {\r\n            let message = translations.gapForMergeDrives1 + ' ' + finishGapInMinutes.toString() + ' ' + translations.gapForMergeDrives3FinishTimes\r\n            issues.push(message)\r\n        }\r\n\r\n        const newDriveStartHour = Math.min(driveStart, orderStart)\r\n        const newDriveFinishHour = Math.max(driveFinish, orderFinish);\r\n        newDrive.startHour = Utils.DecimalTimeToHourText(newDriveStartHour)\r\n        newDrive.finishHour = Utils.DecimalTimeToHourText(newDriveFinishHour);\r\n\r\n        return {\r\n            suggestedDrive: newDrive,\r\n            issues: issues\r\n        }\r\n    },\r\n    getDriveDurationInHours(ride: DriveModel | OrderModel): number {\r\n        const start = Utils.hourTextToDecimal(ride.startHour)\r\n        const finish = Utils.hourTextToDecimal(ride.finishHour)\r\n        return Math.abs(finish - start)\r\n    },\r\n    splitTsamudOrder(order: OrderModel, locations: LocationModel[]): [OrderModel, OrderModel] {\r\n        const location = locations.find((l: LocationModel) => l.id === order.location)\r\n        const eta = location?.ETA || 30;\r\n        const orderTo = CloneUtil.deepCloneOrder(order);\r\n        const orderFrom = CloneUtil.deepCloneOrder(order);\r\n\r\n        orderTo.finishHour = Utils.DecimalTimeToHourText(Utils.hourTextToDecimal(orderTo.startHour) + Math.floor(((eta + 5) * 2) / 60));\r\n        orderTo.TypeOfDrive = DriveType.OneWayTo;\r\n        orderTo.Comments = translations.beforeSplit + ': ' + orderTo.Comments\r\n\r\n\r\n        orderFrom.startHour = Utils.DecimalTimeToHourText(Utils.hourTextToDecimal(orderFrom.finishHour) - Math.floor(((eta + 5) * 2) / 60));\r\n        orderFrom.TypeOfDrive = DriveType.OneWayFrom;\r\n        orderTo.Comments = translations.beforeSplit + ': ' + orderFrom.Comments\r\n        return [orderTo, orderFrom]\r\n    }\r\n}\r\n","import * as React from 'react';\r\nimport {useRef, useState} from 'react';\r\nimport Button from '@mui/material/Button';\r\nimport TextField from '@mui/material/TextField';\r\nimport Dialog from '@mui/material/Dialog';\r\nimport DialogActions from '@mui/material/DialogActions';\r\nimport DialogContent from '@mui/material/DialogContent';\r\nimport DialogTitle from '@mui/material/DialogTitle';\r\nimport {translations} from '../../services/translations';\r\nimport {Box, Card, Typography} from '@mui/material';\r\nimport {SxProps} from '@mui/system';\r\nimport {Delete} from '@mui/icons-material';\r\nimport {DriveModel, SketchModel} from '../../models/Sketch.model';\r\nimport {VerticalHourField} from '../buttons/vertical-hour-field';\r\nimport {OrderModel} from '../../models/Order.model';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {Utils} from '../../services/utils';\r\nimport {OrderActionButton} from '../buttons/order-action-button';\r\nimport {SketchDriveOrderEditActionEnum} from '../../models/SketchDriveOrderEditActionEnum';\r\nimport {ActionsTypes} from '../../store/types.actions';\r\nimport {SidurStore} from '../../store/store.types';\r\nimport {SidurEditorService} from '../../sidurEditor/sidurEditor.service';\r\nimport {DriveType} from '../../models/DriveType.enum';\r\n\r\ninterface SketchDriveEditDialogProps {\r\n    open: boolean;\r\n    sketchDriveData: { drive: DriveModel, vehicleId: string };\r\n    vehicleId: string;\r\n    onDelete: (sketchDriveData: { drive: DriveModel, vehicleId: string }) => void;\r\n    onClose: (vehicleUpdate: DriveModel | null) => void;\r\n}\r\n\r\nexport const SketchDriveEditDialog = (props: SketchDriveEditDialogProps) => {\r\n    const {\r\n        onClose,\r\n        onDelete,\r\n        open,\r\n        sketchDriveData\r\n    } = props;\r\n\r\n    const driveData = sketchDriveData.drive\r\n    const dispatch = useDispatch();\r\n    const SketchIdInEdit = useSelector((state: SidurStore) => state.sessionState.SketchIdInEdit);\r\n    const sketches: SketchModel[] = useSelector((state: { sketches: SketchModel[] }) => state.sketches);\r\n    const sketchInEdit: SketchModel | null = sketches.find((sketch: SketchModel) => sketch.id === SketchIdInEdit) || null;\r\n\r\n    const sketchOrders = sketchInEdit?.assignedOrders || [];\r\n    const [driveChangedData, setDriveChangedData] = useState<DriveModel>({...driveData});\r\n\r\n\r\n    const descriptionValueRef: any = useRef('')\r\n    const filedWrapper: SxProps = {\r\n        width: '230px'\r\n    }\r\n    const handleCloseCancel = () => {\r\n        onClose(null);\r\n    };\r\n\r\n    const handleCloseEdit = (): void => {\r\n        const editedData: DriveModel | null = {...driveChangedData};\r\n        if (descriptionValueRef?.current?.value) {\r\n            editedData.description = descriptionValueRef?.current?.value\r\n        }\r\n        if (SidurEditorService.getDriveDurationInHours(editedData) > 1.2) {\r\n            editedData.TypeOfDrive = DriveType.Tsamud\r\n        }\r\n        onClose(editedData);\r\n\r\n    };\r\n    const handleCloseDelete = (): void => {\r\n        const sketchDriveDataForDelete = {...sketchDriveData}\r\n\r\n        onDelete(sketchDriveDataForDelete);\r\n    };\r\n    const addToPendingClickHandler = (event: Event, orderId: string) => {\r\n\r\n        dispatch({\r\n            type: ActionsTypes.REMOVE_ORDER_FROM_SKETCH_DRIVE,\r\n            payload: {\r\n                orderId,\r\n                sketchDriveId: driveData.id\r\n            }\r\n        })\r\n        const newDrive = {...driveChangedData};\r\n        newDrive.implementsOrders = newDrive.implementsOrders.filter(o => o !== orderId);\r\n        setDriveChangedData(newDrive)\r\n    }\r\n    const handleHourChange =\r\n        (event: Event, input: any) => {\r\n\r\n\r\n            const newSketchData = {...driveChangedData};\r\n            newSketchData.startHour = Utils.DecimalTimeToHourText(input[0]);\r\n            newSketchData.finishHour = Utils.DecimalTimeToHourText(input[1]);\r\n            setDriveChangedData(newSketchData);\r\n\r\n\r\n        }\r\n    const implementedOrders = sketchOrders.filter((o: OrderModel) => driveChangedData.implementsOrders.includes(o.id))\r\n\r\n    return (\r\n\r\n\r\n        <Dialog open={open} onClose={handleCloseCancel}>\r\n            <DialogTitle> {translations.EditDrive}</DialogTitle>\r\n            <DialogContent>\r\n                <Box sx={{\r\n                    ...filedWrapper,\r\n                    display: 'flex',\r\n                    flexDirection: 'row',\r\n                    minWidth: '35vw'\r\n                }}>\r\n\r\n\r\n                    <Box sx={{\r\n                        ...filedWrapper,\r\n                        display: 'flex',\r\n                        flexDirection: 'column',\r\n                        maxWidth: '160px',\r\n                        p: '0 0.2em',\r\n\r\n                    }}>\r\n                        <Typography align={'center'}\r\n                                    component=\"legend\"><b>{translations.DriveTimes}</b>\r\n                        </Typography>\r\n\r\n                        <VerticalHourField input={[driveData.startHour, driveData.finishHour]}\r\n                                           onHoursChange={handleHourChange}\r\n                                           label={translations.Start}/>\r\n\r\n                    </Box>\r\n                    <Box sx={{\r\n                        ...filedWrapper,\r\n                        display: 'flex',\r\n                        flexDirection: 'column'\r\n                    }}>\r\n                        <Typography align={'center'}\r\n                                    component=\"legend\"><b>{translations.DriveDescription}</b>\r\n                        </Typography>\r\n\r\n                        <Box sx={{...filedWrapper}}>\r\n                            <TextField\r\n                                size={'medium'}\r\n                                //sx={{minHeight: '200px'}}\r\n                                margin=\"dense\"\r\n                                id=\"vehicle-comments-dialog-text-field\"\r\n                                //  label={translations.Comments}\r\n                                type=\"text\"\r\n                                fullWidth\r\n                                multiline={true}\r\n                                variant=\"standard\"\r\n                                defaultValue={(driveData?.description || '').replace('  ', ' ')}\r\n                                inputRef={descriptionValueRef}\r\n                                onKeyUp={(event) => {\r\n                                    if (event.key === 'Enter') {\r\n                                        handleCloseEdit()\r\n                                    }\r\n                                }}\r\n                            />\r\n                        </Box>\r\n                        <Typography align={'center'} sx={{mt: '1em'}}\r\n                                    component=\"legend\"><b> {implementedOrders.length === 0 ? (translations.none + ' ') : null} {\r\n                            translations\r\n                                .connectedOrders\r\n                        }</b>\r\n                        </Typography>\r\n                        <Box id={'connected-orders'}>\r\n                            {implementedOrders.map((order: OrderModel, i: number) => (\r\n                                <Card key={i} sx={{\r\n                                    display: 'flex',\r\n                                    flexDirection: 'column',\r\n                                    p: '1em'\r\n                                }}>\r\n                                    <Box sx={{pb: '0.5em'}}>\r\n                                        {order.Comments}\r\n                                    </Box>\r\n\r\n                                    <OrderActionButton sx={{width: '100%'}} size={'small'}\r\n                                                       actionType={SketchDriveOrderEditActionEnum.AddToPending}\r\n                                                       text={'      ' + translations.SketchActionAddToPending}\r\n                                                       actionClickHandler={(event: any) => addToPendingClickHandler(event, order.id)}/>\r\n\r\n                                </Card>))}\r\n                        </Box>\r\n\r\n\r\n                        <Box sx={{\r\n\r\n                            flexDirection: 'row',\r\n                            alignItems: 'center',\r\n                            justifyContent: 'center',\r\n                            marginTop: '1em',\r\n                            display: 'flex'\r\n                        }}>\r\n\r\n                        </Box>\r\n                    </Box>\r\n                </Box>\r\n            </DialogContent>\r\n            <DialogActions>\r\n                <Button onClick={handleCloseDelete} aria-label=\"add\" size=\"large\">\r\n                    <Delete/> {translations.Delete}\r\n                </Button>\r\n                <Button id={'vehicle-edit-cancel-button'} onClick={handleCloseCancel}>{translations.Cancel}</Button>\r\n                <Button id={'vehicle-edit-approve-button'} onClick={handleCloseEdit}>{translations.Approve}</Button>\r\n            </DialogActions>\r\n        </Dialog>\r\n\r\n    );\r\n}\r\n","import * as React from 'react';\r\nimport {translations} from '../../services/translations';\r\nimport {Box, Card, CardContent} from '@mui/material';\r\n\r\n\r\nexport const SketchNoSketchMessage = () => {\r\n\r\n    return (\r\n        <Box>\r\n            <Card sx={{\r\n                width: '300px',\r\n                height: '150px',\r\n                m: '3em'\r\n            }}>\r\n                <CardContent>\r\n                    {translations.NoSketchMessage}\r\n                </CardContent>\r\n            </Card>\r\n\r\n        </Box>\r\n    );\r\n\r\n\r\n}\r\n","import * as React from 'react';\r\nimport {useRef, useState} from 'react';\r\nimport Button from '@mui/material/Button';\r\nimport TextField from '@mui/material/TextField';\r\nimport Dialog from '@mui/material/Dialog';\r\nimport DialogActions from '@mui/material/DialogActions';\r\nimport DialogContent from '@mui/material/DialogContent';\r\nimport DialogTitle from '@mui/material/DialogTitle';\r\nimport {translations} from '../../services/translations';\r\nimport {Box, Typography} from '@mui/material';\r\nimport {SxProps} from '@mui/system';\r\nimport {MergeType} from '@mui/icons-material';\r\nimport {DriveModel, SketchModel} from '../../models/Sketch.model';\r\nimport {VerticalHourField} from '../buttons/vertical-hour-field';\r\nimport {OrderModel} from '../../models/Order.model';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {Utils} from '../../services/utils';\r\nimport {SidurStore} from '../../store/store.types';\r\nimport {LocationModel} from '../../models/Location.model';\r\nimport {SidurEditorService} from '../../sidurEditor/sidurEditor.service';\r\nimport {LanguageUtilities} from '../../services/language-utilities';\r\nimport {Styles} from '../../hoc/themes';\r\nimport {DriveType} from '../../models/DriveType.enum';\r\n\r\ninterface SketchDriveMergeDialogProps {\r\n    open: boolean;\r\n    sketchDriveData: { drive: DriveModel, vehicleId: string };\r\n    PendingOrderToMergeId: string\r\n    vehicleId: string;\r\n    onDelete: (sketchDriveData: { drive: DriveModel, vehicleId: string }) => void;\r\n\r\n    onClose: (vehicleUpdate: DriveModel | null) => void;\r\n}\r\n\r\nexport const SketchDriveMergeDialog = (props: SketchDriveMergeDialogProps) => {\r\n    const {\r\n        onClose,\r\n        onDelete,\r\n        open,\r\n        sketchDriveData,\r\n        PendingOrderToMergeId\r\n    } = props;\r\n    const dispatch = useDispatch();\r\n    const SketchIdInEdit = useSelector((state: SidurStore) => state.sessionState.SketchIdInEdit);\r\n    const sketches: SketchModel[] = useSelector((state: { sketches: SketchModel[] }) => state.sketches);\r\n    const sketchInEdit: SketchModel = sketches.find((sketch: SketchModel) => sketch.id === SketchIdInEdit) as SketchModel;\r\n    const orderToMerge: OrderModel = sketchInEdit.unassignedOrders.find(o => o.id === PendingOrderToMergeId) as OrderModel;\r\n    const sketchOrders = sketchInEdit?.assignedOrders || [];\r\n    const locations = useSelector(((state: { Locations: LocationModel[] }) => state.Locations));\r\n    const originalDriveData = sketchDriveData.drive;\r\n    const driveDataAndIssues = SidurEditorService.SuggestMergedDrive(originalDriveData, orderToMerge, locations);\r\n\r\n    const driveData = driveDataAndIssues.suggestedDrive;\r\n    const issues = driveDataAndIssues.issues;\r\n\r\n    const orderToMergeBrief = LanguageUtilities.buildBriefText(orderToMerge, locations);\r\n\r\n    const [driveChangedData, setDriveChangedData] = useState<DriveModel>({...driveData});\r\n\r\n\r\n    const descriptionValueRef: any = useRef('')\r\n    const filedWrapper: SxProps = {\r\n        //  width: '320px'\r\n    }\r\n    const handleCloseCancel = () => {\r\n        onClose(null);\r\n    };\r\n\r\n    const handleCloseEdit = (): void => {\r\n        const editedData: DriveModel | null = {...driveChangedData};\r\n        if (descriptionValueRef?.current?.value) {\r\n            editedData.description = descriptionValueRef?.current?.value\r\n        }\r\n        if (orderToMerge.TypeOfDrive === DriveType.Tsamud) {\r\n            editedData.TypeOfDrive = DriveType.Tsamud;\r\n\r\n        }\r\n        editedData.implementsOrders.push(PendingOrderToMergeId);\r\n        onClose(editedData);\r\n\r\n    };\r\n\r\n\r\n    const handleHourChange =\r\n        (event: Event, input: any) => {\r\n            const newriveData = {...driveChangedData};\r\n            newriveData.startHour = Utils.DecimalTimeToHourText(input[0]);\r\n            newriveData.finishHour = Utils.DecimalTimeToHourText(input[1]);\r\n            setDriveChangedData(newriveData);\r\n\r\n\r\n        }\r\n    const implementedOrders = sketchOrders.filter((o: OrderModel) => driveChangedData.implementsOrders.includes(o.id))\r\n    const newImplementedOrders = [orderToMerge]\r\n    return (\r\n\r\n\r\n        <Dialog open={open} onClose={handleCloseCancel} fullWidth>\r\n            <DialogTitle sx={{\r\n                fontSize: '22px',\r\n                textAlign: 'center',\r\n                display: 'flex',\r\n                justifyContent: 'center'\r\n\r\n            }}><MergeType fontSize={'large'}/> {translations.MergeDrive} </DialogTitle>\r\n            <DialogContent>\r\n                <Box sx={{\r\n                    ...filedWrapper,\r\n                    display: 'flex',\r\n                    flexDirection: 'row',\r\n                    minWidth: '35vw'\r\n                }}>\r\n\r\n\r\n                    <Box sx={{\r\n                        ...filedWrapper,\r\n                        display: 'flex',\r\n                        flexDirection: 'column',\r\n                        maxWidth: '160px',\r\n                        p: '0 0.2em',\r\n\r\n                    }}>\r\n                        <Typography align={'center'}\r\n                                    component=\"legend\"><b>{translations.DriveTimesAfterMerge}</b>\r\n                        </Typography>\r\n\r\n                        <VerticalHourField input={[driveData.startHour, driveData.finishHour]}\r\n                                           onHoursChange={handleHourChange}\r\n                                           label={translations.Start}/>\r\n\r\n                    </Box>\r\n                    <Box id={'divider-in-main-row'} sx={{\r\n                        width: '20px',\r\n                        height: '100px'\r\n                    }}/>\r\n                    <Box sx={{\r\n                        ...filedWrapper,\r\n                        display: 'flex',\r\n                        flexDirection: 'column'\r\n                    }}>\r\n                        <Typography\r\n                            component=\"legend\"><b>{translations.DriveDescriptionNew}</b>\r\n                        </Typography>\r\n\r\n                        <Box sx={{...filedWrapper}}>\r\n                            <TextField\r\n                                size={'medium'}\r\n                                margin=\"dense\"\r\n                                id=\"vehicle-comments-dialog-text-field\"\r\n                                type=\"text\"\r\n                                fullWidth\r\n                                multiline={true}\r\n                                variant=\"standard\"\r\n                                defaultValue={(driveData?.description || '').replace('  ', ' ')}\r\n                                inputRef={descriptionValueRef}\r\n                                onKeyUp={(event) => {\r\n                                    if (event.key === 'Enter') {\r\n                                        handleCloseEdit()\r\n                                    }\r\n                                }}\r\n                            />\r\n                        </Box>\r\n                        <Typography sx={{mt: '1em'}}\r\n                                    component=\"legend\"><b> {newImplementedOrders.length === 0 ? (translations.none + ' ') : null} {\r\n                            translations\r\n                                .issues + ':'\r\n                        }</b>\r\n                            <Box id={'issues'}>\r\n                                {issues.map((issue: string, i: number) => (\r\n                                    <Box key={i} sx={{\r\n                                        display: 'flex',\r\n                                        flexDirection: 'column',\r\n                                        p: '0.0em'\r\n                                    }}>\r\n                                        <Box sx={{pb: '0em'}}>\r\n                                            {(i + 1).toString() + '. '}{issue}\r\n                                        </Box>\r\n\r\n\r\n                                    </Box>))}\r\n                            </Box>\r\n                        </Typography> <Typography sx={{mt: '1em'}}\r\n                                                  component=\"legend\"><b> {newImplementedOrders.length === 0 ? (translations.none + ' ') : null} {\r\n                        translations\r\n                            .newMergedOrder\r\n                    }</b>\r\n                    </Typography>\r\n\r\n                        <Box id={'connected-orders'}>\r\n                            {newImplementedOrders.map((order: OrderModel, i: number) => (\r\n                                <Box key={i} sx={{\r\n                                    display: 'flex',\r\n                                    flexDirection: 'column',\r\n                                    p: '0.2em'\r\n                                }}>\r\n                                    <Box sx={{pb: '0.2em'}}>\r\n                                        {orderToMergeBrief.timeText + ' ' + orderToMergeBrief.driverAndLocation + ', ' + order.Comments}\r\n                                    </Box>\r\n\r\n\r\n                                </Box>))}\r\n                        </Box>\r\n\r\n\r\n                        <Typography sx={{mt: '0.2em'}}\r\n                                    component=\"legend\"><b> {implementedOrders.length === 0 ? (translations.none + ' ') : null} {\r\n                            translations\r\n                                .connectedOrders\r\n                        }</b>\r\n                        </Typography>\r\n\r\n                        <Box id={'connected-orders'}>\r\n                            {implementedOrders.map((order: OrderModel, i: number) => (\r\n                                <Box key={i} sx={{\r\n                                    display: 'flex',\r\n                                    flexDirection: 'column',\r\n                                    p: '0.2em'\r\n                                }}>\r\n                                    <Box sx={{pb: '0.5em'}}>\r\n                                        {(i + 1).toString() + '. '}{order.Comments}\r\n                                    </Box>\r\n\r\n                                </Box>))}\r\n                        </Box>\r\n\r\n\r\n                        <Box sx={{\r\n\r\n                            flexDirection: 'row',\r\n                            alignItems: 'center',\r\n                            justifyContent: 'center',\r\n                            marginTop: '1em',\r\n                            display: 'flex'\r\n                        }}>\r\n\r\n                        </Box>\r\n                    </Box>\r\n                </Box>\r\n            </DialogContent>\r\n            <DialogActions sx={{\r\n                ...Styles.flexRow,\r\n                justifyContent: 'center'\r\n            }}>\r\n\r\n                <Button size={'large'} variant={'outlined'} id={'vehicle-edit-cancel-button'}\r\n                        onClick={handleCloseCancel}>{translations.CancelMerge}</Button>\r\n                <Box sx={{\r\n                    width: '30px',\r\n                    height: '10px'\r\n                }}/>\r\n                <Button size={'large'} variant={'contained'} id={'vehicle-edit-approve-button'}\r\n                        onClick={handleCloseEdit}>{translations.ApproveMerge}</Button>\r\n            </DialogActions>\r\n        </Dialog>\r\n\r\n    );\r\n}\r\n","import React, {useState} from 'react'\r\nimport {Box} from '@mui/system';\r\nimport {Card} from '@mui/material';\r\nimport {Add} from '@mui/icons-material';\r\n\r\n\r\ninterface sketchVehicleAddButtonProps {\r\n\r\n    sketchDriveClick: (event: React.MouseEvent<HTMLElement>) => void\r\n}\r\n\r\nexport const SketchVehicleAddButton = (props: sketchVehicleAddButtonProps) => {\r\n\r\n\r\n    const [inHover, setInHover] = useState(false);\r\n    const onMouseOver = () => {\r\n        setInHover(true)\r\n    };\r\n    const onMouseOut = () => {\r\n        setInHover(false)\r\n    };\r\n\r\n\r\n    return (\r\n\r\n        <Box>\r\n\r\n            <Card onClick={(event: any) => props.sketchDriveClick(event)} onMouseOver={onMouseOver}\r\n                  onMouseOut={onMouseOut} elevation={inHover ? 8 : 2} sx={{\r\n                m: '0.2em',\r\n                mb: '0.3em',\r\n                position: 'relative',\r\n\r\n                zIndex: 40,\r\n                minHeight: '7vh',\r\n                display: 'flex',\r\n                flexDirection: 'row',\r\n                alignItems: 'center',\r\n                justifyContent: 'center',\r\n                cursor: 'default',\r\n\r\n            }}>\r\n\r\n\r\n                <Box sx={{\r\n                    mt: '0.2em'\r\n                }}\r\n                > <Add fontSize={'large'}/> </Box>\r\n\r\n            </Card>\r\n        </Box>\r\n\r\n\r\n    )\r\n\r\n}\r\n","import * as React from 'react';\r\nimport {useRef, useState} from 'react';\r\nimport Button from '@mui/material/Button';\r\nimport TextField from '@mui/material/TextField';\r\nimport Dialog from '@mui/material/Dialog';\r\nimport DialogActions from '@mui/material/DialogActions';\r\nimport DialogContent from '@mui/material/DialogContent';\r\nimport DialogTitle from '@mui/material/DialogTitle';\r\nimport {translations} from '../../services/translations';\r\nimport {Box, Typography} from '@mui/material';\r\nimport {SxProps} from '@mui/system';\r\nimport {MergeType} from '@mui/icons-material';\r\nimport {DriveModel, SketchModel} from '../../models/Sketch.model';\r\nimport {OrderModel} from '../../models/Order.model';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {SidurStore} from '../../store/store.types';\r\nimport {LocationModel} from '../../models/Location.model';\r\nimport {LanguageUtilities} from '../../services/language-utilities';\r\nimport {Styles} from '../../hoc/themes';\r\nimport {DriveType} from '../../models/DriveType.enum';\r\n\r\ninterface SketchOrderToTransportDialogProps {\r\n    open: boolean;\r\n    PendingOrderToTransportId: string;\r\n    onClose: (vehicleUpdate: OrderModel | null) => void;\r\n}\r\n\r\nexport const SketchOrderToTransportDialog = (props: SketchOrderToTransportDialogProps) => {\r\n    const {\r\n        onClose,\r\n        open,\r\n        PendingOrderToTransportId\r\n    } = props;\r\n    const dispatch = useDispatch();\r\n    console.log('in order transport popup')\r\n    const SketchIdInEdit = useSelector((state: SidurStore) => state.sessionState.SketchIdInEdit);\r\n    const sketches: SketchModel[] = useSelector((state: { sketches: SketchModel[] }) => state.sketches);\r\n    const sketchInEdit: SketchModel = sketches.find((sketch: SketchModel) => sketch.id === SketchIdInEdit) as SketchModel;\r\n    const orderToMerge: OrderModel = sketchInEdit.unassignedOrders.find(o => o.id === PendingOrderToTransportId) as OrderModel;\r\n    const sketchOrders = sketchInEdit?.assignedOrders || [];\r\n    const locations = useSelector(((state: { Locations: LocationModel[] }) => state.Locations));\r\n    const fakseDrive: DriveModel = {\r\n        Comments: '',\r\n        TypeOfDrive: DriveType.Tsamud,\r\n        description: '',\r\n        driverName: '',\r\n        finishHour: '',\r\n        flexibility: ['', ''],\r\n        id: '',\r\n        implementsOrders: [],\r\n        location: '',\r\n        passengers: '',\r\n        startHour: ''\r\n    }\r\n    const driveDataAndIssues = {\r\n        suggestedDrive: fakseDrive,\r\n        issues: []\r\n    }\r\n    const driveData = driveDataAndIssues.suggestedDrive;\r\n    const issues = driveDataAndIssues.issues;\r\n\r\n    const orderToMergeBrief = LanguageUtilities.buildBriefText(orderToMerge, locations);\r\n\r\n    const [driveChangedData, setDriveChangedData] = useState<DriveModel>({...driveData});\r\n    const secondOrderToMergeBrief = {...orderToMergeBrief};\r\n    const descriptionValueRef: any = useRef('')\r\n    const secondDescriptionValueRef: any = useRef('')\r\n    const filedWrapper: SxProps = {\r\n        width: '100%'\r\n    }\r\n    const handleCloseCancel = () => {\r\n        onClose(null);\r\n    };\r\n\r\n    const handleCloseEdit = (): void => {\r\n        const editedData: DriveModel | null = {...driveChangedData};\r\n        if (descriptionValueRef?.current?.value) {\r\n            editedData.description = descriptionValueRef?.current?.value\r\n        }\r\n        if (orderToMerge.TypeOfDrive === DriveType.Tsamud) {\r\n            editedData.TypeOfDrive = DriveType.Tsamud;\r\n\r\n        }\r\n        editedData.implementsOrders.push(PendingOrderToTransportId);\r\n        onClose(editedData);\r\n\r\n    };\r\n    const implementedOrders = sketchOrders.filter((o: OrderModel) => driveChangedData.implementsOrders.includes(o.id))\r\n\r\n    return (\r\n        <Dialog open={open} onClose={handleCloseCancel} fullWidth>\r\n            <DialogTitle sx={{\r\n                fontSize: '22px',\r\n                textAlign: 'center',\r\n                display: 'flex',\r\n                justifyContent: 'center'\r\n\r\n            }}><MergeType fontSize={'large'}/> {translations.publicTransportSolution} </DialogTitle>\r\n            <DialogContent>\r\n                <Box sx={{\r\n                    ...filedWrapper,\r\n                    display: 'flex',\r\n                    flexDirection: 'row',\r\n                    minWidth: '35vw'\r\n                }}>\r\n\r\n\r\n                    <Box id={'divider-in-main-row'} sx={{\r\n                        width: '20px',\r\n                        height: '100px'\r\n                    }}/>\r\n                    <Box sx={{\r\n                        ...filedWrapper,\r\n                        display: 'flex',\r\n                        flexDirection: 'column'\r\n                    }}>\r\n\r\n\r\n                        <Box sx={{...filedWrapper}}>\r\n                            <TextField\r\n                                size={'medium'}\r\n                                margin=\"dense\"\r\n                                id=\"vehicle-comments-dialog-text-field\"\r\n                                type=\"text\"\r\n                                fullWidth\r\n                                multiline={true}\r\n                                variant=\"standard\"\r\n                                defaultValue={((orderToMergeBrief.timeText + ' ' + orderToMergeBrief.driverAndLocation) || '').replace('  ', ' ')}\r\n                                inputRef={descriptionValueRef}\r\n                                onKeyUp={(event) => {\r\n                                    if (event.key === 'Enter') {\r\n                                        handleCloseEdit()\r\n                                    }\r\n                                }}\r\n                            />\r\n                        </Box>\r\n\r\n\r\n                        <Typography sx={{mt: '0.2em'}}\r\n                                    component=\"legend\"><b> {implementedOrders.length === 0 ? (translations.none + ' ') : null} {\r\n                            translations\r\n                                .connectedOrders\r\n                        }</b>\r\n                        </Typography>\r\n                        {\r\n                            secondOrderToMergeBrief ? (\r\n\r\n                                <Box sx={{...filedWrapper}}>\r\n                                    <TextField\r\n                                        size={'medium'}\r\n                                        margin=\"dense\"\r\n                                        id=\"vehicle-comments-dialog-text-field\"\r\n                                        type=\"text\"\r\n                                        fullWidth\r\n                                        multiline={true}\r\n                                        variant=\"standard\"\r\n                                        defaultValue={((secondOrderToMergeBrief.timeText + ' ' + secondOrderToMergeBrief.driverAndLocation) || '').replace('  ', ' ')}\r\n                                        inputRef={secondDescriptionValueRef}\r\n                                        onKeyUp={(event) => {\r\n                                            if (event.key === 'Enter') {\r\n                                                handleCloseEdit()\r\n                                            }\r\n                                        }}\r\n                                    />\r\n                                </Box>) : null\r\n                        }\r\n\r\n\r\n                        <Typography sx={{mt: '0.2em'}}\r\n                                    component=\"legend\"><b> {implementedOrders.length === 0 ? (translations.none + ' ') : null} {\r\n                            translations\r\n                                .connectedOrders\r\n                        }</b>\r\n                        </Typography>\r\n\r\n                        <Box id={'connected-orders'}>\r\n                            {implementedOrders.map((order: OrderModel, i: number) => (\r\n                                <Box key={i} sx={{\r\n                                    display: 'flex',\r\n                                    flexDirection: 'column',\r\n                                    p: '0.2em'\r\n                                }}>\r\n                                    <Box sx={{pb: '0.5em'}}>\r\n                                        {(i + 1).toString() + '. '}{order.Comments}\r\n                                    </Box>\r\n\r\n                                </Box>))}\r\n                        </Box>\r\n\r\n\r\n                        <Box sx={{\r\n\r\n                            flexDirection: 'row',\r\n                            alignItems: 'center',\r\n                            justifyContent: 'center',\r\n                            marginTop: '1em',\r\n                            display: 'flex'\r\n                        }}>\r\n\r\n                        </Box>\r\n                    </Box>\r\n                </Box>\r\n            </DialogContent>\r\n            <DialogActions sx={{\r\n                ...Styles.flexRow,\r\n                justifyContent: 'center'\r\n            }}>\r\n\r\n                <Button size={'large'} variant={'outlined'} id={'vehicle-edit-cancel-button'}\r\n                        onClick={handleCloseCancel}>{translations.Cancel}</Button>\r\n                <Box sx={{\r\n                    width: '30px',\r\n                    height: '10px'\r\n                }}/>\r\n                <Button size={'large'} variant={'contained'} id={'vehicle-edit-approve-button'}\r\n                        onClick={handleCloseEdit}>{translations.Update}</Button>\r\n            </DialogActions>\r\n        </Dialog>\r\n\r\n    );\r\n}\r\n","import React, {useState} from 'react'\r\nimport {Box} from '@mui/system';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {Collapse, Divider, Typography} from '@mui/material';\r\nimport {DriveModel, SketchModel, VehicleScheduleModel} from '../../models/Sketch.model';\r\nimport {VehicleModel} from '../../models/Vehicle.model';\r\nimport {ChooseDriveMode, SketchDrive} from './SketchDrive';\r\nimport {SketchPendingOrders} from './SketchPendeingOrders';\r\nimport {SketchDriveEditDialog} from '../Dialogs/sketch-drive-edit-dialog';\r\nimport {ActionsTypes} from '../../store/types.actions';\r\nimport {SidurStore} from '../../store/store.types';\r\nimport {SketchNoSketchMessage} from './sketch-no-sketch-message';\r\n\r\nimport {TransitionGroup} from 'react-transition-group';\r\nimport {SketchDriveMergeDialog} from '../Dialogs/sketch-drive-merge-dialog';\r\nimport {OrderModel} from '../../models/Order.model';\r\nimport {SketchDriveOrderEditActionEnum} from '../../models/SketchDriveOrderEditActionEnum';\r\nimport {SketchVehicleAddButton} from '../buttons/sketch-vehicle-add-button';\r\nimport {SketchOrderToTransportDialog} from '../Dialogs/sketch-order-to-transport-dialog';\r\n\r\n\r\nexport const Sketch = () => {\r\n    const dispatch = useDispatch()\r\n    const SketchIdInEdit = useSelector((state: SidurStore) => state.sessionState.SketchIdInEdit);\r\n    const pendingOrderInEditActionSelectDrives = useSelector((state: SidurStore) => state.sessionState.pendingOrderInEditActionSelectDrives || []);\r\n    const pendingOrderInEditAction: SketchDriveOrderEditActionEnum | null = useSelector((state: SidurStore) => state.sessionState.pendingOrderInEditAction);\r\n    const sessionState = useSelector((state: SidurStore) => state.sessionState);\r\n\r\n    const vehicles = useSelector((state: { vehicles: VehicleModel[] }) => state.vehicles);\r\n    const sketches: SketchModel[] = useSelector((state: { sketches: SketchModel[] }) => state.sketches);\r\n    const [sketchDriveEditOpen, setSketchDriveEditOpen] = React.useState(false);\r\n    const [sketchDriveMergeOpen, setSketchDriveMergeOpen] = React.useState(false);\r\n    const [sketchOrderToTransportOpen, setSketchOrderToTransportOpen] = React.useState(false);\r\n\r\n    const [chosenDrive, setChosenDrive] = useState<{ drive: DriveModel, vehicleId: string } | null>(null);\r\n\r\n    if (pendingOrderInEditAction === SketchDriveOrderEditActionEnum.publicTransport && !sketchOrderToTransportOpen) {\r\n        setSketchOrderToTransportOpen(true);\r\n\r\n    }\r\n    const addToVehicleButtonShown = pendingOrderInEditAction === SketchDriveOrderEditActionEnum.AddToVehicle;\r\n    const handleSketchDriveEditDelete = (sketchDriveData: { drive: DriveModel, vehicleId: string }) => {\r\n        setSketchDriveEditOpen(false);\r\n        setChosenDrive(null);\r\n        const value = sketchDriveData.drive\r\n        dispatch({\r\n            type: ActionsTypes.DELETE_SKETCH_DRIVE,\r\n            payload: {\r\n                value\r\n            }\r\n        })\r\n\r\n    }\r\n\r\n\r\n    const handleSketchDriveEditClose = (value: DriveModel | null) => {\r\n        setSketchDriveEditOpen(false);\r\n        setChosenDrive(null);\r\n        if (value) {\r\n\r\n            dispatch({\r\n                type: ActionsTypes.UPDATE_SKETCH_DRIVE,\r\n                payload: {\r\n                    value\r\n                }\r\n            })\r\n\r\n\r\n        }\r\n    };\r\n    const handleSketchOrderToTransportClose = (value: OrderModel | null) => {\r\n\r\n        setSketchOrderToTransportOpen(false);\r\n\r\n        setChosenDrive(null);\r\n        if (value) {\r\n\r\n            dispatch({\r\n                type: ActionsTypes.UPDATE_SKETCH_DRIVE_WITH_MERGED_ORDER,\r\n                payload: {\r\n                    value\r\n                }\r\n            })\r\n\r\n\r\n        } else {\r\n            dispatch({\r\n                type: ActionsTypes.REMOVE_PENDING_ORDER_STATUS,\r\n                payload: {\r\n                    value\r\n                }\r\n            })\r\n        }\r\n    };\r\n    const handleSketchDriveMergeClose = (value: DriveModel | null) => {\r\n\r\n        setSketchDriveMergeOpen(false);\r\n\r\n        setChosenDrive(null);\r\n        if (value) {\r\n\r\n            dispatch({\r\n                type: ActionsTypes.UPDATE_SKETCH_DRIVE_WITH_MERGED_ORDER,\r\n                payload: {\r\n                    value\r\n                }\r\n            })\r\n\r\n\r\n        } else {\r\n            dispatch({\r\n                type: ActionsTypes.REMOVE_PENDING_ORDER_STATUS,\r\n                payload: {\r\n                    value\r\n                }\r\n            })\r\n        }\r\n    };\r\n    const HandleDriveMerge = (pendingOrderToMerge: OrderModel, driveToMerge: DriveModel, vehicleId: string): void => {\r\n        setChosenDrive({\r\n            drive: driveToMerge,\r\n            vehicleId: vehicleId\r\n        })\r\n        setSketchDriveMergeOpen(true);\r\n    }\r\n    const HandleDriveReplace = (pendingOrder: OrderModel, driveToReplace: DriveModel, vehicleId: string): void => {\r\n        dispatch({\r\n            type: ActionsTypes.REPLACE_SKETCH_DRIVE_WITH_ORDER,\r\n            payload: {\r\n                value: driveToReplace\r\n\r\n            }\r\n        })\r\n\r\n        // setChosenDrive({\r\n        //     drive: driveToMerge,\r\n        //     vehicleId: vehicleId\r\n        // })\r\n        // setSketchDriveMergeOpen(true);\r\n    }\r\n    const HandleAddDrive = (vehicleTimeTableId: string): void => {\r\n        dispatch({\r\n            type: ActionsTypes.ADD_SKETCH_DRIVE_FROM_PENDING_ORDER,\r\n            payload: {\r\n                value: vehicleTimeTableId\r\n\r\n            }\r\n        })\r\n\r\n\r\n    }\r\n\r\n    const sketchDriveClickHandler = (event: React.MouseEvent<HTMLElement>, drive: DriveModel, vehicleId: string) => {\r\n\r\n        if (sessionState.pendingOrderInEditAction && sessionState.pendingOrderIdInEdit) {\r\n            const Order = sketchInEdit?.unassignedOrders.find(o => o.id === sessionState.pendingOrderIdInEdit)\r\n            if (Order) {\r\n                switch (sessionState.pendingOrderInEditAction) {\r\n                    case SketchDriveOrderEditActionEnum.ReplaceExisting:\r\n                        HandleDriveReplace(Order, drive, vehicleId)\r\n                        break;\r\n                    case SketchDriveOrderEditActionEnum.Merge:\r\n                        HandleDriveMerge(Order, drive, vehicleId)\r\n                        break;\r\n                }\r\n            }\r\n            return;\r\n        }\r\n        setChosenDrive({\r\n            drive: drive,\r\n            vehicleId: vehicleId\r\n        })\r\n        setSketchDriveEditOpen(true);\r\n    };\r\n    const getVehicleNameFromId = (vehicleId: string): string | null => {\r\n        return vehicles.find(v => v.id === vehicleId)?.vehicleName || vehicleId\r\n    }\r\n\r\n    const sketchInEdit: SketchModel | null = sketches.find((sketch: SketchModel) => sketch.id === SketchIdInEdit) || null;\r\n\r\n\r\n    return (\r\n        sketchInEdit ? (\r\n                <Box>\r\n                    <Box id={'sketch-wrapper-row'} sx={{\r\n                        display: 'flex',\r\n                        flexDirection: 'row',\r\n                        alignItems: 'start',\r\n                        mb: '10px',\r\n                        justifyContent: 'center',\r\n                        minWidth: '30vw',\r\n                    }}>\r\n                        <SketchPendingOrders pendingOrders={sketchInEdit.unassignedOrders}/>\r\n\r\n\r\n                        {sketchInEdit.vehicleSchedules.map((vehicleTimeTable: VehicleScheduleModel, i: number) => {\r\n                            return (<Box key={i}>\r\n                                <Box key={i} id={'vehicle-column'} sx={{\r\n                                    display: 'flex',\r\n                                    flexDirection: 'column',\r\n                                    alignItems: 'stretch',\r\n                                    m: '15px',\r\n                                    mt: '0px',\r\n                                    justifyContent: 'start',\r\n                                    minWidth: '6vw',\r\n                                    minHeight: '60vh',\r\n                                }}> <Typography variant={'h6'}>{getVehicleNameFromId(vehicleTimeTable.VehicleId)}  </Typography>\r\n                                    {addToVehicleButtonShown ? <SketchVehicleAddButton sketchDriveClick={(ev) => {\r\n                                        HandleAddDrive(vehicleTimeTable.id)\r\n                                    }}/> : null}\r\n                                    <TransitionGroup>\r\n                                        {vehicleTimeTable.drives.map((drive: DriveModel, i: number) => {\r\n                                            let chooseDriveMode = ChooseDriveMode.NotActive\r\n                                            if (pendingOrderInEditActionSelectDrives.length > 0) {\r\n                                                if (pendingOrderInEditActionSelectDrives.includes(drive.id)) {\r\n                                                    chooseDriveMode = ChooseDriveMode.selectable\r\n                                                } else {\r\n                                                    chooseDriveMode = ChooseDriveMode.nonSelectable\r\n                                                }\r\n                                            }\r\n\r\n                                            return (\r\n                                                <Collapse key={i}>\r\n                                                    <SketchDrive chooseDriveMode={chooseDriveMode}\r\n                                                                 sketchDriveClick={(event: React.MouseEvent<HTMLElement>, drive: DriveModel) => sketchDriveClickHandler(event, drive, vehicleTimeTable.id)}\r\n                                                                 key={i} drive={drive}\r\n                                                                 previousDrive={vehicleTimeTable.drives[i - 1] || null}/>\r\n                                                </Collapse>\r\n\r\n                                            )\r\n\r\n                                        })}\r\n                                    </TransitionGroup>\r\n\r\n                                </Box>\r\n                                <Divider orientation=\"vertical\" variant={'fullWidth'} sx={{borderRight: '2px solid black '}} flexItem/>\r\n                            </Box>)\r\n\r\n\r\n                        })}\r\n\r\n                    </Box>\r\n                    {chosenDrive ?\r\n                        <SketchDriveEditDialog vehicleId={'1'} open={sketchDriveEditOpen} onClose={handleSketchDriveEditClose}\r\n                                               sketchDriveData={chosenDrive}\r\n                                               onDelete={handleSketchDriveEditDelete}/> : null}\r\n                    {chosenDrive && sessionState.pendingOrderIdInEdit && sketchDriveMergeOpen ?\r\n                        <SketchDriveMergeDialog vehicleId={'1'} open={sketchDriveMergeOpen} onClose={handleSketchDriveMergeClose}\r\n                                                sketchDriveData={chosenDrive}\r\n                                                PendingOrderToMergeId={sessionState.pendingOrderIdInEdit}\r\n                                                onDelete={handleSketchDriveEditDelete}/> : null}\r\n                    {sessionState.pendingOrderIdInEdit && sketchOrderToTransportOpen ?\r\n                        <SketchOrderToTransportDialog open={sketchOrderToTransportOpen} onClose={handleSketchOrderToTransportClose}\r\n                                                      PendingOrderToTransportId={sessionState.pendingOrderIdInEdit}\r\n                        /> : null}\r\n\r\n\r\n                </Box>)\r\n            :\r\n            <SketchNoSketchMessage/>\r\n    )\r\n\r\n\r\n}\r\n","import {Box, Typography} from '@mui/material';\r\nimport {Styles} from '../../hoc/themes';\r\nimport {useSelector} from 'react-redux';\r\nimport {SidurStore} from '../../store/store.types';\r\nimport {SketchDriveOrderEditActionEnum} from '../../models/SketchDriveOrderEditActionEnum';\r\nimport {SketchModel} from '../../models/Sketch.model';\r\nimport {OrderModel} from '../../models/Order.model';\r\nimport {translations} from '../../services/translations';\r\nimport {LanguageUtilities} from '../../services/language-utilities';\r\nimport {LocationModel} from '../../models/Location.model';\r\n\r\nexport const SketchesContainerMessage = (props: { sketch: SketchModel | null, clickCancel: () => void }) => {\r\n\r\n    const sessionState = useSelector((state: SidurStore) => state.sessionState);\r\n    const locations = useSelector(((state: { Locations: LocationModel[] }) => state.Locations));\r\n    const pendingOrderInEditAction = useSelector((state: SidurStore) => state.sessionState.pendingOrderInEditAction);\r\n    const pendingOrderIdInEdit = useSelector((state: SidurStore) => state.sessionState.pendingOrderIdInEdit);\r\n\r\n\r\n    let messageText = ''\r\n    if (pendingOrderInEditAction) {\r\n\r\n\r\n        const pendingORderInEdit: OrderModel | undefined = props.sketch?.unassignedOrders.find(o => o.id === pendingOrderIdInEdit)\r\n        switch (sessionState.pendingOrderInEditAction) {\r\n            case SketchDriveOrderEditActionEnum.Merge:\r\n                messageText += translations.SketchActionMergeInfoMessage\r\n                break;\r\n            case SketchDriveOrderEditActionEnum.ReplaceExisting:\r\n                messageText += translations.SketchActionReplaceInfoMessage\r\n                break;\r\n            case SketchDriveOrderEditActionEnum.AddToVehicle:\r\n                messageText += translations.SketchActionAddToVehicleInfoMessage\r\n                break;\r\n\r\n        }\r\n\r\n        if (pendingORderInEdit) {\r\n            messageText += ' ' + LanguageUtilities.buildBriefText(pendingORderInEdit, locations).driverAndLocation;\r\n        }\r\n        if (sessionState.pendingOrderInEditAction === SketchDriveOrderEditActionEnum.publicTransport) {\r\n            messageText = ''\r\n        }\r\n\r\n\r\n    }\r\n\r\n    return (<Box sx={{\r\n        ...Styles\r\n            .flexRow\r\n    }}>\r\n        <Box sx={{\r\n            width: '20vw',\r\n            height: '10px'\r\n        }}/>\r\n        <Typography variant={'h5'}>{messageText}  </Typography>\r\n        {messageText ? <>&nbsp; &nbsp;\r\n            <Typography sx={{\r\n                p: '0.2em',\r\n                cursor: 'pointer',\r\n                textDecoration: 'underline'\r\n            }} onClick={props.clickCancel} variant={'subtitle1'}> {translations.cancellation}  </Typography>\r\n        </> : null\r\n        }\r\n\r\n\r\n    </Box>)\r\n}\r\n","import React from 'react'\r\nimport {Box} from '@mui/system';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {Button, Select, SelectChangeEvent, Typography} from '@mui/material';\r\nimport {translations} from '../../services/translations';\r\nimport {SketchModel} from '../../models/Sketch.model';\r\nimport {ActionsTypes} from '../../store/types.actions';\r\nimport {SidurStore} from '../../store/store.types';\r\nimport {SketchActionType} from '../../models/SketchMenuClickActionType.enum';\r\nimport {SketchMenu} from './sketch-menu';\r\nimport {Edit} from '@mui/icons-material';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport {Sketch} from './Sketch';\r\nimport MenuItem from '@mui/material/MenuItem';\r\nimport {RenameDialog} from '../Dialogs/rename-dialog';\r\nimport {StoreUtils} from '../../store/store-utils';\r\nimport {SketchesContainerMessage} from './SketchesContainerMessage';\r\n\r\n\r\nexport const SketchesContainer = () => {\r\n    const dispatch = useDispatch();\r\n    const SketchIdInEdit = useSelector((state: SidurStore) => state.sessionState.SketchIdInEdit);\r\n    const sketches: SketchModel[] = useSelector((state: { sketches: SketchModel[] }) => state.sketches);\r\n\r\n\r\n    const [sketchMoreAnchorEl, setSketchMoreAnchorEl] =\r\n        React.useState<null | HTMLElement>(null);\r\n    const isSketchMenuOpen = Boolean(sketchMoreAnchorEl);\r\n\r\n    const sketchMenuId = 'primary-sketch-menu';\r\n    const [RenameOpen, setRenameOpen] = React.useState(false);\r\n\r\n    const handleSketchMenuOpen = (event: React.MouseEvent<HTMLElement>) => {\r\n        setSketchMoreAnchorEl(event.currentTarget);\r\n    };\r\n    const handleRenameClose = (value: string | null) => {\r\n        setRenameOpen(false);\r\n        const id = SketchIdInEdit;\r\n        if (value) {\r\n            dispatch({\r\n                type: ActionsTypes.RENAME_SKETCH,\r\n                payload: {\r\n                    value,\r\n                    id\r\n                }\r\n            })\r\n        }\r\n    };\r\n    const handleSketchMenuClick = (event: React.MouseEvent<HTMLElement>, clickAction: SketchActionType) => {\r\n\r\n\r\n        switch (clickAction) {\r\n\r\n            case SketchActionType.CreateCopy:\r\n                dispatch({\r\n                    type: ActionsTypes.CLONE_SKETCH,\r\n                    payload: {id: SketchIdInEdit}\r\n                })\r\n                break;\r\n\r\n            case SketchActionType.Delete:\r\n                dispatch({\r\n                    type: ActionsTypes.DELETE_SKETCH,\r\n                    payload: {id: SketchIdInEdit}\r\n                })\r\n                break;\r\n            case SketchActionType.Rename:\r\n                setRenameOpen(true);\r\n                break;\r\n\r\n\r\n            default:\r\n        }\r\n        handleSketchMenuClose()\r\n    };\r\n    const handleSketchMenuClose = () => {\r\n        setSketchMoreAnchorEl(null);\r\n    };\r\n    const handleSketchChanged = (event: any, _child: React.ReactNode) => {\r\n\r\n        const chosenSketch = event.target.value as string;\r\n        if (chosenSketch === 'NEW') {\r\n            StoreUtils.shieldAnimationBeforeDispatch(() => {\r\n                dispatch({\r\n                    type: ActionsTypes.NEW_SKETCH,\r\n                    payload: null\r\n                })\r\n            }, dispatch)\r\n\r\n\r\n        } else {\r\n            dispatch({\r\n                type: ActionsTypes.CHOOSE_SKETCH,\r\n                payload: {id: chosenSketch}\r\n            })\r\n        }\r\n\r\n\r\n    }\r\n    const handleCreateSketch = () => {\r\n        StoreUtils.shieldAnimationBeforeDispatch(() => {\r\n            dispatch({\r\n                type: ActionsTypes.NEW_SKETCH,\r\n                payload: null\r\n            })\r\n        }, dispatch)\r\n    }\r\n    const handleSketchActionCancelClick = () => {\r\n        dispatch({\r\n            type: ActionsTypes.CLICKED_CLOSE_PENDING_ORDER,\r\n            payload: null\r\n        })\r\n\r\n    }\r\n\r\n\r\n    const sketchInEdit: SketchModel | null = sketches.find((sketch: SketchModel) => sketch.id === SketchIdInEdit) || null;\r\n\r\n    const sketchName = sketchInEdit ? sketchInEdit.name : '';\r\n\r\n\r\n    return (\r\n        <Box>\r\n            {SketchIdInEdit ? <Box sx={{\r\n                display: 'flex',\r\n                flexDirection: 'row',\r\n                alignItems: 'start',\r\n                justifyContent: 'start',\r\n                mb: '10px'\r\n            }}>\r\n                <Typography\r\n                    variant=\"h6\"\r\n                    noWrap\r\n                    component=\"div\"\r\n                    sx={{\r\n                        display: {\r\n                            xs: 'none',\r\n                            sm: 'block',\r\n                            fontWight: 'regular'\r\n                        }\r\n                    }}\r\n                >    &nbsp;\r\n                    {translations.Sketch} &nbsp;\r\n                    <Select dir={'rtl'} disableUnderline={true} variant={'standard'} value={SketchIdInEdit}\r\n                            sx={{\r\n                                //  color: 'black',\r\n                                fontSize: '1.25rem',\r\n                                fontWeight: 'normal'\r\n                            }}\r\n                            onChange={(event: SelectChangeEvent<any>, child: React.ReactNode) => {\r\n                                handleSketchChanged(event, child)\r\n                            }}>\r\n                        <MenuItem key={'NEW'}\r\n                                  value={'NEW'}> &nbsp; <b>{translations.CreateSketch}</b>  &nbsp;</MenuItem>\r\n                        {sketches.map((oneSketch: SketchModel) => <MenuItem key={oneSketch.id}\r\n                                                                            value={oneSketch.id}> {oneSketch.name} &nbsp; </MenuItem>)}\r\n                    </Select>\r\n                </Typography>\r\n\r\n                <IconButton\r\n                    size=\"small\"\r\n                    aria-label=\"show more\"\r\n                    aria-controls={sketchMenuId}\r\n                    aria-haspopup=\"true\"\r\n                    onClick={handleSketchMenuOpen}\r\n                    color=\"inherit\"\r\n                >\r\n                    <Edit/>\r\n                </IconButton>\r\n                <SketchesContainerMessage clickCancel={handleSketchActionCancelClick} sketch={sketchInEdit}/>\r\n\r\n\r\n            </Box> : <Button variant={'contained'} id={'sketches-create-sketch'}\r\n                             onClick={handleCreateSketch}>{translations.CreateSketch}</Button>}\r\n\r\n\r\n            <Sketch/>\r\n            <SketchMenu sketchMoreAnchorEl={sketchMoreAnchorEl} sketchMenuId={SketchIdInEdit || ''} isSketchMenuOpen={isSketchMenuOpen}\r\n                        handleSketchMenuClick={handleSketchMenuClick} handleSketchMenuClose={handleSketchMenuClose}/>\r\n            <RenameDialog open={RenameOpen} onClose={handleRenameClose} selectedValue={sketchName}/>\r\n        </Box>\r\n\r\n\r\n    )\r\n\r\n}\r\n","import Menu from '@mui/material/Menu';\r\nimport MenuItem from '@mui/material/MenuItem';\r\nimport * as React from 'react';\r\nimport {Delete, DriveFileRenameOutline, FileCopy} from '@mui/icons-material';\r\nimport {translations} from '../../services/translations';\r\nimport {LocationGroupActionType} from '../../models/LocationGroupMenuClickActionType.enum';\r\n\r\n\r\ninterface LocationGroupMenuProps {\r\n    locationGroupMoreAnchorEl: Element | ((element: Element) => Element) | null | undefined;\r\n    locationGroupMenuId: string,\r\n    isLocationGroupMenuOpen: boolean,\r\n    handleLocationGroupMenuClick: (event: React.MouseEvent<HTMLElement>, clickAction: LocationGroupActionType) => void\r\n    handleLocationGroupMenuClose: () => void,\r\n    preventDelete: boolean\r\n}\r\n\r\nexport const LocationGroupMenu = (props: LocationGroupMenuProps) => {\r\n    const {\r\n        locationGroupMoreAnchorEl,\r\n        locationGroupMenuId,\r\n        isLocationGroupMenuOpen,\r\n        handleLocationGroupMenuClick,\r\n        handleLocationGroupMenuClose,\r\n        preventDelete\r\n    } = props;\r\n    const isEditable = locationGroupMenuId !== 'ESHBAL'\r\n     \r\n    return (\r\n        <Menu\r\n            anchorEl={locationGroupMoreAnchorEl}\r\n            anchorOrigin={{\r\n                vertical: 'top',\r\n                horizontal: 'right',\r\n            }}\r\n            id={locationGroupMenuId}\r\n            keepMounted\r\n            transformOrigin={{\r\n                vertical: 'top',\r\n                horizontal: 'right',\r\n            }}\r\n            open={isLocationGroupMenuOpen}\r\n            onClose={handleLocationGroupMenuClose}\r\n        >\r\n            {isEditable ?\r\n\r\n\r\n                <MenuItem onClick={(e) => handleLocationGroupMenuClick(e, LocationGroupActionType.Rename)}>\r\n\r\n                    <DriveFileRenameOutline/>&nbsp;\r\n                    {translations.Rename}\r\n                </MenuItem>\r\n\r\n\r\n                : null}\r\n            {isEditable && !preventDelete ?\r\n                <MenuItem onClick={(e) => handleLocationGroupMenuClick(e, LocationGroupActionType.Delete)}>\r\n\r\n                    <Delete/>&nbsp;\r\n                    {translations.Delete}\r\n                </MenuItem>\r\n                : null}\r\n\r\n            <MenuItem onClick={(e) => handleLocationGroupMenuClick(e, LocationGroupActionType.CreateCopy)}>\r\n\r\n                <FileCopy/>&nbsp;\r\n                {translations.CreateCopy}\r\n            </MenuItem>\r\n\r\n\r\n        </Menu>\r\n    );\r\n\r\n\r\n}\r\n","export interface LocationModel {\r\n    id: string,\r\n    name: string,\r\n    ETA: number,\r\n    EnName: string\r\n}\r\n\r\nexport interface TransportModel {\r\n    id: string,\r\n    name: string,\r\n    comments: string,\r\n    TransportStops: RoadStopModel[],\r\n    TransportTime: string[]\r\n}\r\n\r\nexport interface RoadStopModel {\r\n    locationId: string,\r\n    minuetsFromLast: number,\r\n    position: number\r\n}\r\n\r\nexport enum RouteOrTransport {\r\n    Route = 1,\r\n    Transport = 2\r\n}\r\n\r\nexport interface RouteModel {\r\n    id: string,\r\n    name: string,\r\n    comments: string,\r\n    routStops: RoadStopModel[]\r\n}\r\n\r\nexport interface LocationGroup {\r\n\r\n    id: string,\r\n    dbId: string,\r\n    name: string,\r\n    Locations: LocationModel[],\r\n    Routes: RouteModel[],\r\n    Transports: TransportModel[]\r\n}\r\n","import * as React from 'react';\r\nimport {styled} from '@mui/material/styles';\r\nimport Tooltip, {tooltipClasses, TooltipProps} from '@mui/material/Tooltip';\r\n\r\n\r\nexport const LightTooltip = styled(({\r\n                                        className,\r\n                                        ...props\r\n                                    }: TooltipProps) => (\r\n    <Tooltip  {...props} classes={{popper: className}}/>\r\n))(({theme}) => ({\r\n    [`& .${tooltipClasses.tooltip}`]: {\r\n        backgroundColor: theme.palette.common.white,\r\n        color: 'rgba(0, 0, 0, 0.87)',\r\n        boxShadow: theme.shadows[1],\r\n        fontSize: 14,\r\n    },\r\n}));\r\n","import {Box, SxProps} from '@mui/system';\r\nimport React from 'react';\r\nimport {IconButton} from '@mui/material';\r\nimport {Delete} from '@mui/icons-material';\r\nimport {LightTooltip} from '../styled/light-tool-tip';\r\n\r\nexport interface DeleteButtonProps {\r\n    sx: SxProps,\r\n    deleteClickHandler: any,\r\n    disabled?: boolean,\r\n    toolTip?: string\r\n\r\n}\r\n\r\nexport const DeleteButton = (props: DeleteButtonProps) => {\r\n    return (\r\n        <Box>\r\n\r\n            <LightTooltip title={props?.toolTip ? props.toolTip : false}>\r\n                <IconButton aria-haspopup=\"true\" disabled={!!props?.disabled}\r\n                            id={'delete-button'} onClick={props.deleteClickHandler}\r\n                            size={'small'}\r\n                            sx={{...props.sx}}\r\n                            aria-label=\"delete\">\r\n\r\n                    <Delete/>\r\n\r\n                </IconButton>\r\n            </LightTooltip>\r\n\r\n        </Box>\r\n\r\n\r\n    )\r\n\r\n}\r\n","import {Box, Card, Typography} from '@mui/material';\r\nimport {useDispatch} from 'react-redux';\r\nimport {LocationModel} from '../../models/Location.model';\r\nimport * as React from 'react';\r\nimport {useRef, useState} from 'react';\r\nimport TextField from '@mui/material/TextField';\r\nimport {translations} from '../../services/translations';\r\nimport {DeleteButton} from '../buttons/delete-button';\r\nimport {ActionsTypes} from '../../store/types.actions';\r\nimport {LightTooltip} from '../styled/light-tool-tip';\r\n\r\ninterface LocationFormProps extends LocationModel {\r\n    onUpdate: (locationUpdate: LocationModel) => void,\r\n    isLocationNameValid: boolean,\r\n    isInEdit: boolean,\r\n    preventDelete: boolean,\r\n    usedIn: string []\r\n\r\n}\r\n\r\nconst buildCantDeleteText = (uses: string []): string => {\r\n    if (uses.length === 0) {\r\n        return translations.Delete\r\n    }\r\n    let txt = translations.cantDeleteLocation + ': '\r\n    uses.forEach((u, i) => {\r\n        if (txt.length < 80) {\r\n            if (i > 0) {\r\n                txt += ', '\r\n            }\r\n            txt += u\r\n        }\r\n    })\r\n    return txt + '.'\r\n}\r\nexport const LocationForm = (props: LocationFormProps) => {\r\n    const [wasJustEdited, setWasJustEdited] = useState<boolean>(false)\r\n    const [nameValue, setNameValue] = useState<string>(props.name)\r\n    const [etaValue, setEtaValue] = useState<number>(props.ETA);\r\n\r\n    const dispatch = useDispatch();\r\n    const valueNameRef: any = useRef('');\r\n    const valueMinutesRef: any = useRef('');\r\n\r\n    if (wasJustEdited && !props.isInEdit) {\r\n        setWasJustEdited(false);\r\n        const updatedLocation: LocationModel = {\r\n            id: props.id,\r\n            ETA: props.ETA,\r\n            name: props.name,\r\n            EnName: props.EnName\r\n\r\n        };\r\n        const refName = valueNameRef.current.value;\r\n        const refMinutes = valueMinutesRef.current.value;\r\n\r\n        updatedLocation.name = refName || updatedLocation.name;\r\n        updatedLocation.ETA = refMinutes || updatedLocation.ETA;\r\n\r\n        props.onUpdate(updatedLocation);\r\n    }\r\n\r\n\r\n    const deleteClickHandler = (event: any) => {\r\n        event.stopPropagation();\r\n        dispatch({\r\n            type: ActionsTypes.DELETE_LOCATION,\r\n            payload: {\r\n                id: props.id\r\n            }\r\n        })\r\n\r\n    }\r\n    return (\r\n\r\n        <Box sx={{display: 'flex'}}>\r\n            <Card elevation={2} sx={{\r\n                m: '0.2em',\r\n                mb: '0.3em',\r\n\r\n                cursor: 'pointer',\r\n                display: 'flex',\r\n                flexDirection: 'row',\r\n                alignItems: 'center',\r\n                justifyContent: 'start',\r\n            }}>\r\n                <Box id={'text-field-container'}\r\n                     sx={{\r\n                         m: '0.3em',\r\n                         mr: '1em',\r\n                         ml: '1em',\r\n                         display: 'flex',\r\n                         flexDirection: 'column'\r\n                     }\r\n                     }>\r\n\r\n\r\n                    <TextField\r\n\r\n                        margin=\"dense\"\r\n                        InputProps={{\r\n                            disableUnderline: !props.isInEdit,\r\n                            sx: {\r\n                                color: props.isLocationNameValid ? 'initial' : 'red'\r\n                            }\r\n                        }}\r\n\r\n                        id={'sidur-rename-dialog-text-field'}\r\n\r\n                        type=\"text\"\r\n                        variant=\"standard\"\r\n                        inputRef={valueNameRef}\r\n                        value={nameValue}\r\n\r\n                        onChange={(event) => {\r\n                            if (props.isInEdit) {\r\n                                setNameValue(event.target.value)\r\n                                setWasJustEdited(true)\r\n                            }\r\n                        }}\r\n\r\n                    />\r\n                    {props.isLocationNameValid ? '' : <Typography variant={'subtitle2'} sx={{\r\n                        fontSize: '11px',\r\n                        marginTop: '-4px',\r\n                        lineHeight: '80%',\r\n                        color: 'red'\r\n                    }}>\r\n                        {translations.nameExists}\r\n                    </Typography>}\r\n\r\n\r\n                </Box>\r\n\r\n                <Box id={'hour-field-container'}\r\n                     sx={{\r\n                         m: '0.3em',\r\n                         mr: '0.7em',\r\n                         ml: '0.7em',\r\n                         mt: '0.5em',\r\n                     }\r\n                     }>\r\n\r\n                    <TextField\r\n                        type=\"number\"\r\n                        variant=\"standard\"\r\n                        inputRef={valueMinutesRef}\r\n                        value={etaValue}\r\n                        InputProps={{\r\n                            inputProps: {\r\n                                max: 120,\r\n                                min: 10,\r\n\r\n                            },\r\n                            disableUnderline: !props.isInEdit\r\n                        }}\r\n                        onChange={(event) => {\r\n                            if (props.isInEdit) {\r\n\r\n                                setEtaValue(Number(event.target.value))\r\n                                setWasJustEdited(true)\r\n                            }\r\n                        }}\r\n\r\n                    />\r\n                </Box>\r\n                <Box id={'caption-container'} sx={{\r\n                    m: '0.2em',\r\n                    mr: '0em',\r\n                    ml: '0em',\r\n                    mt: '0.5em',\r\n                }}>\r\n\r\n                    < Typography component={'span'} variant={'caption'}>{translations.ETAtext}</Typography>\r\n\r\n                </Box>\r\n                <Box id={'caption-container'} sx={{\r\n                    width: '80px',\r\n                    height: '20px'\r\n                }}/>\r\n                <LightTooltip title={props.preventDelete ? '' : buildCantDeleteText(props.usedIn).trim()}>\r\n                    <Box>\r\n                        <DeleteButton deleteClickHandler={deleteClickHandler}\r\n                                      disabled={props.usedIn.length > 0} sx={{\r\n                            fontSize: '14px',\r\n                            visibility: props.preventDelete ? 'hidden' : 'visible'\r\n                        }}/>\r\n                    </Box>\r\n\r\n                </LightTooltip>\r\n\r\n\r\n                <Box id={'caption-container'} sx={{\r\n                    width: '5px',\r\n                    height: '20px'\r\n                }}/>\r\n            </Card>\r\n        </Box>\r\n    )\r\n}\r\n","import {Box} from '@mui/material';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {RecordBriefModel, SessionModel, SidurStore, TypeOfRecord} from '../../store/store.types';\r\nimport {LocationGroup, LocationModel} from '../../models/Location.model';\r\nimport Button from '@mui/material/Button';\r\nimport {translations} from '../../services/translations';\r\nimport * as React from 'react';\r\nimport {useState} from 'react';\r\nimport {ActionsTypes} from '../../store/types.actions';\r\nimport {LocationForm} from './location-form';\r\nimport {Styles} from '../../hoc/themes';\r\nimport TextField from '@mui/material/TextField';\r\n\r\ninterface LocationWithUses extends LocationModel {\r\n    usedIn: string[],\r\n    IsValid: boolean\r\n}\r\n\r\nexport const LocationsEdit = () => {\r\n    const locationGroupInEditId = useSelector((state: SidurStore) => state.sessionState.locationGroupInEdit);\r\n    const locationGroups: LocationGroup[] = useSelector((state: { LocationGroups: LocationGroup[] }) => state.LocationGroups || []);\r\n    const locationMainInEdit: string | null = useSelector((state: { sessionState: SessionModel }) => state.sessionState.locationMainInEdit);\r\n    const recordBriefs: RecordBriefModel [] = useSelector((state: { recordBriefs: RecordBriefModel[] }) => state.recordBriefs);\r\n\r\n    const isLocationInSidur: RecordBriefModel [] | [] = recordBriefs.filter(lb => lb.typeOfRecord === TypeOfRecord.Sidur && lb.locationGroupOrSidurId === locationGroupInEditId);\r\n    const currentLocationGroup: LocationGroup = locationGroups.find(l => l.id === locationGroupInEditId) as LocationGroup\r\n    const allRawLocations: LocationModel[] = currentLocationGroup?.Locations || [];\r\n    const routeStopsWithLocations = currentLocationGroup.Routes.map(r => {\r\n        return {\r\n            name: r.name,\r\n            locations: r.routStops.map(rs => rs.locationId)\r\n        }\r\n    })\r\n    const transportsWithLocations = currentLocationGroup.Transports.map(r => {\r\n        return {\r\n            name: r.name,\r\n            locations: r.TransportStops.map(rs => rs.locationId)\r\n        }\r\n    })\r\n    const locationsNames = allRawLocations.map(l => l.name.trim());\r\n    const setOfNames = new Set<string>();\r\n    const repeatingNames: string [] = []\r\n    locationsNames.forEach(name => {\r\n        if (setOfNames.has(name)) {\r\n            repeatingNames.push(name)\r\n        }\r\n        setOfNames.add(name)\r\n    })\r\n\r\n    const allLocations: LocationWithUses[] = allRawLocations.map(l => {\r\n            const usesRoutes = routeStopsWithLocations.filter(s => s.locations.includes(l.id)).map(s => s.name)\r\n            const usesTransports = transportsWithLocations.filter(s => s.locations.includes(l.id)).map(s => s.name)\r\n\r\n            return {\r\n                ...l,\r\n                IsValid: !repeatingNames.includes(l.name.trim()),\r\n                usedIn: usesRoutes.concat(usesTransports)\r\n            }\r\n        }\r\n    );\r\n\r\n    const [filterText, setFilterText] = useState<string>('')\r\n    const dispatch = useDispatch();\r\n    const allLocationNames = allLocations.map(l => l.name);\r\n\r\n    const handleAddLocation = () => {\r\n        setFilterText('')\r\n        dispatch({\r\n            type: ActionsTypes.ADD_NEW_LOCATION\r\n        })\r\n    }\r\n    const handleStartEditLocation = (event: any, id: string) => {\r\n        if (locationMainInEdit === id) {\r\n            return\r\n        }\r\n        dispatch({\r\n            type: ActionsTypes.START_EDIT_LOCATION,\r\n            payload: {\r\n                id\r\n            }\r\n        })\r\n    }\r\n    const handleStopEditLocation = (_event: any) => {\r\n\r\n\r\n        dispatch({\r\n            type: ActionsTypes.STOP_EDIT_LOCATION,\r\n            payload: null\r\n        })\r\n    }\r\n\r\n    const handleLocationUpdate = (updatedLocation: LocationModel) => {\r\n        // if (allLocationNames.includes(updatedLocation.name)) {\r\n        //\r\n        // }\r\n\r\n        dispatch({\r\n            type: ActionsTypes.UPDATE_LOCATION,\r\n            payload: updatedLocation\r\n        })\r\n    }\r\n    const handleFilterValueChanged = (event: any) => {\r\n        if (locationMainInEdit) {\r\n            handleStopEditLocation(null);\r\n        }\r\n        setFilterText(event.target.value);\r\n    }\r\n    const filteredLocations = filterText.trim() === '' ? allLocations.filter(l => l) :\r\n        allLocations.filter(l => l.name.includes(filterText.trim()));\r\n    filteredLocations.sort((a, b) => +a.id > +b.id ? -1 : 1)\r\n    return (<Box>\r\n            <Box sx={{...Styles.flexRow}}>\r\n                <Button variant=\"contained\" onClick={handleAddLocation} aria-label=\"add\" size=\"large\">\r\n                    {translations.addLocation}\r\n                </Button>\r\n                <Box sx={{\r\n                    width: '20px',\r\n                    height: '30px'\r\n                }}>\r\n\r\n                </Box>\r\n                <TextField\r\n                    autoFocus\r\n                    margin=\"dense\"\r\n                    id={'search-location-dialog-text-field'}\r\n                    placeholder={translations.searchLocation}\r\n                    type=\"text\"\r\n                    variant=\"standard\"\r\n                    value={filterText}\r\n                    onChange={(event) => {\r\n\r\n                        return handleFilterValueChanged(event);\r\n                    }}\r\n                    // onKeyUp={(event) => {\r\n                    //     if (event.key === 'Enter') {\r\n                    //         //   handleCloseRename()\r\n                    //     }\r\n                    // }}\r\n                />\r\n\r\n            </Box>\r\n\r\n            <Box sx={{\r\n                mt: '1em',\r\n                overflowY: 'auto',\r\n                maxHeight: '50vh',\r\n                direction: 'ltr'\r\n            }}>\r\n\r\n                <Box sx={{direction: 'rtl'}} id={'locations-container'} onBlur={handleStopEditLocation}>\r\n                    {filteredLocations.map((l: LocationWithUses, i: number) =>\r\n                        <Box key={l.id} onClick={(event) => handleStartEditLocation(event, l.id)}>\r\n\r\n                            <LocationForm preventDelete={isLocationInSidur.length > 0} isInEdit={locationMainInEdit === l.id}  {...l}\r\n                                          isLocationNameValid={l.IsValid} onUpdate={handleLocationUpdate} key={i}/>\r\n                        </Box>\r\n                    )}\r\n                </Box>\r\n            </Box>\r\n        </Box>\r\n    )\r\n}\r\n","import {Box, Card, IconButton, Select, SelectChangeEvent} from '@mui/material';\r\nimport {LocationModel, RoadStopModel, RouteModel} from '../../models/Location.model';\r\nimport * as React from 'react';\r\nimport {ActionsTypes} from '../../store/types.actions';\r\nimport {useDispatch} from 'react-redux';\r\nimport {RouteTransportEditMenu} from '../LocationsEdit/location-edit-transport-route-menu';\r\nimport {ArrowBack, Delete, Edit} from '@mui/icons-material';\r\nimport {RenameDialog} from '../Dialogs/rename-dialog';\r\nimport {ConfigService} from '../../services/config-service';\r\nimport MenuItem from '@mui/material/MenuItem';\r\nimport {translations} from '../../services/translations';\r\n\r\nexport enum RouteOrTransEditAction {\r\n    RenameRoute = 1,\r\n    DeleteRoute = 2,\r\n    CloneRoute = 3,\r\n\r\n}\r\n\r\ninterface StopModel extends RoadStopModel {\r\n    locationName: string,\r\n    minuetsFromLastCode: number\r\n}\r\n\r\ninterface LocationRouteEditProps {\r\n    route: RouteModel,\r\n    allLocations: LocationModel[]\r\n\r\n}\r\n\r\n//const routStops\r\nexport const LocationRouteEdit = (props: LocationRouteEditProps) => {\r\n    const dispatch = useDispatch();\r\n\r\n    const [RenameOpen, setRenameOpen] = React.useState(false);\r\n    const [routeMoreAnchorEl, setRouteMoreAnchorEl] =\r\n        React.useState<null | HTMLElement>(null);\r\n    const isRouteMenuOpen = Boolean(routeMoreAnchorEl);\r\n\r\n    const handleRouteMenuOpen = (event: React.MouseEvent<HTMLElement>) => {\r\n        setRouteMoreAnchorEl(event.currentTarget);\r\n    };\r\n    const sketchMenuId = 'primary-transportRoute-menu';\r\n\r\n    const handleRouteMenuClose = () => {\r\n        setRouteMoreAnchorEl(null);\r\n    };\r\n    const handleRouteMenuClick = (event: React.MouseEvent<HTMLElement>, clickAction: RouteOrTransEditAction) => {\r\n        setRouteMoreAnchorEl(null);\r\n\r\n        switch (clickAction) {\r\n\r\n            case RouteOrTransEditAction.CloneRoute:\r\n                dispatch({\r\n                    type: ActionsTypes.CLONE_ROUTE,\r\n                    payload: {id: props.route.id}\r\n                })\r\n                break;\r\n\r\n            case RouteOrTransEditAction.DeleteRoute:\r\n                dispatch({\r\n                    type: ActionsTypes.DELETE_ROUTE,\r\n                    payload: {id: props.route.id}\r\n                })\r\n                break;\r\n\r\n            case RouteOrTransEditAction.RenameRoute:\r\n                setRenameOpen(true)\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n\r\n    }\r\n\r\n    const handleRenameClose = (value: string | null) => {\r\n        setRenameOpen(false);\r\n        if (value) {\r\n            const updatedRout = {...props.route}\r\n            updatedRout.name = value;\r\n            dispatch({\r\n                type: ActionsTypes.UPDATE_ROUTE,\r\n                payload: updatedRout\r\n            })\r\n        }\r\n    };\r\n    const allStops: StopModel[] = props.route.routStops.map((r: RoadStopModel) => {\r\n        const location = props.allLocations.find(l => l.id === r.locationId)\r\n\r\n        if (location) {\r\n            const stop: StopModel = {\r\n                ...r,\r\n                locationName: location.name,\r\n                minuetsFromLastCode: r.minuetsFromLast || 30\r\n\r\n            }\r\n            return stop\r\n\r\n        } else {\r\n            return null\r\n        }\r\n    }).filter(s => s) as StopModel[];\r\n    const minutesFromLastOptions = ConfigService.Constants.RoutesMinutesOptions.map(value => ({\r\n        value: value,\r\n        text: value.toString() + ' ' + translations.min\r\n    }));\r\n    const handleRemoveLast = (_event: any) => {\r\n        const updatedRout = {...props.route};\r\n        updatedRout.routStops = [...updatedRout.routStops];\r\n        updatedRout.routStops.pop();\r\n        dispatch({\r\n            type: ActionsTypes.UPDATE_ROUTE,\r\n            payload: updatedRout\r\n        })\r\n    }\r\n    const handleDriveLengthChanged = (event: SelectChangeEvent<any>, stop: StopModel): void => {\r\n        const updatedRout = {...props.route}\r\n        // const updatedValue = minutesFromLastOptions.find(o => o.value === event.target.value)\r\n\r\n        updatedRout.routStops = updatedRout.routStops.map(s => {\r\n            if (s.locationId === stop.locationId) {\r\n                const newStop = {...s};\r\n                newStop.minuetsFromLast = event.target.value;\r\n                return newStop\r\n            }\r\n            return s\r\n        })\r\n        dispatch({\r\n            type: ActionsTypes.UPDATE_ROUTE,\r\n            payload: updatedRout\r\n        })\r\n    }\r\n    const isLongRoute: boolean = allStops?.length > 5\r\n\r\n    return (\r\n        <Box>\r\n            <Card sx={{\r\n                width: '400px',\r\n                minHeight: '300px'\r\n            }}>\r\n                <Box sx={{\r\n                    m: '1em',\r\n                    mb: '0px'\r\n                }}> <b>{props.route.name}</b>\r\n                    <IconButton\r\n                        size=\"small\"\r\n                        aria-label=\"show more\"\r\n                        aria-controls={sketchMenuId}\r\n                        aria-haspopup=\"true\"\r\n                        onClick={handleRouteMenuOpen}\r\n                        color=\"inherit\"\r\n                    ><Edit fontSize={'small'}/></IconButton>\r\n                </Box>\r\n                <Box sx={{\r\n                    pr: '1em',\r\n                    pl: '1em',\r\n                    flex: 'row',\r\n\r\n                    flexWrap: 'wrap'\r\n                }}>\r\n                    {allStops.map((stop: StopModel, i: number) => (<Box key={stop.locationId + i.toString()} sx={{\r\n                        display: isLongRoute ? 'inline' : 'block',\r\n                        p: '0.1em',\r\n\r\n                    }}>\r\n\r\n\r\n                        {i > 0 ? <><Select disableUnderline={true} variant={'standard'} value={stop.minuetsFromLastCode}\r\n                                           sx={{\r\n                                               //  color: 'black',\r\n                                               //  fontSize: '1.25rem',\r\n                                               fontWeight: 'normal'\r\n                                           }}\r\n                                           onChange={(event: SelectChangeEvent<any>, _child: React.ReactNode) => {\r\n                                               handleDriveLengthChanged(event, stop)\r\n                                           }}>\r\n                            {minutesFromLastOptions.map((option) => <MenuItem key={option.value}\r\n                                                                              value={option.value}> {option.text}  &nbsp;&nbsp; </MenuItem>)}\r\n                        </Select> <Box sx={{\r\n                            width: isLongRoute ? '15px' : '5px',\r\n                            height: '5px',\r\n                            display: 'inline-flex'\r\n                        }}/>\r\n                            <ArrowBack sx={{mb: '-5px'}} fontSize={'small'}/>\r\n                            <Box sx={{\r\n                                width: '15px',\r\n                                height: '5px',\r\n                                display: 'inline-flex'\r\n                            }}/></> : null}\r\n                        <Card sx={{\r\n                            maxWidth: '100px',\r\n                            display: 'inline-flex',\r\n                            p: '4px'\r\n                        }}>{\r\n                            stop.locationName\r\n                        } </Card>\r\n\r\n\r\n                        <Box sx={{\r\n                            width: '15px',\r\n                            height: '5px',\r\n                            display: 'inline-flex',\r\n                            mb: isLongRoute ? '1.3em' : '1.6em'\r\n                        }}/>\r\n                        {i + 1 === allStops.length ? <IconButton size=\"small\"\r\n                                                                 onClick={handleRemoveLast}\r\n                                                                 color=\"inherit\"\r\n                        ><Delete fontSize={'small'}/> </IconButton> : <ArrowBack sx={{mb: '-5px'}} fontSize={'small'}/>}\r\n\r\n                    </Box>))}\r\n                </Box>\r\n\r\n            </Card>\r\n            <RouteTransportEditMenu routeMoreAnchorEl={routeMoreAnchorEl} routeMenuId={props.route.id} isRouteMenuOpen={isRouteMenuOpen}\r\n                                    handleRouteMenuClick={handleRouteMenuClick} handleRouteMenuClose={handleRouteMenuClose}/>\r\n            <RenameDialog open={RenameOpen} onClose={handleRenameClose} selectedValue={props.route.name}/>\r\n\r\n        </Box>\r\n    )\r\n}\r\n","import {Box, Card} from '@mui/material';\r\nimport {LocationModel} from '../../models/Location.model';\r\nimport * as React from 'react';\r\nimport {useState} from 'react';\r\nimport {ConfigService} from '../../services/config-service';\r\nimport {Home} from '@mui/icons-material';\r\n\r\ninterface LocationFormProps extends LocationModel {\r\n    onClick: (locationUpdate: LocationModel) => void,\r\n}\r\n\r\nexport const LocationChooseButton = (props: LocationFormProps) => {\r\n\r\n    const justLocationObject = {\r\n        ...props,\r\n        onClick: null\r\n    }\r\n    const [inHover, setInHover] = useState(false);\r\n    const onMouseOver = () => {\r\n        setInHover(true)\r\n    };\r\n    const onMouseOut = () => {\r\n        setInHover(false)\r\n    };\r\n    const isHome: boolean = props.id === ConfigService.Constants.HomeLocationId\r\n\r\n    return (\r\n\r\n        <Box sx={{display: 'flex'}}>\r\n            <Card sx={{\r\n                m: '0.2em',\r\n                mb: '0.3em',\r\n                minWidth: '200px',\r\n                cursor: 'pointer',\r\n                display: 'flex',\r\n                flexDirection: 'row',\r\n                alignItems: 'center',\r\n                justifyContent: 'start',\r\n                backgroundColor: inHover ? '#e7f2f7' : '',\r\n            }} onMouseOver={onMouseOver}\r\n                  onMouseOut={onMouseOut} elevation={inHover ? 6 : 2} onClick={(_event) => props.onClick(justLocationObject)}>\r\n                {isHome ? <Box sx={{\r\n                    p: '0px',\r\n                    display: 'inline-flex'\r\n                }}> <Box id={'divider'} sx={{\r\n                    'width': '20px',\r\n                    'height': '20px'\r\n                }}/> <Home sx={{\r\n                    m: '0px',\r\n                    p: 0,\r\n                    mr: '-10px',\r\n                    ml: '-10px'\r\n                }}/></Box> : null}\r\n                <Box id={'text-field-container'}\r\n                     sx={{\r\n                         m: '0.5em',\r\n                         mr: '1em',\r\n                         ml: '1em',\r\n                     }\r\n                     }>\r\n\r\n\r\n                    {props.name}\r\n\r\n                </Box>\r\n\r\n\r\n            </Card>\r\n        </Box>\r\n    )\r\n}\r\n","import Menu from '@mui/material/Menu';\r\nimport MenuItem from '@mui/material/MenuItem';\r\nimport * as React from 'react';\r\nimport {Delete, DriveFileRenameOutline, FileCopy} from '@mui/icons-material';\r\nimport {translations} from '../../services/translations';\r\nimport {RouteOrTransEditAction} from '../LocationsEditRoutes/location-route-edit';\r\n\r\n\r\ninterface LocationEditMenuProps {\r\n    routeMoreAnchorEl: Element | ((element: Element) => Element) | null | undefined;\r\n    routeMenuId: string,\r\n    isRouteMenuOpen: boolean,\r\n    handleRouteMenuClick: (event: React.MouseEvent<HTMLElement>, clickAction: any) => void\r\n    handleRouteMenuClose: () => void\r\n}\r\n\r\nexport const RouteTransportEditMenu = (props: LocationEditMenuProps) => {\r\n    const {\r\n        routeMoreAnchorEl,\r\n        routeMenuId,\r\n        isRouteMenuOpen,\r\n        handleRouteMenuClick,\r\n        handleRouteMenuClose\r\n    } = props;\r\n    return (\r\n        <Menu\r\n            anchorEl={routeMoreAnchorEl}\r\n            anchorOrigin={{\r\n                vertical: 'top',\r\n                horizontal: 'right',\r\n            }}\r\n            id={routeMenuId}\r\n            keepMounted\r\n            transformOrigin={{\r\n                vertical: 'top',\r\n                horizontal: 'right',\r\n            }}\r\n            open={isRouteMenuOpen}\r\n            onClose={handleRouteMenuClose}\r\n        >\r\n\r\n            <MenuItem onClick={(e) => handleRouteMenuClick(e, RouteOrTransEditAction.RenameRoute)}>\r\n\r\n                <DriveFileRenameOutline/>&nbsp;\r\n                {translations.Rename}\r\n            </MenuItem>\r\n            <MenuItem onClick={(e) => handleRouteMenuClick(e, RouteOrTransEditAction.DeleteRoute)}>\r\n\r\n                <Delete/>&nbsp;\r\n                {translations.Delete}\r\n            </MenuItem>\r\n            <MenuItem onClick={(e) => handleRouteMenuClick(e, RouteOrTransEditAction.CloneRoute)}>\r\n\r\n                <FileCopy/>&nbsp;\r\n                {translations.CreateCopy}\r\n            </MenuItem>\r\n\r\n\r\n        </Menu>\r\n    );\r\n\r\n\r\n}\r\n","import {Box, Card, IconButton, Select, SelectChangeEvent} from '@mui/material';\r\nimport {LocationModel, RoadStopModel, TransportModel} from '../../models/Location.model';\r\nimport * as React from 'react';\r\nimport {ActionsTypes} from '../../store/types.actions';\r\nimport {useDispatch} from 'react-redux';\r\n\r\nimport {Delete, DirectionsBusFilled, Edit, LocationOn} from '@mui/icons-material';\r\nimport {RenameDialog} from '../Dialogs/rename-dialog';\r\nimport {ConfigService} from '../../services/config-service';\r\nimport MenuItem from '@mui/material/MenuItem';\r\nimport {translations} from '../../services/translations';\r\nimport {RouteTransportEditMenu} from '../LocationsEdit/location-edit-transport-route-menu';\r\nimport Button from '@mui/material/Button';\r\nimport {TransportScheduleDialog} from '../Dialogs/transport-schedual-dialog';\r\n\r\nexport enum RouteOrTransEditAction {\r\n    RenameRoute = 1,\r\n    DeleteRoute = 2,\r\n    CloneRoute = 3,\r\n\r\n}\r\n\r\ninterface StopModel extends RoadStopModel {\r\n    locationName: string,\r\n    minuetsFromLastCode: number\r\n}\r\n\r\ninterface LocationRouteEditProps {\r\n    transportRoute: TransportModel,\r\n    allLocations: LocationModel[]\r\n\r\n}\r\n\r\nconst maxHoursToSHow = 6;\r\n//const TransportStops\r\nexport const LocationTransportEdit = (props: LocationRouteEditProps) => {\r\n    const dispatch = useDispatch();\r\n    const [RenameOpen, setRenameOpen] = React.useState(false);\r\n    const [scheduleOpen, setScheduleOpen] = React.useState(false);\r\n    const [routeMoreAnchorEl, setRouteMoreAnchorEl] =\r\n        React.useState<null | HTMLElement>(null);\r\n    const isRouteMenuOpen = Boolean(routeMoreAnchorEl);\r\n\r\n    const handleRouteMenuOpen = (event: React.MouseEvent<HTMLElement>) => {\r\n        setRouteMoreAnchorEl(event.currentTarget);\r\n    };\r\n    const sketchMenuId = 'primary-transport-menu';\r\n    const handleEditTransportTimes = (_event: any) => {\r\n        setScheduleOpen(true)\r\n    }\r\n    const handleRouteMenuClose = () => {\r\n        setRouteMoreAnchorEl(null);\r\n    };\r\n    const handleRouteMenuClick = (event: React.MouseEvent<HTMLElement>, clickAction: RouteOrTransEditAction) => {\r\n        setRouteMoreAnchorEl(null);\r\n\r\n        switch (clickAction) {\r\n\r\n            case RouteOrTransEditAction.CloneRoute:\r\n                dispatch({\r\n                    type: ActionsTypes.CLONE_TRANSPORT,\r\n                    payload: {id: props.transportRoute.id}\r\n                })\r\n                break;\r\n\r\n            case RouteOrTransEditAction.DeleteRoute:\r\n                dispatch({\r\n                    type: ActionsTypes.DELETE_TRANSPORT,\r\n                    payload: {id: props.transportRoute.id}\r\n                })\r\n                break;\r\n\r\n            case RouteOrTransEditAction.RenameRoute:\r\n                setRenameOpen(true)\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n\r\n    }\r\n    const handleScheduleClose = (value: any) => {\r\n        setScheduleOpen(false)\r\n        if (value && value.length) {\r\n            const updatedRout = {...props.transportRoute}\r\n            updatedRout.TransportTime = value;\r\n            dispatch({\r\n                type: ActionsTypes.UPDATE_TRANSPORT,\r\n                payload: updatedRout\r\n            })\r\n        }\r\n    }\r\n    const handleRenameClose = (value: string | null) => {\r\n        setRenameOpen(false);\r\n        if (value) {\r\n            const updatedRout = {...props.transportRoute}\r\n            updatedRout.name = value;\r\n            dispatch({\r\n                type: ActionsTypes.UPDATE_TRANSPORT,\r\n                payload: updatedRout\r\n            })\r\n        }\r\n    };\r\n    const allStops: StopModel[] = props.transportRoute.TransportStops.map((r: RoadStopModel) => {\r\n        const location = props.allLocations.find(l => l.id === r.locationId)\r\n\r\n        if (location) {\r\n            const stop: StopModel = {\r\n                ...r,\r\n                locationName: location.name,\r\n                minuetsFromLastCode: r.minuetsFromLast || 30\r\n\r\n            }\r\n            return stop\r\n\r\n        } else {\r\n            return null\r\n        }\r\n    }).filter(s => s) as StopModel[];\r\n    const minutesFromLastOptions = ConfigService.Constants.RoutesMinutesOptions.map(value => ({\r\n        value: value,\r\n        text: value.toString() + ' ' + translations.min\r\n    }));\r\n    const handleRemoveLast = (_event: any) => {\r\n        const updatedRout = {...props.transportRoute}\r\n        updatedRout.TransportStops = [...updatedRout.TransportStops]\r\n        updatedRout.TransportStops.pop();\r\n        dispatch({\r\n            type: ActionsTypes.UPDATE_TRANSPORT,\r\n            payload: updatedRout\r\n        })\r\n    }\r\n    const handleDriveLengthChanged = (event: SelectChangeEvent<any>, stop: StopModel): void => {\r\n        const updatedRout = {...props.transportRoute}\r\n        // const updatedValue = minutesFromLastOptions.find(o => o.value === event.target.value)\r\n\r\n        updatedRout.TransportStops = updatedRout.TransportStops.map(s => {\r\n            if (s.locationId === stop.locationId) {\r\n                const newStop = {...s};\r\n                newStop.minuetsFromLast = event.target.value;\r\n                return newStop\r\n            }\r\n            return s\r\n        })\r\n        dispatch({\r\n            type: ActionsTypes.UPDATE_TRANSPORT,\r\n            payload: updatedRout\r\n        })\r\n    }\r\n    const isLongRoute: boolean = allStops?.length > 5\r\n    const timeTableBrief = props.transportRoute.TransportTime?.filter((t, i) => i < maxHoursToSHow ? t : '') || [];\r\n\r\n    return (\r\n        <Box>\r\n            <Card sx={{\r\n\r\n                height: '300px',\r\n                display: 'flex',\r\n                flexDirection: 'row'\r\n            }}>\r\n                <Box sx={{\r\n                    width: '400px',\r\n                    display: 'flex',\r\n                    flexDirection: 'column'\r\n                }}>\r\n                    <Box sx={{\r\n                        m: '1em',\r\n                        mb: '0px'\r\n                    }}> <b>{props.transportRoute.name}</b>\r\n                        <IconButton\r\n                            size=\"small\"\r\n                            aria-label=\"show more\"\r\n                            aria-controls={sketchMenuId}\r\n                            aria-haspopup=\"true\"\r\n                            onClick={handleRouteMenuOpen}\r\n                            color=\"inherit\"\r\n                        ><Edit fontSize={'small'}/></IconButton>\r\n                    </Box>\r\n                    <Box sx={{\r\n                        pr: '1em',\r\n                        pl: '1em',\r\n                        flex: 'row',\r\n\r\n                        flexWrap: 'wrap'\r\n                    }}>\r\n\r\n                        {allStops.map((stop: StopModel, i: number) => (<Box sx={{\r\n                            display: isLongRoute ? 'inline' : 'block',\r\n                            p: '0.1em',\r\n\r\n                        }} key={'stop.locationId' + stop.locationId + i.toString()}>\r\n\r\n\r\n                            {i > 0 ? <><Select disableUnderline={true} variant={'standard'} value={stop.minuetsFromLastCode}\r\n                                               sx={{\r\n                                                   //  color: 'black',\r\n                                                   //  fontSize: '1.25rem',\r\n                                                   fontWeight: 'normal'\r\n                                               }}\r\n                                               onChange={(event: SelectChangeEvent<any>, _child: React.ReactNode) => {\r\n                                                   handleDriveLengthChanged(event, stop)\r\n                                               }}>\r\n                                {minutesFromLastOptions.map((option, i) => <MenuItem key={'option.value' + option.value + i.toString()}\r\n                                                                                     value={option.value}> {option.text}  &nbsp;&nbsp; </MenuItem>)}\r\n                            </Select> <Box sx={{\r\n                                width: isLongRoute ? '15px' : '5px',\r\n                                height: '5px',\r\n                                display: 'inline-flex'\r\n                            }}/>\r\n\r\n                            </> : null}\r\n                            {i === 0 ? <DirectionsBusFilled sx={{mb: '-5px'}} fontSize={'small'}/> :\r\n                                <LocationOn sx={{mb: '-5px'}} fontSize={'small'}/>}\r\n                            <Box sx={{\r\n                                width: '15px',\r\n                                height: '5px',\r\n                                display: 'inline-flex'\r\n                            }}/>\r\n\r\n\r\n                            <Card sx={{\r\n                                maxWidth: '100px',\r\n                                display: 'inline-flex',\r\n                                p: '4px'\r\n                            }}>{\r\n                                stop.locationName\r\n                            } </Card>\r\n\r\n\r\n                            <Box sx={{\r\n                                width: '15px',\r\n                                height: '5px',\r\n                                display: 'inline-flex',\r\n                                mb: isLongRoute ? '1.3em' : '1.6em'\r\n                            }}/>\r\n                            {i + 1 === allStops.length ? <IconButton size=\"small\"\r\n                                                                     onClick={handleRemoveLast}\r\n                                                                     color=\"inherit\"\r\n                            ><Delete fontSize={'small'}/> </IconButton> : null}\r\n\r\n                        </Box>))}\r\n                    </Box>\r\n                </Box>\r\n                <hr/>\r\n\r\n\r\n                <Box sx={{\r\n\r\n                    flexDirection: 'column',\r\n                    alignItems: 'center',\r\n                    justifyContent: 'center'\r\n                }}>\r\n                    <Box sx={{\r\n                        m: '1em',\r\n                        width: '100px',\r\n                        display: 'flex',\r\n                        flexDirection: 'column',\r\n                        alignItems: 'center'\r\n                        // mb: '0px'\r\n                    }}> <b>{translations.exitTime}</b>\r\n                        <Button sx={{\r\n                            mb: '0.3em',\r\n                            mt: '0.3em'\r\n                        }} variant=\"contained\" onClick={handleEditTransportTimes} aria-label=\"add\" size=\"small\">\r\n                            {translations.editTimeStarts}\r\n                        </Button>\r\n                        {timeTableBrief.map((t, i) => (<Box key={'props.transportRoute.id' + i.toString() + props.transportRoute.id} sx={{\r\n                            m: '1em',\r\n                            mb: '5px',\r\n                            mt: '5px',\r\n                            fontSize: 'large'\r\n\r\n                        }}>\r\n                            {(i + 1) === maxHoursToSHow ? '...' : t}\r\n                        </Box>))}\r\n\r\n                    </Box>\r\n\r\n\r\n                </Box>\r\n\r\n            </Card>\r\n            <RouteTransportEditMenu routeMoreAnchorEl={routeMoreAnchorEl} routeMenuId={props.transportRoute.id}\r\n                                    isRouteMenuOpen={isRouteMenuOpen}\r\n                                    handleRouteMenuClick={handleRouteMenuClick} handleRouteMenuClose={handleRouteMenuClose}/>\r\n            <RenameDialog key={'RenameDialog.transportRoute.id' + props.transportRoute.id} open={RenameOpen} onClose={handleRenameClose}\r\n                          selectedValue={props.transportRoute.name}/>\r\n            <TransportScheduleDialog key={'TransportScheduleDialog.transportRoute.id' + props.transportRoute.id} open={scheduleOpen}\r\n                                     onClose={handleScheduleClose}\r\n                                     transport={props.transportRoute}/>\r\n        </Box>\r\n    )\r\n}\r\n","import {Box, Card} from '@mui/material';\r\nimport {RouteModel, RouteOrTransport, TransportModel} from '../../models/Location.model';\r\nimport * as React from 'react';\r\nimport {useState} from 'react';\r\n\r\n\r\ninterface LocationRouteChooseRouteEditProps {\r\n    route: RouteModel | TransportModel;\r\n    routeClicked: (routeId: string) => void;\r\n    routeOrTransport: RouteOrTransport;\r\n\r\n}\r\n\r\nexport const LocationRouteTransportChoose = (props: LocationRouteChooseRouteEditProps) => {\r\n\r\n    const [inHover, setInHover] = useState(false);\r\n\r\n    const onMouseOver = () => {\r\n        setInHover(true)\r\n    };\r\n    const onMouseOut = () => {\r\n        setInHover(false)\r\n    };\r\n    const width = props.routeOrTransport === RouteOrTransport.Route ? '400px' : '200px';\r\n    return (\r\n        <Box sx={{m: '0.6em'}}>\r\n            <Card sx={{\r\n                width: width,\r\n                p: '0.6em',\r\n                cursor: 'pointer',\r\n            }} onClick={() => props.routeClicked(props.route.id)}\r\n                  onMouseOver={onMouseOver}\r\n                  onMouseOut={onMouseOut} elevation={inHover ? 6 : 2}>\r\n                {props.route.name}\r\n            </Card>\r\n\r\n        </Box>\r\n    )\r\n}\r\n","import {Box} from '@mui/material';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {SessionModel, SidurStore} from '../../store/store.types';\r\nimport {LocationGroup, LocationModel, RouteModel, RouteOrTransport} from '../../models/Location.model';\r\nimport {translations} from '../../services/translations';\r\nimport * as React from 'react';\r\nimport {useState} from 'react';\r\nimport {ActionsTypes} from '../../store/types.actions';\r\nimport {Styles} from '../../hoc/themes';\r\nimport TextField from '@mui/material/TextField';\r\nimport {LocationChooseButton} from '../LocationsEdit/location-choose-button';\r\nimport Button from '@mui/material/Button';\r\nimport {LocationRouteEdit} from './location-route-edit';\r\nimport {LocationRouteTransportChoose} from '../LocationsEdit/location-route-transport-choose';\r\n\r\nexport const LocationsRoutesEditWrapper = () => {\r\n    const locationGroupInEditId = useSelector((state: SidurStore) => state.sessionState.locationGroupInEdit);\r\n    const routeIdInEdit = useSelector((state: SidurStore) => state.sessionState.routeIdInEdit);\r\n    const locationGroups: LocationGroup[] = useSelector((state: { LocationGroups: LocationGroup[] }) => state.LocationGroups || []);\r\n    const locationMainInEdit: string | null = useSelector((state: { sessionState: SessionModel }) => state.sessionState.locationMainInEdit);\r\n    const currentLocationGroup: LocationGroup | undefined = locationGroups.find(l => l.id === locationGroupInEditId) as LocationGroup\r\n    const allLocations: LocationModel[] = currentLocationGroup?.Locations || [];\r\n    const allRoutes: RouteModel[] = currentLocationGroup?.Routes || [];\r\n\r\n    const [filterLocationText, setFilterLocationText] = useState<string>('')\r\n    const [filterRouteText, setFilterRouteText] = useState<string>('')\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const handleAddRoute = () => {\r\n        setFilterLocationText('')\r\n        dispatch({\r\n            type: ActionsTypes.ADD_NEW_ROUTE\r\n        })\r\n    }\r\n    const handleAddLocationToRoute = (location: LocationModel) => {\r\n        dispatch({\r\n            type: ActionsTypes.ADD_LOCATION_TO_ROUTE,\r\n            payload: location\r\n        })\r\n    }\r\n    const handleFilterLocationValueChanged = (event: any) => {\r\n        setFilterLocationText(event.target.value);\r\n    }\r\n    const handleFilterRouteValueChanged = (event: any) => {\r\n        if (locationMainInEdit) {\r\n            // handleStopEditLocation(null);\r\n        }\r\n        setFilterRouteText(event.target.value);\r\n    }\r\n    const routeClickedHandler = (routId: string) => {\r\n        if (routeIdInEdit !== routId) {\r\n            dispatch(\r\n                {\r\n                    type: ActionsTypes.START_EDIT_ROUTE,\r\n                    payload: {id: routId}\r\n                }\r\n            )\r\n        }\r\n    }\r\n\r\n    const routInEdit: RouteModel | undefined = currentLocationGroup.Routes.find(r => r.id === routeIdInEdit);\r\n    const filteredLocationsBeforeRouteCalc = filterLocationText.trim() === '' ? allLocations.filter(l => l) :\r\n        allLocations.filter(l => l.name.includes(filterLocationText.trim()));\r\n    const routInEditLocations: string [] = routInEdit ? routInEdit.routStops.map(rs => rs.locationId) : [];\r\n\r\n    const filteredLocations = filteredLocationsBeforeRouteCalc.filter(l => !routInEditLocations.includes(l.id));\r\n    filteredLocations.sort((a, b) => +a.id > +b.id ? -1 : 1)\r\n\r\n\r\n    const filteredRoutes = filterRouteText.trim() === '' ? allRoutes.filter(l => l) :\r\n        allRoutes.filter(l => l.name.includes(filterRouteText.trim()));\r\n    filteredRoutes.sort((a, b) => +a.id > +b.id ? -1 : 1)\r\n\r\n    return (<Box sx={{...Styles.flexRow}}>\r\n            <Box sx={{...Styles.flexCol}}>\r\n                <Box sx={{...Styles.flexRow}}>\r\n\r\n                    <TextField\r\n                        autoFocus\r\n                        margin=\"dense\"\r\n                        id={'search-location-dialog-text-field'}\r\n                        placeholder={translations.searchLocation}\r\n                        type=\"text\"\r\n                        variant=\"standard\"\r\n                        value={filterLocationText}\r\n                        onChange={(event) => {\r\n\r\n                            return handleFilterLocationValueChanged(event);\r\n                        }}\r\n\r\n                    />\r\n\r\n                </Box>\r\n\r\n                <Box sx={{\r\n                    mt: '1em',\r\n                    overflowY: 'auto',\r\n                    maxHeight: '50vh',\r\n                    direction: 'ltr'\r\n                }}>\r\n\r\n                    <Box sx={{direction: 'rtl'}} id={'locations-container'}>\r\n                        {filteredLocations.map((l: LocationModel, i: number) =>\r\n                            <Box key={l.id}>\r\n\r\n                                <LocationChooseButton    {...l} onClick={handleAddLocationToRoute} key={i}/>\r\n                            </Box>\r\n                        )}\r\n                    </Box>\r\n\r\n                </Box>\r\n            </Box>\r\n            <Box sx={{\r\n                ...Styles.flexCol,\r\n                m: '1em',\r\n                mt: '0'\r\n            }}>\r\n                <Box sx={{...Styles.flexRow}}>\r\n                    <Button variant=\"contained\" onClick={handleAddRoute} aria-label=\"add\" size=\"large\">\r\n                        {translations.addRoute}\r\n                    </Button>\r\n                    <Box sx={{\r\n                        width: '20px',\r\n                        height: '30px'\r\n                    }}/>\r\n                    <TextField\r\n                        autoFocus\r\n                        margin=\"dense\"\r\n                        id={'search-location-dialog-text-field'}\r\n                        placeholder={translations.searchRoute}\r\n                        type=\"text\"\r\n                        variant=\"standard\"\r\n                        value={filterRouteText}\r\n                        onChange={(event) => {\r\n\r\n                            return handleFilterRouteValueChanged(event);\r\n                        }}\r\n\r\n                    />\r\n                </Box>\r\n\r\n                <Box sx={{\r\n                    height: '10px',\r\n                    width: '20px'\r\n                }}/>\r\n                {routInEdit ?\r\n                    <LocationRouteEdit allLocations={allLocations} route={routInEdit}/> : null}\r\n            </Box>\r\n            <Box sx={{...Styles.flexCol}}>\r\n                <Box sx={{\r\n                    mt: '1em',\r\n                    overflowY: 'auto',\r\n                    maxHeight: '50vh',\r\n                    direction: 'ltr'\r\n                }}>\r\n                    <Box sx={{direction: 'rtl'}} id={'routes-container'}>\r\n                        {filteredRoutes.map((r: RouteModel) => (\r\n                            <LocationRouteTransportChoose key={r.id} route={r} routeOrTransport={RouteOrTransport.Route}\r\n                                                          routeClicked={routeClickedHandler}/>))}\r\n                    </Box>\r\n                </Box>\r\n            </Box>\r\n\r\n        </Box>\r\n    )\r\n}\r\n","import * as React from 'react';\r\nimport {useState} from 'react';\r\nimport Button from '@mui/material/Button';\r\nimport TextField from '@mui/material/TextField';\r\nimport Dialog from '@mui/material/Dialog';\r\nimport DialogActions from '@mui/material/DialogActions';\r\nimport DialogContent from '@mui/material/DialogContent';\r\nimport DialogTitle from '@mui/material/DialogTitle';\r\nimport {translations} from '../../services/translations';\r\nimport {TransportModel} from '../../models/Location.model';\r\nimport {Theme} from '@mui/system';\r\nimport {Box, IconButton} from '@mui/material';\r\nimport {Delete} from '@mui/icons-material';\r\n\r\ninterface RenameProps {\r\n    open: boolean;\r\n    transport: TransportModel;\r\n    onClose: (value: string [] | null) => void;\r\n}\r\n\r\nexport const TransportScheduleDialog = (props: RenameProps) => {\r\n    // const [open, setOpen] = React.useState(false);\r\n    const {\r\n        onClose,\r\n        transport,\r\n        open\r\n    } = props;\r\n    const sxRoot = {\r\n        direction: (theme: Theme) => theme.direction,\r\n        '& .MuiFormLabel-root': {\r\n            left: 'inherit'\r\n        },\r\n        '& .MuiInputBase-input': {\r\n            // padding: '10px'\r\n        }\r\n    }\r\n    const emptyValues = ['', '', '', '', ''];\r\n    const transportTimes = transport.TransportTime || []\r\n    const allTimes = transportTimes.concat(emptyValues);\r\n\r\n    const [hourValues, setHourValues] = useState(allTimes)\r\n    const handleCloseCancel = () => {\r\n        onClose(null);\r\n    };\r\n    const handleCloseHours = () => {\r\n        onClose(hourValues.filter(v => v && v.length && v.trim()));\r\n    };\r\n    const handleAddHours = () => {\r\n        setHourValues(hourValues.concat(emptyValues))\r\n    }\r\n\r\n\r\n    const onChangeHour = (changeEvent: React.ChangeEvent<HTMLInputElement>, index: number) => {\r\n        const newHourValues = [...hourValues];\r\n        const newValue = changeEvent.target.value;\r\n        const changedHourValues = newHourValues.map((h: string, i: number) => i === index ? newValue : h)\r\n        if (newValue) {\r\n            setHourValues(changedHourValues)\r\n\r\n        }\r\n\r\n    }\r\n    const onDeleteHour = (index: number) => {\r\n        const newHourValues = [...hourValues];\r\n        const newValue = ' ';\r\n        const changedHourValues = newHourValues.map((h: string, i: number) => i === index ? newValue : h)\r\n        if (newValue) {\r\n            setHourValues(changedHourValues)\r\n\r\n        }\r\n\r\n    }\r\n\r\n    return (\r\n        <div>\r\n\r\n            <Dialog open={open} onClose={handleCloseCancel}>\r\n                <DialogTitle> {transport.name + ' ' + translations.exitTime + ':'}</DialogTitle>\r\n                <DialogContent>\r\n                    <Box sx={{\r\n                        display: 'flex',\r\n                        flexDirection: 'column'\r\n                    }}>\r\n                        <Box sx={{\r\n                            'display': 'flex',\r\n                            flexDirection: 'row',\r\n                            flexWrap: 'wrap'\r\n                        }}>\r\n                            {hourValues.map((s: string, i: number) => (\r\n                                <Box key={'hourValues' + i.toString()} sx={{'display': 'inline-flex'}}>\r\n\r\n                                    <Box id={'divider-hours'} sx={{\r\n                                        width: '55px',\r\n                                        height: '20px'\r\n                                    }}/>\r\n\r\n                                    <IconButton size=\"small\"\r\n                                                onClick={(_e) => onDeleteHour(i)}\r\n                                                color=\"inherit\"\r\n                                    ><Delete fontSize={'small'}/> </IconButton>\r\n                                    <TextField variant={'standard'}\r\n                                               sx={{...sxRoot}}\r\n                                               type=\"time\"\r\n                                               value={s}\r\n                                               onChange={(event: React.ChangeEvent<HTMLInputElement>) => onChangeHour(event, i)}/>\r\n                                </Box>))}\r\n                        </Box>\r\n                        <Button sx={{\r\n                            maxWidth: '100%',\r\n                            mt: '1em',\r\n                            alignSelf: 'center'\r\n                        }} variant=\"contained\" onClick={handleAddHours} aria-label=\"add\" size=\"medium\">\r\n                            &nbsp;&nbsp;&nbsp; {translations.addHours}&nbsp;&nbsp;&nbsp;\r\n                        </Button>\r\n                    </Box>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button id={'sidur-rename-cancel-button'} onClick={handleCloseCancel}>{translations.Cancel}</Button>\r\n                    <Button id={'sidur-rename-approve-button'} onClick={handleCloseHours}>{translations.Approve}</Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n        </div>\r\n    );\r\n}\r\n","import {Box} from '@mui/material';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {SessionModel, SidurStore} from '../../store/store.types';\r\nimport {LocationGroup, LocationModel, RouteOrTransport, TransportModel} from '../../models/Location.model';\r\nimport {translations} from '../../services/translations';\r\nimport * as React from 'react';\r\nimport {useState} from 'react';\r\nimport {ActionsTypes} from '../../store/types.actions';\r\nimport {Styles} from '../../hoc/themes';\r\nimport TextField from '@mui/material/TextField';\r\nimport {LocationChooseButton} from '../LocationsEdit/location-choose-button';\r\nimport Button from '@mui/material/Button';\r\nimport {LocationTransportEdit} from './location-transport-edit';\r\nimport {LocationRouteTransportChoose} from '../LocationsEdit/location-route-transport-choose';\r\nimport {ConfigService} from '../../services/config-service';\r\n\r\nexport const LocationsTransportEditWrapper = () => {\r\n    const locationGroupInEditId = useSelector((state: SidurStore) => state.sessionState.locationGroupInEdit);\r\n    const transportRouteIdInEdit = useSelector((state: SidurStore) => state.sessionState.transportIdInEdit);\r\n    const locationGroups: LocationGroup[] = useSelector((state: { LocationGroups: LocationGroup[] }) => state.LocationGroups || []);\r\n    const locationMainInEdit: string | null = useSelector((state: { sessionState: SessionModel }) => state.sessionState.locationMainInEdit);\r\n    const currentLocationGroup: LocationGroup | undefined = locationGroups.find(l => l.id === locationGroupInEditId) as LocationGroup\r\n    const allLocationsFromStore: LocationModel[] = currentLocationGroup?.Locations || [];\r\n    const allTransportRoutes: TransportModel[] = currentLocationGroup?.Transports || [];\r\n    const [filterLocationText, setFilterLocationText] = useState<string>('')\r\n    const [filterRouteText, setFilterRouteText] = useState<string>('')\r\n    const HomeLocation: LocationModel = ConfigService.Constants.HomeLocation;\r\n\r\n    const allLocations = [...allLocationsFromStore];\r\n    if (allLocations.length) {\r\n        allLocations.unshift(HomeLocation)\r\n    }\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const handleAddRoute = () => {\r\n        setFilterLocationText('')\r\n        dispatch({\r\n            type: ActionsTypes.ADD_NEW_TRANSPORT\r\n        })\r\n    }\r\n    const handleAddLocationToRoute = (location: LocationModel) => {\r\n        dispatch({\r\n            type: ActionsTypes.ADD_LOCATION_TO_TRANSPORT,\r\n            payload: location\r\n        })\r\n    }\r\n\r\n    const handleFilterLocationValueChanged = (event: any) => {\r\n        setFilterLocationText(event.target.value);\r\n    }\r\n    const handleFilterRouteValueChanged = (event: any) => {\r\n        if (locationMainInEdit) {\r\n            // handleStopEditLocation(null);\r\n        }\r\n        setFilterRouteText(event.target.value);\r\n    }\r\n    const routeClickedHandler = (routId: string) => {\r\n        if (transportRouteIdInEdit !== routId) {\r\n            dispatch(\r\n                {\r\n                    type: ActionsTypes.START_EDIT_TRANSPORT,\r\n                    payload: {id: routId}\r\n                }\r\n            )\r\n        }\r\n    }\r\n\r\n    const transportRoutInEdit: TransportModel | undefined = currentLocationGroup.Transports.find(r => r.id === transportRouteIdInEdit);\r\n    const filteredLocationsBeforeRouteCalc = filterLocationText.trim() === '' ? allLocations.filter(l => l) :\r\n        allLocations.filter(l => l.name.includes(filterLocationText.trim()));\r\n    const routInEditLocations: string [] = transportRoutInEdit ? transportRoutInEdit.TransportStops.map(rs => rs.locationId) : [];\r\n\r\n    const filteredLocations = filteredLocationsBeforeRouteCalc.filter(l => !routInEditLocations.includes(l.id));\r\n    filteredLocations.sort((a, b) => +a.id > +b.id ? -1 : 1)\r\n\r\n\r\n    const filteredRoutes = filterRouteText.trim() === '' ? allTransportRoutes.filter(l => l) :\r\n        allTransportRoutes.filter(l => l.name.includes(filterRouteText.trim()));\r\n    filteredRoutes.sort((a, b) => +a.id > +b.id ? -1 : 1)\r\n\r\n    return (<Box sx={{...Styles.flexRow}}>\r\n            <Box sx={{...Styles.flexCol}}>\r\n                <Box sx={{...Styles.flexRow}}>\r\n\r\n                    <TextField\r\n                        autoFocus\r\n                        margin=\"dense\"\r\n                        id={'search-location-dialog-text-field'}\r\n                        placeholder={translations.searchLocation}\r\n                        type=\"text\"\r\n                        variant=\"standard\"\r\n                        value={filterLocationText}\r\n                        onChange={(event) => {\r\n                            return handleFilterLocationValueChanged(event);\r\n                        }}\r\n\r\n                    />\r\n\r\n                </Box>\r\n\r\n                <Box sx={{\r\n                    mt: '1em',\r\n                    overflowY: 'auto',\r\n                    maxHeight: '50vh',\r\n                    direction: 'ltr'\r\n                }}>\r\n\r\n                    <Box sx={{direction: 'rtl'}} id={'locations-container'}>\r\n                        {filteredLocations.map((l: LocationModel, i: number) =>\r\n                            <Box key={l.id}>\r\n\r\n                                <LocationChooseButton    {...l} onClick={handleAddLocationToRoute} key={i}/>\r\n                            </Box>\r\n                        )}\r\n                    </Box>\r\n\r\n                </Box>\r\n            </Box>\r\n            <Box sx={{\r\n                ...Styles.flexCol,\r\n                m: '1em',\r\n                mt: '0'\r\n            }}>\r\n                <Box sx={{...Styles.flexRow}}>\r\n                    <Button variant=\"contained\" onClick={handleAddRoute} aria-label=\"add\" size=\"large\">\r\n                        {translations.addTransportRoute}\r\n                    </Button>\r\n                    <Box sx={{\r\n                        width: '20px',\r\n                        height: '30px'\r\n                    }}/>\r\n                    <TextField\r\n                        autoFocus\r\n                        margin=\"dense\"\r\n                        id={'search-location-dialog-text-field'}\r\n                        placeholder={translations.searchTransport}\r\n                        type=\"text\"\r\n                        variant=\"standard\"\r\n                        value={filterRouteText}\r\n                        onChange={(event) => {\r\n\r\n                            return handleFilterRouteValueChanged(event);\r\n                        }}\r\n\r\n                    />\r\n                </Box>\r\n\r\n                <Box sx={{\r\n                    height: '10px',\r\n                    width: '20px'\r\n                }}/>\r\n                {transportRoutInEdit ?\r\n                    <LocationTransportEdit allLocations={allLocations} transportRoute={transportRoutInEdit}/> : null}\r\n            </Box>\r\n            <Box sx={{...Styles.flexCol}}>\r\n                <Box sx={{\r\n                    mt: '1em',\r\n                    overflowY: 'auto',\r\n                    maxHeight: '50vh',\r\n                    direction: 'ltr'\r\n                }}>\r\n                    <Box sx={{direction: 'rtl'}} id={'routes-container'}>\r\n                        {filteredRoutes.map((r: TransportModel) => (\r\n                            <LocationRouteTransportChoose routeOrTransport={RouteOrTransport.Transport} key={r.id} route={r}\r\n                                                          routeClicked={routeClickedHandler}/>))}\r\n                    </Box>\r\n                </Box>\r\n            </Box>\r\n\r\n        </Box>\r\n    )\r\n}\r\n","import * as React from 'react';\r\nimport Tabs from '@mui/material/Tabs';\r\nimport Tab from '@mui/material/Tab';\r\nimport Box from '@mui/material/Box';\r\nimport {translations} from '../../services/translations';\r\nimport {SidurStore} from '../../store/store.types';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {ActionsTypes} from '../../store/types.actions';\r\nimport {LocationsEdit} from './locations-edit';\r\nimport {LocationsRoutesEditWrapper} from '../LocationsEditRoutes/locations-routes-edit-wrapper';\r\nimport {LocationsTransportEditWrapper} from '../LocationsEditTransports/locations-transport-edit-wrapper';\r\n\r\ninterface TabPanelProps {\r\n    children?: React.ReactNode;\r\n    index: number;\r\n    value: number;\r\n}\r\n\r\nconst TabPanel = (props: TabPanelProps) => {\r\n    const {\r\n        children,\r\n        value,\r\n        index,\r\n        ...other\r\n    } = props;\r\n\r\n    return (\r\n        <div\r\n            role=\"tabpanel\"\r\n            hidden={value !== index}\r\n            id={`simple-tab-panel-${index}`}\r\n            aria-labelledby={`simple-tab-${index}`}\r\n            {...other}\r\n        >\r\n            {value === index && (\r\n                <Box sx={{p: 3}}>\r\n                    {children}\r\n                </Box>\r\n            )}\r\n        </div>\r\n    );\r\n}\r\n\r\nconst a11yProps = (index: number) => {\r\n    return {\r\n        id: `simple-tab-${index}`,\r\n        'aria-controls': `simple-tab-panel-${index}`,\r\n    };\r\n}\r\n\r\n\r\nexport const LocationsEditTabs = () => {\r\n    const locationTabSelectedAsString: string = useSelector((state: SidurStore) => state.sessionState.LocationGroupTabOpen || '1');\r\n    const locationTabSelected = +locationTabSelectedAsString;\r\n    const dispatch = useDispatch()\r\n\r\n    const handleChange = (event: React.SyntheticEvent, newValue: number) => {\r\n\r\n        dispatch({\r\n            type: ActionsTypes.CHOOSE_LOCATION_GROUP_TAB,\r\n            payload: {id: newValue.toString()}\r\n        })\r\n    };\r\n\r\n    return (\r\n        <Box sx={{width: '100%'}}>\r\n            <Box sx={{\r\n                borderBottom: 1,\r\n                borderColor: 'divider'\r\n            }}>\r\n                <Tabs value={locationTabSelected} onChange={handleChange} aria-label=\"basic tabs example\">\r\n                    <Tab label={translations.Locations} {...a11yProps(0)} />\r\n                    <Tab label={translations.roadTracks}   {...a11yProps(1)} />\r\n                    <Tab label={translations.PublicTransport}  {...a11yProps(2)} />\r\n                </Tabs>\r\n            </Box>\r\n            <TabPanel value={locationTabSelected} index={0}>\r\n                <LocationsEdit/>\r\n            </TabPanel>\r\n            <TabPanel value={locationTabSelected} index={1}>\r\n                <LocationsRoutesEditWrapper/>\r\n            </TabPanel>\r\n            <TabPanel value={locationTabSelected} index={2}>\r\n                <LocationsTransportEditWrapper/>\r\n            </TabPanel>\r\n        </Box>\r\n    );\r\n}\r\n","import * as React from 'react';\r\nimport {translations} from '../../services/translations';\r\nimport {Box, Card, CardContent} from '@mui/material';\r\nimport {LockTwoTone} from '@mui/icons-material';\r\nimport {Styles} from '../../hoc/themes';\r\n\r\n\r\nexport const LocationCantEditMessage = () => {\r\n\r\n    return (\r\n        <Box>\r\n            <Card sx={{\r\n                width: '300px',\r\n                height: '180px',\r\n                p: '0.5em',\r\n                m: '3em'\r\n            }}>\r\n                <Box sx={{\r\n                    ...Styles.flexRow,\r\n                    justifyContent: 'start',\r\n                    alignItems: 'center',\r\n\r\n                    m: '0.5em',\r\n                    mb: '0.1em'\r\n                }}>\r\n                    <b> <LockTwoTone sx={{\r\n                        mt: '0.4em',\r\n                        mb: '0.2em'\r\n                    }}/> </b>\r\n                    <b>\r\n                        &nbsp; {translations.lockedForEdit}\r\n                    </b>\r\n                </Box>\r\n                <CardContent>\r\n\r\n                    {translations.cantEditLocationMessag}\r\n                </CardContent>\r\n            </Card>\r\n\r\n        </Box>\r\n    );\r\n\r\n\r\n}\r\n","import React from 'react';\r\nimport {Box, Button, IconButton, MenuItem, Select, SelectChangeEvent, Typography} from '@mui/material';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {Edit, LockTwoTone} from '@mui/icons-material';\r\nimport {RenameDialog} from '../Dialogs/rename-dialog';\r\nimport {AppConstants, RecordBriefModel, SidurStore, TypeOfRecord} from '../../store/store.types';\r\nimport {ActionsTypes} from '../../store/types.actions';\r\nimport {translations} from '../../services/translations';\r\nimport {LocationGroup} from '../../models/Location.model';\r\nimport {LocationGroupMenu} from './location-group-menu';\r\nimport {LocationGroupActionType} from '../../models/LocationGroupMenuClickActionType.enum';\r\nimport {LocationsEditTabs} from './location-group-edit-tabs';\r\nimport {LocationCantEditMessage} from './location-cant-edit-message';\r\n\r\n\r\nexport const LocationGroupEditWrapper = () => {\r\n    const dispatch = useDispatch();\r\n    const locationGroupInEditId = useSelector((state: SidurStore) => state.sessionState.locationGroupInEdit || 'ESHBAL');\r\n    const locationGroups: LocationGroup[] = useSelector((state: { LocationGroups: LocationGroup[] }) => state.LocationGroups || []);\r\n    const recordBriefs: RecordBriefModel[] = useSelector((state: { recordBriefs: RecordBriefModel[] }) => state.recordBriefs || []);\r\n\r\n    const [locationGroupMoreAnchorEl, setLocationGroupMoreAnchorEl] =\r\n        React.useState<null | HTMLElement>(null);\r\n    const isLocationGroupMenuOpen = Boolean(locationGroupMoreAnchorEl);\r\n\r\n    const locationGroupMenuId = 'primary-location-group-menu';\r\n    const [RenameOpen, setRenameOpen] = React.useState(false);\r\n\r\n    const handleLocationGroupMenuOpen = (event: React.MouseEvent<HTMLElement>) => {\r\n        setLocationGroupMoreAnchorEl(event.currentTarget);\r\n    };\r\n    const handleRenameClose = (value: string | null) => {\r\n        setRenameOpen(false);\r\n        const id = locationGroupInEditId;\r\n        if (value) {\r\n            dispatch({\r\n                type: ActionsTypes.RENAME_LOCATION_GROUP,\r\n                payload: {\r\n                    value,\r\n                    id\r\n                }\r\n            })\r\n        }\r\n    };\r\n    const buildTextForLocationInSidurim = (sidurim: RecordBriefModel []): string => {\r\n        let retText = ''\r\n        if (sidurim.length === 0) {\r\n            return ''\r\n        } else if (sidurim.length > 0) {\r\n            retText = translations.thisCollectionIsInUse + ':';\r\n            sidurim.forEach((s, i) => {\r\n                let suffix = ''\r\n\r\n                if (s.id.includes(AppConstants.ArchiveIdPrefix)) {\r\n                    suffix = translations.InArchive\r\n                } else if (s.id.includes(AppConstants.deleteIdPrefix)) {\r\n                    suffix = translations.InTrash\r\n                }\r\n                if (suffix !== '') {\r\n                    suffix = ' (' + suffix + ')'\r\n                }\r\n                if (i > 0) {\r\n                    retText += ', '\r\n                }\r\n                retText += s.name + suffix\r\n            })\r\n        }\r\n        if (sidurim.length >= 4) {\r\n            retText += ', ' + translations.thisCollectionIsInUseandAnother + ' ' +\r\n                (sidurim.length - 1).toString() + ' ' + translations.thisCollectionIsInUseandAnothersidurim;\r\n        }\r\n        retText += '. ' + translations.thisCollectionIsInUsedCannotbeDeleted\r\n        return retText\r\n\r\n    }\r\n\r\n    const isLocationInSidur: RecordBriefModel [] | [] = recordBriefs.filter(lb => lb.typeOfRecord === TypeOfRecord.Sidur && lb.locationGroupOrSidurId === locationGroupInEditId);\r\n\r\n    const handleLocationGroupMenuClick = (event: React.MouseEvent<HTMLElement>, clickAction: LocationGroupActionType) => {\r\n\r\n        switch (clickAction) {\r\n\r\n            case LocationGroupActionType.CreateCopy:\r\n                dispatch({\r\n                    type: ActionsTypes.CLONE_LOCATION_GROUP,\r\n                    payload: {id: locationGroupInEditId}\r\n                })\r\n                break;\r\n\r\n            case LocationGroupActionType.Delete:\r\n                dispatch({\r\n                    type: ActionsTypes.DELETE_LOCATION_GROUP,\r\n                    payload: {id: locationGroupInEdit?.id}\r\n                })\r\n                break;\r\n            case LocationGroupActionType.Rename:\r\n                setRenameOpen(true);\r\n                break;\r\n\r\n\r\n            default:\r\n        }\r\n        handleSketchMenuClose()\r\n    };\r\n    const handleSketchMenuClose = () => {\r\n        setLocationGroupMoreAnchorEl(null);\r\n    };\r\n    const handleLocationGroupChanged = (event: any, _child: React.ReactNode) => {\r\n\r\n        const chosenSketch = event.target.value as string;\r\n        if (chosenSketch === 'NEW') {\r\n            dispatch({\r\n                type: ActionsTypes.NEW_LOCATION_GROUP,\r\n                payload: null\r\n            });\r\n\r\n        } else {\r\n            dispatch({\r\n                type: ActionsTypes.CHOOSE_LOCATION_GROUP,\r\n                payload: {id: chosenSketch}\r\n            })\r\n        }\r\n\r\n\r\n    }\r\n    const handleCreateLocationGroup = () => {\r\n        dispatch({\r\n            type: ActionsTypes.NEW_LOCATION_GROUP,\r\n            payload: {\r\n                value: null,\r\n            }\r\n        })\r\n    }\r\n\r\n\r\n    const locationGroupInEdit: LocationGroup = locationGroups.find((lGroup: LocationGroup) => lGroup.id === locationGroupInEditId) || locationGroups[0] as LocationGroup;\r\n\r\n\r\n    const sketchName = locationGroupInEdit ? locationGroupInEdit.name : '';\r\n\r\n\r\n    return (\r\n        <Box>\r\n            {locationGroupInEdit ? <Box sx={{\r\n                display: 'flex',\r\n                flexDirection: 'row',\r\n                alignItems: 'center',\r\n                justifyContent: 'start',\r\n                mb: '10px'\r\n            }}>\r\n                <Typography\r\n                    variant=\"h6\"\r\n                    noWrap\r\n                    component=\"div\"\r\n                    sx={{\r\n                        display: {\r\n                            xs: 'none',\r\n                            sm: 'block',\r\n                            fontWight: 'regular'\r\n                        }\r\n                    }}\r\n                >  &nbsp;\r\n                    {translations.LocationBase} &nbsp; </Typography>\r\n                <Select dir={'rtl'} disableUnderline={true} variant={'standard'} value={locationGroupInEditId}\r\n                        sx={{\r\n                            //  color: 'black',\r\n                            fontSize: '1.25rem',\r\n                            fontWeight: 'normal'\r\n                        }}\r\n                        onChange={(event: SelectChangeEvent<any>, child: React.ReactNode) => {\r\n                            handleLocationGroupChanged(event, child)\r\n                        }}>\r\n                    <MenuItem key={'ESHBAL'} sx={{verticalAlign: 'center'}}\r\n                              value={'ESHBAL'}> &nbsp;  {translations.Eshbal} <LockTwoTone sx={{\r\n                        height: '17px',\r\n                        opacity: '0.7',\r\n                        color: 'grey'\r\n                    }}/></MenuItem>\r\n                    <MenuItem key={'NEW'}\r\n                              value={'NEW'}> &nbsp; <b>{translations.CreateLocationGroup}</b>  &nbsp;</MenuItem>\r\n                    {locationGroups.filter(l => l.id !== 'ESHBAL').map((oneLocationGroup: LocationGroup) => <MenuItem\r\n                        key={oneLocationGroup.id}\r\n                        value={oneLocationGroup.id}> {oneLocationGroup.name} &nbsp; </MenuItem>)}\r\n                </Select>\r\n\r\n\r\n                <IconButton\r\n                    size=\"small\"\r\n                    aria-label=\"show more\"\r\n                    aria-controls={locationGroupMenuId}\r\n                    aria-haspopup=\"true\"\r\n                    onClick={handleLocationGroupMenuOpen}\r\n                    color=\"inherit\"\r\n                >\r\n                    <Edit/>\r\n                </IconButton>\r\n                <Box\r\n                    sx={{\r\n                        fontSize: 'small',\r\n                        maxWidth: '50vw',\r\n                        pr: '20px',\r\n                        pl: '20px'\r\n                    }}> {locationGroupInEditId === 'ESHBAL' ? null : buildTextForLocationInSidurim(isLocationInSidur)}</Box>\r\n\r\n\r\n            </Box> : <Button variant={'contained'} id={'sketches-create-sketch'}\r\n                             onClick={handleCreateLocationGroup}>{translations.CreateSketch}</Button>}\r\n\r\n            {locationGroupInEditId === 'ESHBAL' ? <LocationCantEditMessage/> : <LocationsEditTabs/>}\r\n            <LocationGroupMenu locationGroupMoreAnchorEl={locationGroupMoreAnchorEl}\r\n                               locationGroupMenuId={locationGroupInEditId || ''}\r\n                               isLocationGroupMenuOpen={isLocationGroupMenuOpen}\r\n                               handleLocationGroupMenuClick={handleLocationGroupMenuClick}\r\n                               handleLocationGroupMenuClose={handleSketchMenuClose} preventDelete={isLocationInSidur.length > 0}/>\r\n            <RenameDialog open={RenameOpen} onClose={handleRenameClose} selectedValue={sketchName}/>\r\n        </Box>\r\n\r\n\r\n    )\r\n\r\n\r\n}\r\n","import React from 'react';\r\nimport {TextFieldPropertiesModel} from '../../models/text-field-properties.model';\r\nimport {SxProps, Theme} from '@mui/system';\r\nimport {TextField} from '@mui/material';\r\n\r\n\r\nconst sxRoot = {\r\n    direction: (theme: Theme) => theme.direction,\r\n    '& .MuiFormLabel-root': {\r\n        left: 'inherit'\r\n    },\r\n    '& .MuiInputBase-input': {\r\n        // padding: '10px'\r\n    }\r\n}\r\nexport const HourPicker = ({\r\n                               input,\r\n                               label,\r\n                               meta,\r\n                               ...custom\r\n                           }: TextFieldPropertiesModel) => {\r\n\r\n    const inActive: boolean = custom?.custom?.inActive || false;\r\n    const sxExtra: SxProps = {\r\n        visibility: inActive ? 'hidden' : 'visible',\r\n        \r\n    };\r\n    return (\r\n\r\n        <TextField variant={'standard'}\r\n                   sx={{...sxRoot, ...sxExtra}}\r\n                   disabled={inActive}\r\n                   type=\"time\"\r\n                   label={label}\r\n                   value={input.value}\r\n                   onChange={input.onChange}/>\r\n    );\r\n}\r\n\r\n\r\n","import {TextFieldPropertiesModel} from '../../models/text-field-properties.model';\r\n\r\nimport React from 'react';\r\nimport {Theme} from '@mui/system';\r\nimport {TextField} from '@mui/material';\r\n\r\n\r\nconst useStyles = (() => ({\r\n    root: {\r\n        direction: (theme: Theme) => theme.direction,\r\n        '& .MuiFormLabel-root': {\r\n            left: 'inherit'\r\n        },\r\n        '& .MuiInputBase-input': {\r\n            // paddingTop: '10px',\r\n            // paddingBottom: '10px'\r\n        }\r\n    }\r\n}))\r\nexport const RenderTextField = (\r\n    {\r\n        input,\r\n        label,\r\n        meta,\r\n        ...custom\r\n    }: TextFieldPropertiesModel,\r\n) => (\r\n    <TextField variant={'standard'}\r\n               dir={'rtl'}\r\n               style={{\r\n                   direction: 'rtl',\r\n\r\n               }}\r\n               label={label}\r\n               sx={{\r\n                   ...useStyles()\r\n                       .root\r\n               }}\r\n               onChange={input.onChange}\r\n               {...input}\r\n               {...custom}\r\n    />\r\n);\r\n","import React from 'react';\r\nimport {SxProps, Theme} from '@mui/system';\r\nimport {InputLabel, Select} from '@mui/material';\r\n\r\nconst useStyles = () => ({\r\n    root: {\r\n        direction: (theme: Theme) => theme.direction,\r\n        '& .MuiInputBase-input': {\r\n            paddingLeft: '10px'\r\n        },\r\n\r\n    }\r\n})\r\nconst labelSx: SxProps = {\r\n    fontSize(_theme) {\r\n        return '0.7em';\r\n    }\r\n\r\n}\r\n\r\nexport const RenderSelectField = (\r\n    {\r\n        input,\r\n        label,\r\n        meta,\r\n        children,\r\n        ...custom\r\n    }: any,\r\n) => {\r\n    const classes = useStyles()\r\n    return (\r\n        <>\r\n\r\n\r\n            <InputLabel sx={{...labelSx}} id=\"select-liable\">{label}</InputLabel>\r\n            <Select variant={'standard'}\r\n                    sx={{\r\n                        ...classes\r\n                            .root\r\n                    }}\r\n                    labelId=\"select-liable\"\r\n                    label={label}\r\n\r\n                    {...input}\r\n                    onChange={(event: any, _child: any) => {\r\n\r\n                        input.onChange(event)\r\n                    }}\r\n\r\n                    children={children}\r\n                    {...custom}>\r\n\r\n            </Select>\r\n        </>\r\n\r\n    )\r\n};\r\n","import {TextFieldPropertiesModel} from '../../models/text-field-properties.model';\r\n\r\nimport React from 'react';\r\nimport {styled, Theme} from '@mui/system';\r\nimport {Rating, Typography} from '@mui/material';\r\nimport {Person} from '@mui/icons-material';\r\nimport {Utils} from '../../services/utils';\r\nimport {LanguageUtilities} from '../../services/language-utilities';\r\n\r\n\r\nconst rootSx = {\r\n    direction: (theme: Theme) => theme.direction,\r\n    '& .MuiFormLabel-root': {\r\n        left: 'inherit'\r\n    },\r\n    '& .MuiInputBase-input': {\r\n        // paddingTop: '10px',\r\n        // paddingBottom: '10px'\r\n    }\r\n}\r\n\r\n\r\n// />\r\nconst StyledRating = styled(Rating)({\r\n    '& .MuiRating-iconFilled': {\r\n        color: '#000000',\r\n    },\r\n    '& .MuiRating-iconHover': {\r\n        color: '#3b0c0f',\r\n    },\r\n});\r\n\r\nexport const RenderPassengerField = (\r\n    {\r\n        input,\r\n        label,\r\n        meta,\r\n        ...custom\r\n    }: TextFieldPropertiesModel,\r\n) => {\r\n    const convertedInput = {...input};\r\n    convertedInput.value = Utils.convertStrToNum(convertedInput.value)\r\n\r\n    return (\r\n        <>\r\n            <Typography component=\"legend\">{LanguageUtilities.renderPassengerText(input.value)}</Typography>\r\n            <StyledRating variant={'standard'}\r\n                          dir={'rtl'}\r\n                          style={{\r\n                              direction: 'rtl',\r\n\r\n                          }}\r\n                          type=\"radio\"\r\n                // size=\"large\"\r\n                          label={label}\r\n                          sx={rootSx}\r\n                          max={7}\r\n                          onChange={(...args) => {\r\n\r\n\r\n                              input.onChange(...args);\r\n\r\n                          }}\r\n                          icon={<Person fontSize=\"inherit\"/>}\r\n                          emptyIcon={<Person fontSize=\"inherit\"/>}\r\n                          {...convertedInput}\r\n                          {...custom}\r\n            />\r\n\r\n        </>\r\n    );\r\n}\r\n","import {TextFieldPropertiesModel} from '../../models/text-field-properties.model';\r\n\r\nimport React from 'react';\r\nimport {Box, Slider, Theme, Typography} from '@mui/material';\r\nimport {translations} from '../../services/translations';\r\nimport {Utils} from '../../services/utils';\r\n\r\n\r\nconst sliderSx = {\r\n\r\n    direction: (theme: Theme) => theme.direction,\r\n\r\n    '& .MuiSlider-thumb': {\r\n        marginRight: -2,\r\n        marginLeft: 0\r\n    }\r\n}\r\n\r\n\r\nconst renderFlexibilityText = (flexValues: [number, number]): string => {\r\n    const absValue = (n: number): string => Math.abs(n).toString()\r\n    return translations.flexEarly + ' ' + absValue(flexValues[0]) + ' ' + translations.min + ', ' +\r\n        translations.flexLate + ' ' + absValue(flexValues[1]) + ' ' + translations.min\r\n}\r\nexport const RenderFlexibilityField = (\r\n    {\r\n        input,\r\n        label,\r\n        meta,\r\n        ...custom\r\n    }: TextFieldPropertiesModel,\r\n) => {\r\n    const convertedInput = {...input}\r\n    convertedInput.value = convertedInput.value.map((v: string) => Utils.convertStrToNum(v))\r\n    return (\r\n        <>\r\n            <Typography component=\"legend\"><b>{translations.flexibility}: </b>{renderFlexibilityText(input.value)}</Typography>\r\n\r\n            <Box sx={{width: '250px'}}>\r\n\r\n                <Slider variant={'standard'}\r\n                        sx={sliderSx}\r\n                        disableSwap\r\n                        valueLabelDisplay=\"auto\"\r\n                        label={label}\r\n                        min={-60}\r\n                        max={120}\r\n                        step={10}\r\n                        onChange={input.onChange}\r\n\r\n                        {...convertedInput}\r\n                        {...custom}\r\n                />\r\n            </Box>   </>\r\n    );\r\n}\r\n","import React, {ChangeEvent} from 'react';\r\nimport {Theme} from '@mui/system';\r\nimport {Autocomplete, TextField} from '@mui/material';\r\nimport {LocationModel} from '../../models/Location.model';\r\n\r\nconst useStyles = () => ({\r\n    root: {\r\n        direction: (theme: Theme) => theme.direction,\r\n        '& .MuiButtonBase-root': {\r\n            position: 'absolute',\r\n            left: '2px'\r\n            //  display: 'inline'\r\n            //alignSelf: 'flex-end'\r\n\r\n        },\r\n        '& .MuiAutocomplete-endAdornment': {\r\n            position: 'absolute',\r\n            left: '2px',\r\n        },\r\n        '& .MuiFormLabel-root': {\r\n            left: 'inherit'\r\n        },\r\n\r\n    }\r\n})\r\n\r\n\r\nexport const RenderSelectFieldAutoComplete = (\r\n    {\r\n        input,\r\n        label,\r\n        meta,\r\n        children,\r\n        ...custom\r\n    }: any,\r\n) => {\r\n    const classes = useStyles()\r\n    const options: Array<{ label: string, id: string }> = (custom.selectoptions || []).map((location: LocationModel) => ({\r\n        label: location.name.replaceAll('  ', ' '),\r\n        id: location.id\r\n    }));\r\n    const inputAsText = options.find(o => o.id === input.value)?.label || input.value\r\n    const inputWithTextValue = {...input};\r\n    inputWithTextValue.value = inputAsText;\r\n\r\n    const onTextFieldChange = (_event: any, _params: any) => {\r\n    }\r\n\r\n    return (\r\n        <>\r\n\r\n            <Autocomplete\r\n                fullWidth\r\n                isOptionEqualToValue={(option: { label: string, id: string }, value: string) => {\r\n                    const thisLabel: string = option.label;\r\n                    return thisLabel?.replaceAll('  ', ' ') === value\r\n                }}\r\n                sx={{\r\n                    direction: (theme: Theme) => theme.direction,\r\n                    '& .MuiInputBase-input': {\r\n                        //  paddingLeft: '10px'\r\n                    },\r\n                    width: '150px'\r\n                }}\r\n                disableClearable\r\n                openOnFocus\r\n                autoSelect\r\n                autoComplete\r\n\r\n\r\n                {...inputWithTextValue}\r\n\r\n                onChange={(event: ChangeEvent, newValue: any) => {\r\n                    const clonedEvent: any = {\r\n                        ...event,\r\n                        target: {...event.target}\r\n                    };\r\n                    clonedEvent.target.value = newValue.id\r\n\r\n                    input.onChange(clonedEvent)\r\n\r\n                }}\r\n\r\n\r\n                options={options}\r\n\r\n                renderInput={(params) => <TextField onChange={(event: ChangeEvent) => onTextFieldChange(event, params)} sx={{\r\n                    ...classes\r\n                        .root\r\n                }} {...params} variant=\"standard\" label={label}> </TextField>}\r\n\r\n                {...custom}\r\n\r\n            >\r\n\r\n            </Autocomplete>\r\n        </>\r\n\r\n    )\r\n};\r\n","import React, {useState} from 'react';\r\n\r\nimport {Field, Form} from 'react-final-form';\r\nimport {MuiFormPropsModel} from '../../models/mui-form-props.model';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {HourPicker} from '../Form/hour-picker';\r\nimport {OrderFields, OrderModel} from '../../models/Order.model';\r\nimport {RenderTextField} from '../Form/text-field';\r\nimport {RenderSelectField} from '../Form/select-field';\r\nimport {DriveType} from '../../models/DriveType.enum';\r\nimport {Box, SxProps} from '@mui/system';\r\nimport {Button, MenuItem} from '@mui/material';\r\nimport {translations} from '../../services/translations';\r\nimport {ActionsTypes} from '../../store/types.actions';\r\nimport {LocationModel} from '../../models/Location.model';\r\nimport {LanguageUtilities} from '../../services/language-utilities';\r\nimport {RenderPassengerField} from '../Form/passengers-field';\r\nimport {RenderFlexibilityField} from '../Form/flexibility-field';\r\nimport {RenderSelectFieldAutoComplete} from '../Form/select-field-auto-complete';\r\n\r\n\r\nconst TRL = translations;\r\n\r\n\r\nconst fieldWrapper: SxProps = {\r\n    padding: '10px'\r\n}\r\nconst selectFieldWrapper: SxProps = {\r\n    ...fieldWrapper,\r\n    paddingBottom: '0px'\r\n}\r\n\r\nconst fieldWrapperText = {\r\n    display: 'inline-flex',\r\n    padding: '10px',\r\n    maxWidth: '150px'\r\n};\r\n\r\nconst orderFields: OrderModel = new OrderFields();\r\n\r\nconst Divider = () => (<Box sx={{\r\n    width: '10px',\r\n    height: '5px'\r\n}}/>)\r\n\r\n\r\nconst MaterialUiForm = (muiFormProps: MuiFormPropsModel) => {\r\n    const {\r\n        handleSubmit,\r\n\r\n        submitting,\r\n        typeOfDrive,\r\n        locations\r\n    } = muiFormProps;\r\n    const [isAdvanced, setIsAdvanced] = useState(false);\r\n    const handleSetAdvanced = (value: boolean = true) => {\r\n        setIsAdvanced(value)\r\n    }\r\n    const advanceFieldWrapper: SxProps = {\r\n        ...fieldWrapper,\r\n        display: isAdvanced ? 'initial' : 'none'\r\n    }\r\n    const driveTimeLanguage = LanguageUtilities.getPrefixByDriveType(typeOfDrive)\r\n    return (\r\n\r\n        <form onSubmit={(...args) => submitting(...args)} dir={'rtl'}>\r\n            <Box id={'form-wrapper'} sx={{\r\n                display: 'flex',\r\n                flexDirection: 'row',\r\n                flexWrap: 'wrap'\r\n            }}>\r\n\r\n\r\n                <Box\r\n                    sx={fieldWrapperText}\r\n                >\r\n                    <Field name={orderFields.driverName}\r\n                           component={RenderTextField}\r\n                           label={TRL.Name}\r\n                    />\r\n                </Box>\r\n                <Box sx={selectFieldWrapper}>\r\n                    <Field\r\n                        name={'TypeOfDrive'}\r\n                        component={RenderSelectField}\r\n                        label={TRL.TypeOfDrive}\r\n                    >\r\n                        <MenuItem value={DriveType.Tsamud.toString()}>{TRL.Tsamud}</MenuItem>\r\n                        <MenuItem value={DriveType.OneWayFrom.toString()}> {TRL.OneWayFrom}</MenuItem>\r\n                        <MenuItem value={DriveType.OneWayTo.toString()}>{TRL.OneWayTo}</MenuItem>\r\n\r\n                    </Field>\r\n\r\n                </Box>\r\n\r\n                <Box sx={selectFieldWrapper}>\r\n\r\n                    <Field name={orderFields.location} component={RenderSelectFieldAutoComplete} label={TRL.Where}\r\n                           selectoptions={locations.map((location: LocationModel) => ({\r\n                               ...location,\r\n                               Name: driveTimeLanguage.location + location.name\r\n                           }))}>\r\n\r\n                    </Field> </Box>\r\n                <Box\r\n                    sx={fieldWrapper}\r\n                >\r\n                    <Field name={orderFields.startHour} component={HourPicker}\r\n                           label={driveTimeLanguage.timeStart}/>\r\n                </Box>\r\n                <Box sx={fieldWrapper}\r\n                >\r\n                    <Field name={orderFields.finishHour} custom={{inActive: typeOfDrive !== DriveType.Tsamud}} component={HourPicker}\r\n                           label={driveTimeLanguage.timeEnd}/>\r\n                </Box>\r\n\r\n                <Box\r\n                    sx={fieldWrapper}> <Field name={orderFields.Comments}\r\n                                              component={RenderTextField}\r\n                                              label={TRL.Comments}\r\n                    // multiLine={true}\r\n                                              rows={2}\r\n                />\r\n                </Box>\r\n\r\n\r\n                <Box\r\n                    sx={fieldWrapper}> <Field name={orderFields.passengers}\r\n                                              component={RenderPassengerField}\r\n                                              label={TRL.passengers}\r\n                                              type={'text'}\r\n                                              rows={2}\r\n                />\r\n                </Box>\r\n                <Box\r\n                    sx={advanceFieldWrapper}> <Field name={orderFields.flexibility[0]}\r\n                                                     component={RenderFlexibilityField}\r\n                                                     label={TRL.flexibility}\r\n                                                     rows={2}\r\n                />\r\n\r\n\r\n                </Box>\r\n\r\n                <Box sx={{\r\n                    ...fieldWrapper,\r\n                    display: 'flex',\r\n                    flexDirection: 'row'\r\n                }}\r\n                >\r\n                    <Button sx={{display: isAdvanced ? 'none' : 'initial'}} variant=\"text\" type=\"button\"\r\n                            onClick={() => handleSetAdvanced(true)}>{TRL.Advanced}</Button>\r\n                    <Divider/>\r\n                    <Button sx={{m: '5px'}} variant=\"contained\" color={'primary'} type=\"button\"\r\n                            onClick={handleSubmit}>{TRL.Submit}</Button>\r\n\r\n\r\n                </Box>\r\n\r\n            </Box>\r\n        </form>\r\n    );\r\n};\r\n\r\nexport const OrderCarForm = (formProps: MuiFormPropsModel) => {\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const id = formProps.orderId;\r\n    const orders = useSelector((state: { orders: OrderModel[] }) => state.orders);\r\n\r\n    const initialValues = orders.find(order => order.id === id);\r\n\r\n    const [_typeOfDrive, set_typeOfDrive] = useState(initialValues?.TypeOfDrive as DriveType)\r\n\r\n\r\n    return (\r\n        <Form\r\n            initialValues={initialValues}\r\n            onSubmit={(_values: any) => {\r\n            }}\r\n            validate={(values: any) => {\r\n\r\n                if (!formProps.isInEdit) {\r\n                    return\r\n                }\r\n                dispatch({\r\n                    type: ActionsTypes.UPDATE_ORDER_IN_EDIT,\r\n                    payload: {\r\n                        ...values\r\n                    }\r\n                })\r\n                if (values?.TypeOfDrive && values?.TypeOfDrive !== _typeOfDrive) {\r\n                    set_typeOfDrive(values.TypeOfDrive)\r\n                }\r\n                return {} // validate(values)\r\n            }}\r\n            handleSubmit={(_event: Event, _values: any) => {\r\n                if (!formProps.isInEdit) {\r\n                    return\r\n                }\r\n                dispatch({\r\n                    type: ActionsTypes.UPDATE_ORDER,\r\n                    payload: {\r\n                        id: id\r\n                    }\r\n                })\r\n\r\n            }}\r\n            render={({handleSubmit}: any) => (MaterialUiForm({\r\n                ...formProps,\r\n                typeOfDrive: _typeOfDrive,\r\n                handleSubmit,\r\n            }))\r\n\r\n            }/>\r\n    )\r\n}\r\n\r\n\r\n","import {DriveType} from './DriveType.enum';\r\n\r\nexport interface OrderModel {\r\n    id: string,\r\n    driverName: string,\r\n    startHour: string,\r\n    finishHour: string,\r\n    TypeOfDrive: DriveType | null,\r\n    location: string,\r\n    Comments: string,\r\n    passengers: string,\r\n    flexibility: [string, string]\r\n}\r\n\r\nexport class OrderFields implements OrderModel {\r\n    id: string = 'id';\r\n    driverName: string = 'driverName';\r\n    startHour: string = 'startHour';\r\n    finishHour: string = 'finishHour';\r\n    TypeOfDrive: DriveType | null = null;\r\n    Comments: string = 'Comments';\r\n    location: string = 'location';\r\n    passengers: string = 'passengers';\r\n    flexibility: [string, string] = ['flexibility', 'flexibility']\r\n \r\n}\r\n","import React from 'react';\r\nimport {useSelector} from 'react-redux';\r\nimport {OrderModel} from '../../models/Order.model';\r\nimport {Box, SxProps} from '@mui/system';\r\nimport {Typography} from '@mui/material';\r\nimport {translations} from '../../services/translations';\r\nimport {LanguageUtilities} from '../../services/language-utilities';\r\nimport {LocationModel} from '../../models/Location.model';\r\nimport {DriveType} from '../../models/DriveType.enum';\r\n\r\n\r\n//const TRL = translations;\r\n\r\ntype AppProps = {\r\n    orderId: string;\r\n    sx: SxProps,\r\n    isInEdit: boolean\r\n};\r\n \r\n\r\nconst areDetailsMissing = (orderValues: OrderModel): boolean => {\r\n    if (!orderValues.TypeOfDrive || !orderValues.driverName || !orderValues.startHour) {\r\n        return true\r\n    }\r\n    if (orderValues.TypeOfDrive === DriveType.Tsamud) {\r\n        if (!orderValues.finishHour || !orderValues.startHour) {\r\n            return true\r\n        }\r\n    }\r\n    return false\r\n}\r\n\r\nconst buildBriefText = (orderValues: OrderModel, locations: LocationModel[]): string => {\r\n    const isWithName = orderValues.driverName.trim() !== '';\r\n    if (!isWithName) {\r\n        return translations.NewOrder\r\n    }\r\n    let timeText = orderValues?.startHour || '';\r\n    if (orderValues.TypeOfDrive === DriveType.Tsamud && orderValues?.startHour && orderValues?.finishHour) {\r\n        timeText = orderValues.finishHour + ' - ' + orderValues.startHour;\r\n    }\r\n    let briefText = timeText + ' ' + orderValues.driverName;\r\n    if (orderValues.TypeOfDrive && orderValues.location) {\r\n        const driveTimeLanguage = LanguageUtilities.getPrefixByDriveType(orderValues.TypeOfDrive);\r\n        const location = locations.find(l => l.id === orderValues.location);\r\n        if (location) {\r\n            briefText += ' ' + driveTimeLanguage.location + location.name\r\n        }\r\n\r\n    }\r\n\r\n    return briefText\r\n}\r\nexport const OrderCarBrief = (props: AppProps) => {\r\n    const id = props.orderId;\r\n    const orderValues = useSelector((state: { orders: OrderModel[] }) => {\r\n        return state.orders.find(order => order.id === id) as OrderModel;\r\n    });\r\n    const locations = useSelector(((state: { Locations: LocationModel[] }) => state.Locations));\r\n\r\n    const missingDetailsShown: boolean = areDetailsMissing(orderValues) && !props.isInEdit;\r\n\r\n\r\n    return (\r\n        <Box sx={{\r\n            padding: '5px',\r\n            display: 'flex',\r\n            flexDirection: 'row',\r\n            justifyContent: 'start',\r\n            alignItems: 'start'\r\n        }}>\r\n            <Typography fontWeight={props.isInEdit ? 'bold' : 'initial'} fontSize={'large'} padding={'initial'}>\r\n                {buildBriefText(orderValues, locations)}\r\n            </Typography>\r\n            <Typography fontSize={'large'} color={'red'} padding={'initial'}>  &nbsp;\r\n                {missingDetailsShown ? ' (' + translations.missingDetails + ') ' : null}\r\n            </Typography>\r\n\r\n        </Box>\r\n\r\n\r\n    )\r\n}\r\n\r\n\r\n","import {SxProps} from '@mui/system';\r\nimport React from 'react';\r\nimport {Box, IconButton} from '@mui/material';\r\nimport {ContentCopy} from '@mui/icons-material';\r\n\r\nexport interface CloneButtonProps {\r\n    sx: SxProps,\r\n    cloneClickHandler: any\r\n\r\n}\r\n\r\nexport const CloneButton = (props: CloneButtonProps) => {\r\n    return (\r\n        <Box>\r\n\r\n            <IconButton id={'clone-button'} onClick={props.cloneClickHandler} size={'small'} sx={{...props.sx}} aria-label=\"delete\">\r\n                <ContentCopy/>\r\n            </IconButton>\r\n        </Box>\r\n\r\n\r\n    )\r\n\r\n}\r\n","import React, {useState} from 'react'\r\n\r\nimport {OrderCarForm} from './order-car-form';\r\nimport {Box, Card, Collapse} from '@mui/material';\r\nimport {OrderCarBrief} from './order-car-brief';\r\nimport {SxProps} from '@mui/system';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {ActionsTypes} from '../../store/types.actions';\r\nimport {DeleteButton} from '../buttons/delete-button';\r\nimport {CloneButton} from '../buttons/clone-button';\r\nimport {LocationModel} from '../../models/Location.model';\r\n\r\n\r\ntype AppProps = {\r\n    orderId: string;\r\n    isInEdit: boolean;\r\n};\r\n\r\nconst useStyles = (() => ({\r\n    cardBase: {\r\n        padding: '10px',\r\n        width: '50vw',\r\n        borderRadius: '15px',\r\n    },\r\n    cardHeader: {\r\n        paddingBottom: 0,\r\n        paddingTop: '10px'\r\n    },\r\n    additionalText: {\r\n        fontSize: '14px'\r\n    },\r\n    dividerBox: {\r\n        width: '20px',\r\n        height: '20px'\r\n    }\r\n\r\n}))\r\n\r\nexport const OrderCar = (props: AppProps) => {\r\n    const classes = useStyles();\r\n    const locations = useSelector(((state: { Locations: LocationModel[] }) => state.Locations));\r\n\r\n    const [inHover, setInHover] = useState(false);\r\n    const onMouseOver = () => {\r\n        setInHover(!props.isInEdit)\r\n    };\r\n    const onMouseOut = () => {\r\n        setInHover(false)\r\n    };\r\n    const dispatch = useDispatch();\r\n    const cardClickHandler = (_event: MouseEvent) => {\r\n        dispatch({\r\n            type: ActionsTypes.CLICKED_ORDER,\r\n            payload: {\r\n                id: props.orderId\r\n            }\r\n        })\r\n    }\r\n    const deleteClickHandler = (event: any) => {\r\n        event.stopPropagation();\r\n        dispatch({\r\n            type: ActionsTypes.DELETE_ORDER,\r\n            payload: {\r\n                id: props.orderId\r\n            }\r\n        })\r\n\r\n    }\r\n    const cloneClickHandler = (event: any) => {\r\n        event.stopPropagation();\r\n        dispatch({\r\n            type: ActionsTypes.CLONE_ORDER,\r\n            payload: {\r\n                id: props.orderId\r\n            }\r\n        })\r\n\r\n    }\r\n    const briefOrderStyle: SxProps = props.isInEdit ? {} : {\r\n        cursor: 'pointer',\r\n        bgcolor: {\r\n            transition: ' ease-in-out 100ms',\r\n        },\r\n\r\n\r\n    }\r\n    return (\r\n        <Box>\r\n\r\n            <Box sx={{display: 'flex'}}>\r\n                <Card onMouseOver={onMouseOver}\r\n                      onMouseOut={onMouseOut} elevation={inHover ? 7 : 2} sx={{\r\n                    ...classes.cardBase,\r\n                    ...briefOrderStyle\r\n                }} onClick={(event: any) => !props.isInEdit ? cardClickHandler(event) : null}>\r\n                    <div tabIndex={0}>\r\n                        <Box sx={{\r\n\r\n                            display: 'flex',\r\n                            flexDirection: 'row',\r\n                            justifyContent: 'space-between'\r\n                        }}>\r\n                            <OrderCarBrief isInEdit={props.isInEdit} sx={{...classes.cardBase}} orderId={props.orderId}/>\r\n                            <Box sx={{\r\n                                display: 'flex',\r\n                                flexDirection: 'row'\r\n                            }}>\r\n                                <CloneButton cloneClickHandler={cloneClickHandler} sx={{fontSize: '14px'}}/>\r\n                                <DeleteButton deleteClickHandler={deleteClickHandler} sx={{fontSize: '14px'}}/>\r\n                            </Box>\r\n\r\n                        </Box>\r\n                    </div>\r\n\r\n                    {props.isInEdit ? <>\r\n\r\n                    </> : null}\r\n\r\n                    <Collapse in={props.isInEdit} unmountOnExit>\r\n\r\n                        <OrderCarForm locations={locations} isInEdit={props.isInEdit} orderId={props.orderId} handleSubmit={'d'}\r\n                                      pristine={'b'} reset={'c'}\r\n                                      submitting={'d'}/>\r\n\r\n                    </Collapse>\r\n\r\n                </Card>\r\n\r\n\r\n            </Box>\r\n            <Box sx={{...classes.dividerBox}}/>\r\n        </Box>\r\n    )\r\n\r\n}\r\n","import {SxProps} from '@mui/system';\r\nimport React from 'react';\r\nimport {Add} from '@mui/icons-material';\r\nimport {Box, Button} from '@mui/material';\r\nimport {translations} from '../../services/translations';\r\n\r\n\r\nexport interface AddButtonProps {\r\n    sx?: SxProps,\r\n    addClickHandler: any\r\n\r\n}\r\n\r\nexport const AddButton = (props: AddButtonProps) => {\r\n\r\n\r\n    return (\r\n\r\n        <Box>\r\n            <Button id={'add-order-button'} variant=\"contained\" onClick={props.addClickHandler} aria-label=\"add\" size=\"large\">\r\n                <Add/> {translations.AddOrder}\r\n            </Button>\r\n\r\n        </Box>\r\n\r\n\r\n    )\r\n\r\n}\r\n","import React from 'react'\r\nimport {Box} from '@mui/system';\r\nimport {OrderCar} from './order-car';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {OrderModel} from '../../models/Order.model';\r\nimport {ActionsTypes} from '../../store/types.actions';\r\nimport {AddButton} from '../Icons/add-button';\r\nimport {SessionModel} from '../../store/store.types';\r\n\r\n\r\nexport const Orders = () => {\r\n    const dispatch = useDispatch()\r\n    const orders = useSelector((state: { orders: OrderModel[] }) => state.orders);\r\n    const orderIdInEdit = useSelector((state: { sessionState: SessionModel }) => state.sessionState.orderIdInEdit);\r\n    const addClickHandler = (_event: any) => {\r\n        dispatch({\r\n            type: ActionsTypes.ADD_NEW_ORDER,\r\n            payload: {}\r\n        })\r\n    }\r\n\r\n    return (\r\n        <Box>\r\n            <Box sx={{\r\n                display: 'flex',\r\n                flexDirection: 'row',\r\n                alignItems: 'center',\r\n                mb: '10px',\r\n                justifyContent: 'center',\r\n                minWidth: '30vw',\r\n            }}>\r\n                <AddButton addClickHandler={addClickHandler}/>\r\n            </Box>\r\n            <Box>\r\n                {orders.map((o) => (\r\n                    <OrderCar orderId={o.id} key={o.id} isInEdit={orderIdInEdit === o.id}/>\r\n                ))}\r\n\r\n            </Box>\r\n        </Box>\r\n\r\n\r\n    )\r\n\r\n}\r\n","import * as React from 'react';\r\nimport {useEffect, useRef, useState} from 'react';\r\nimport Button from '@mui/material/Button';\r\nimport TextField from '@mui/material/TextField';\r\nimport Dialog from '@mui/material/Dialog';\r\nimport DialogActions from '@mui/material/DialogActions';\r\nimport DialogContent from '@mui/material/DialogContent';\r\nimport DialogTitle from '@mui/material/DialogTitle';\r\nimport {translations} from '../../services/translations';\r\nimport {VehicleModel} from '../../models/Vehicle.model';\r\nimport {Box, ToggleButton, ToggleButtonGroup} from '@mui/material';\r\nimport {SxProps} from '@mui/system';\r\nimport {Delete} from '@mui/icons-material';\r\n\r\ninterface VehicleEditDialogProps {\r\n    open: boolean;\r\n    vehicleData: VehicleModel | null;\r\n    onDelete: (id: string | null) => void;\r\n    onClose: (vehicleUpdate: VehicleModel | null) => void;\r\n}\r\n\r\nexport const VehicleEditDialog = (props: VehicleEditDialogProps) => {\r\n    const {\r\n        onClose,\r\n        onDelete,\r\n        open,\r\n        vehicleData\r\n    } = props;\r\n\r\n    const [seatsValue, setSeatsValue] = useState(vehicleData?.seats || '5');\r\n    const [didDialogJustClosed, setDidDialogJustClosed] = useState(false);\r\n\r\n    if (didDialogJustClosed && open) {\r\n        setSeatsValue(vehicleData?.seats || '5');\r\n\r\n        setDidDialogJustClosed(false);\r\n    }\r\n\r\n    const nameValueRef: any = useRef('')\r\n    const commentsValueRef: any = useRef('')\r\n    const filedWrapper: SxProps = {width: '230px'}\r\n    const handleCloseCancel = () => {\r\n        onClose(null);\r\n        setDidDialogJustClosed(true)\r\n    };\r\n    useEffect(() => {\r\n        // Update the document title using the browser API\r\n\r\n        // document.title = `You clicked ${count} times`;\r\n    });\r\n    const handleCloseEdit = (): void => {\r\n        let editedData: VehicleModel | null = null;\r\n        if (vehicleData) {\r\n            editedData = {...vehicleData};\r\n            editedData.seats = seatsValue;\r\n            editedData.vehicleName = nameValueRef?.current?.value || vehicleData?.vehicleName || '';\r\n            editedData.Comments = commentsValueRef?.current?.value || vehicleData?.Comments || '';\r\n        }\r\n\r\n        onClose(editedData);\r\n        setDidDialogJustClosed(true)\r\n    };\r\n    const handleCloseDelete = (): void => {\r\n        onDelete(vehicleData?.id || '');\r\n        setDidDialogJustClosed(true)\r\n    };\r\n    const handleSeatsValueChanged = (event: any, value: '7' | '5'): void => {\r\n\r\n        setSeatsValue(value);\r\n\r\n    }\r\n    return (\r\n        <div>\r\n\r\n            <Dialog open={open} onClose={handleCloseCancel}>\r\n                <DialogTitle> {vehicleData?.vehicleName}</DialogTitle>\r\n                <DialogContent>\r\n                    <Box sx={{...filedWrapper}}>\r\n                        <TextField\r\n                            autoFocus\r\n                            margin=\"dense\"\r\n                            id=\"vehicle-rename-dialog-text-field\"\r\n                            label={translations.NewName}\r\n                            type=\"text\"\r\n\r\n                            variant=\"standard\"\r\n                            defaultValue={vehicleData?.vehicleName}\r\n                            inputRef={nameValueRef}\r\n                            onKeyUp={(event) => {\r\n                                if (event.key === 'Enter') {\r\n                                    handleCloseEdit()\r\n                                }\r\n                            }}\r\n                        />\r\n                    </Box>\r\n                    <Box sx={{...filedWrapper}}>\r\n                        <TextField\r\n\r\n                            margin=\"dense\"\r\n                            id=\"vehicle-comments-dialog-text-field\"\r\n                            label={translations.Comments}\r\n                            type=\"text\"\r\n                            fullWidth\r\n                            variant=\"standard\"\r\n                            defaultValue={vehicleData?.Comments}\r\n                            inputRef={commentsValueRef}\r\n                            onKeyUp={(event) => {\r\n                                if (event.key === 'Enter') {\r\n                                    handleCloseEdit()\r\n                                }\r\n                            }}\r\n                        />\r\n                    </Box>\r\n\r\n                    <Box dir={'ltr'} sx={{\r\n\r\n                        flexDirection: 'row',\r\n                        alignItems: 'center',\r\n                        justifyContent: 'center',\r\n                        marginTop: '1em',\r\n                        display: 'flex'\r\n                    }}>\r\n                        <ToggleButtonGroup\r\n                            color=\"primary\"\r\n                            // value={seatsValue}\r\n                            // defaultValue={vehicleData?.seats || '5'}\r\n                            exclusive\r\n                            onChange={(event, value) => {\r\n\r\n                                handleSeatsValueChanged(event, value)\r\n                            }}\r\n\r\n                        >\r\n                            <ToggleButton selected={seatsValue === '7'} key={'7'} value=\"7\"\r\n                                          dir={'rtl'}>7 {translations.seats} </ToggleButton>\r\n                            <ToggleButton selected={seatsValue === '5'} key={'5'} value=\"5\"\r\n                                          dir={'rtl'}>5 {translations.seats} </ToggleButton>\r\n\r\n                        </ToggleButtonGroup>\r\n                    </Box>\r\n                    <Box sx={{\r\n\r\n                        flexDirection: 'row',\r\n                        alignItems: 'center',\r\n                        justifyContent: 'center',\r\n                        marginTop: '1em',\r\n                        display: 'flex'\r\n                    }}>\r\n                        {(vehicleData?.id !== '0') ? (\r\n                            <Button variant=\"contained\" onClick={handleCloseDelete} aria-label=\"add\" size=\"large\">\r\n                                <Delete/> {translations.Delete}\r\n                            </Button>) : null}\r\n                    </Box>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button id={'vehicle-edit-cancel-button'} onClick={handleCloseCancel}>{translations.Cancel}</Button>\r\n                    <Button id={'vehicle-edit-approve-button'} onClick={handleCloseEdit}>{translations.Approve}</Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n        </div>\r\n    );\r\n}\r\n","import React, {useState} from 'react'\r\nimport {translations} from '../../services/translations';\r\nimport {SxProps} from '@mui/system';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {ActionsTypes} from '../../store/types.actions';\r\nimport {VehicleModel} from '../../models/Vehicle.model';\r\nimport {Add, TimeToLeave} from '@mui/icons-material';\r\nimport {Badge, Box, Button} from '@mui/material';\r\nimport {VehicleEditDialog} from '../Dialogs/vehicle-edit-dialog';\r\nimport {defaultVehicleValues} from '../../store/store.types';\r\n\r\n\r\nexport const Vehicles = () => {\r\n    const [vehicleEditOpen, setVehicleEditOpen] = useState(false);\r\n    const [vehicleClicked, setVehicleClicked] = useState(null);\r\n    const dispatch = useDispatch();\r\n    const vehicles = useSelector((state: { vehicles: VehicleModel[] }) => state.vehicles || []);\r\n   \r\n    const vehicleButtonDesign: { boxSX: SxProps, variant: 'text' | 'outlined' | 'contained' } = {\r\n        boxSX: {\r\n            display: 'flex',\r\n            margin: '0.5em',\r\n            mt: '0',\r\n            flexDirection: 'column',\r\n            alignItems: 'center',\r\n            justifyContent: 'center'\r\n        },\r\n        variant: 'contained'\r\n    }\r\n    const handleVehicleEditClose = (value: VehicleModel | null) => {\r\n        setVehicleEditOpen(false);\r\n\r\n        if (value) {\r\n            if (value.id === '0') {\r\n                dispatch({\r\n                    type: ActionsTypes.NEW_VEHICLE,\r\n                    payload: {\r\n                        value\r\n                    }\r\n                })\r\n            } else {\r\n                dispatch({\r\n                    type: ActionsTypes.UPDATE_VEHICLE,\r\n                    payload: {\r\n                        value\r\n                    }\r\n                })\r\n            }\r\n\r\n        }\r\n    };\r\n    const handleVehicleDelete = (id: string | null) => {\r\n        setVehicleEditOpen(false);\r\n        if (id) {\r\n            dispatch({\r\n                type: ActionsTypes.DELETE_VEHICLE,\r\n                payload: {\r\n\r\n                    id\r\n                }\r\n            })\r\n        }\r\n    };\r\n    const vehicleClickHandler = (event: any, vehicleId: string) => {\r\n        const foundVehicle = vehicles.find(v => v.id === vehicleId);\r\n        const vehicle: any = vehicleId !== '0' && foundVehicle ? foundVehicle : {\r\n            ...defaultVehicleValues,\r\n            id: '0'\r\n        };\r\n        setVehicleClicked(vehicle);\r\n        setVehicleEditOpen(true)\r\n\r\n    }\r\n\r\n    return (\r\n        <Box>\r\n            <Box sx={{\r\n                fontSize: 'large',\r\n                // height: '150px',\r\n                mb: '1em',\r\n                display: 'flex',\r\n                flexDirection: 'row',\r\n                alignItems: 'start',\r\n                justifyContent: 'space-around'\r\n            }}>\r\n\r\n                {vehicles.map((v: VehicleModel, index: number) => (\r\n                    <Box key={index} sx={{\r\n                        ...vehicleButtonDesign\r\n                            .boxSX\r\n                    }}>\r\n                        <Button variant={vehicleButtonDesign\r\n                            .variant} onClick={(event) => {\r\n                            vehicleClickHandler(event, v.id)\r\n                        }}>\r\n                            <Badge color={'warning'} invisible={v.seats === '5'} badgeContent={7}>\r\n                                <TimeToLeave sx={{\r\n                                    width: '1.2em',\r\n                                    height: '1.2em'\r\n                                }}/>\r\n                            </Badge>\r\n\r\n                            {v.vehicleName}</Button>\r\n                    </Box>))}\r\n                <Box sx={{\r\n                    ...vehicleButtonDesign\r\n                        .boxSX\r\n                }}>\r\n                    <Button variant={vehicleButtonDesign\r\n                        .variant} onClick={(event) => vehicleClickHandler(event, '0')}>\r\n                        <Add sx={{\r\n                            width: '1.2em',\r\n                            height: '1.2em'\r\n                        }}/> {translations.AddVehicles} </Button>\r\n\r\n                </Box>\r\n            </Box>\r\n            <VehicleEditDialog vehicleData={vehicleClicked} open={vehicleEditOpen} onClose={handleVehicleEditClose}\r\n                               onDelete={handleVehicleDelete}/>\r\n\r\n        </Box>\r\n\r\n\r\n    )\r\n\r\n}\r\n","import React from 'react';\r\nimport {Box, MenuItem, Select, SelectChangeEvent, Typography} from '@mui/material';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {SidurRecord, SidurStore} from '../../store/store.types';\r\nimport {ActionsTypes} from '../../store/types.actions';\r\nimport {translations} from '../../services/translations';\r\nimport {LocationGroup} from '../../models/Location.model';\r\n\r\n\r\nexport const LocationGroupSelect = () => {\r\n    const dispatch = useDispatch();\r\n    const locationGroups: LocationGroup[] = useSelector((state: { LocationGroups: LocationGroup[] }) => state.LocationGroups || []);\r\n    const sidurId = useSelector((state: SidurStore) => state.sidurId)\r\n    const sidurCollection = useSelector((state: SidurStore) => state.sidurCollection);\r\n    const currenSidur = sidurCollection.find(s => s.id === sidurId) as SidurRecord\r\n    const currentSidurLocationGroupId = currenSidur.locationGroupIdForSidur;\r\n    const orders = useSelector((state: SidurStore) => state.orders);\r\n    const sketches = currenSidur.sketches;\r\n    const isNewSidur: boolean = orders.length === 0 && sketches.length === 0\r\n\r\n\r\n    const handleLocationGroupChanged = (event: any, _child: React.ReactNode) => {\r\n\r\n        const chosenLocationGroup = event.target.value as string;\r\n\r\n        dispatch({\r\n            type: ActionsTypes.CHANGE_SIDUR_LOCATION_GROUP,\r\n            payload: {id: chosenLocationGroup}\r\n        })\r\n\r\n\r\n    }\r\n\r\n\r\n    return (\r\n        <Box>\r\n            {isNewSidur ? <Box sx={{\r\n                display: 'flex',\r\n                flexDirection: 'row',\r\n                alignItems: 'center',\r\n                justifyContent: 'start',\r\n                mb: '10px'\r\n            }}>\r\n                <Typography\r\n                    variant=\"h6\"\r\n                    noWrap\r\n                    component=\"div\"\r\n                    sx={{\r\n                        display: {\r\n                            xs: 'none',\r\n                            sm: 'block',\r\n                            fontWight: 'regular'\r\n                        }\r\n                    }}\r\n                >  &nbsp;\r\n                    {translations.LocationBaseSidurText} &nbsp; </Typography>\r\n                <Select dir={'rtl'} disableUnderline={true} variant={'standard'} value={currentSidurLocationGroupId}\r\n                        sx={{\r\n                            //  color: 'black',\r\n                            fontSize: '1.25rem',\r\n                            fontWeight: 'normal'\r\n                        }}\r\n                        onChange={(event: SelectChangeEvent<any>, child: React.ReactNode) => {\r\n                            handleLocationGroupChanged(event, child)\r\n                        }}>\r\n\r\n                    {locationGroups.map((oneLocationGroup: LocationGroup) => <MenuItem\r\n                        key={oneLocationGroup.id}\r\n                        value={oneLocationGroup.id}> {oneLocationGroup.name} &nbsp; </MenuItem>)}\r\n                </Select>\r\n\r\n\r\n            </Box> : null}\r\n\r\n        </Box>\r\n\r\n\r\n    )\r\n\r\n\r\n}\r\n","import React from 'react'\r\nimport {Orders} from '../components/Orders/orders';\r\nimport {Vehicles} from '../components/Vehicles/vehicles';\r\nimport {LocationGroupSelect} from '../components/LocationGroupSelect/location-group-select';\r\n\r\n\r\nexport const OrdersLayout = () => (<>\r\n        <LocationGroupSelect/>\r\n        <Vehicles/>\r\n        <Orders/>\r\n    </>\r\n\r\n)\r\n","import React from 'react'\r\nimport {Box} from '@mui/material';\r\nimport {useSelector} from 'react-redux';\r\nimport {DisplaySettings} from '../store/store.types';\r\nimport {SketchesContainer} from '../components/Sketch/SketchesContainer';\r\nimport {LocationGroupEditWrapper} from '../components/LocationsEdit/location-group-edit-wrapper';\r\nimport {OrdersLayout} from './orders-layout';\r\nimport {Route, Routes} from 'react-router-dom';\r\n\r\n\r\nexport const MainLayout = () => {\r\n    const displaySetting: DisplaySettings = useSelector((state: { displaySetting: DisplaySettings }) => state.displaySetting);\r\n    let displaySketches: boolean = false;\r\n    let displayOrders: boolean = true;\r\n    let displayLocations: boolean = false\r\n\r\n    switch (displaySetting?.view) {\r\n        case 'orders':\r\n            displayOrders = true;\r\n            displaySketches = false;\r\n            break;\r\n        case 'sketch':\r\n            displayOrders = false;\r\n            displaySketches = true;\r\n            break;\r\n        case 'locationsView':\r\n            displayOrders = false;\r\n            displaySketches = false;\r\n            displayLocations = true\r\n            break;\r\n        default:\r\n            break;\r\n\r\n    }\r\n\r\n    return (\r\n\r\n        <main>\r\n            <Box sx={{margin: '20px'}} flexDirection=\"row\" display=\"flex\" alignItems=\"start\" justifyContent=\"start\">\r\n                <Box flexDirection=\"column\" flexWrap=\"wrap\" display=\"flex\" alignItems=\"start\" justifyContent=\"start\">\r\n                    <Routes>\r\n                        <Route path=\"/sketch\" element={<SketchesContainer/>}/>\r\n                        <Route path=\"/orders\" element={<OrdersLayout/>}/>\r\n                        <Route path=\"/locations\" element={<LocationGroupEditWrapper/>}/>\r\n \r\n                    </Routes>\r\n\r\n                </Box>\r\n\r\n\r\n            </Box>\r\n\r\n        </main>\r\n\r\n\r\n    )\r\n\r\n}\r\n","import React from 'react'\r\n\r\nimport {themeMain} from '../hoc/themes';\r\nimport {ThemeProvider} from '@mui/material';\r\nimport {AppNavBar} from '../components/NavBar/app-nav-bar';\r\nimport {Loading} from '../components/Loading/loading';\r\nimport {RouterMain} from '../router/router-main';\r\nimport {MainLayout} from './main-layout';\r\n\r\n\r\nexport const AppLayout = () => {\r\n \r\n\r\n    return (\r\n        <ThemeProvider theme={themeMain}>\r\n            <div className=\"app-background\" dir={'rtl'}>\r\n                <RouterMain>\r\n                    <AppNavBar/>\r\n                    <Loading/>\r\n\r\n                    <MainLayout/>\r\n\r\n                </RouterMain>\r\n\r\n            </div>\r\n        </ThemeProvider>\r\n\r\n    )\r\n\r\n}\r\n","import React from 'react';\r\nimport './App.css';\r\n\r\nimport {AppLayout} from '../layouts/app-layout';\r\n\r\nfunction App() {\r\n   \r\n    return (\r\n        <AppLayout/>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","import {OrderModel} from '../../models/Order.model';\r\n\r\nexport interface SuggestionModel {\r\n    driveId: string | string [];\r\n}\r\n\r\nexport interface SidurBuildSettings {\r\n    custom: any\r\n}\r\n\r\nexport enum OrderMetaStatus {\r\n    None = 0,\r\n    Approved = 1,\r\n    Pending = 2,\r\n}\r\n\r\nexport interface OrderMetaDataModel {\r\n    id: string\r\n    order: OrderModel,\r\n    start: number\r\n    finish: number,\r\n    length: number,\r\n    status: OrderMetaStatus\r\n}\r\n\r\nexport const BuilderConstants: Object = {\r\n    drivesToResolve: 'DtoRes'\r\n}\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import {ActionsTypes} from './types.actions';\r\nimport {AppConstants, defaultVehicleValues, IAction, SidurRecord, SidurStore} from './store.types';\r\nimport {OrderModel} from '../models/Order.model';\r\nimport {Utils} from '../services/utils';\r\nimport {translations} from '../services/translations';\r\nimport {StoreUtils} from './store-utils';\r\nimport {CloneUtil} from '../services/clone-utility';\r\nimport {LocationGroup} from '../models/Location.model';\r\n\r\nexport type SidurReducerFunctions =\r\n    ActionsTypes.RENAME_SIDUR\r\n    | ActionsTypes.DELETE_SIDUR\r\n    | ActionsTypes.ADD_NEW_SIDUR\r\n    | ActionsTypes.CHOOSE_SIDUR\r\n    | ActionsTypes.CLONE_SIDUR\r\n    | ActionsTypes.ARCHIVE_SIDUR\r\n    | ActionsTypes.MOVE_TO_ACTIVE_SIDUR\r\n    | ActionsTypes.DELETE_FOREVER_SIDUR\r\n    | ActionsTypes.CHANGE_SIDUR_LOCATION_GROUP\r\n\r\nconst DefaultSidur: SidurRecord = {\r\n    id: '1',\r\n    dbId: '',\r\n    Name: 'הסידור החדש שלי',\r\n    orders: [],\r\n    deletedOrders: [],\r\n    vehicles: [defaultVehicleValues],\r\n    sketches: [],\r\n    chosenSketch: '',\r\n    locationGroupIdForSidur: ''\r\n\r\n}\r\n\r\nexport const SidurReducer: Record<SidurReducerFunctions, (state: SidurStore, action: IAction) => SidurStore> = {\r\n    [ActionsTypes.CHOOSE_SIDUR]: (state: SidurStore, action: IAction): SidurStore => {\r\n        let newState = {...state}\r\n        const chosenSidurId = action.payload.id;\r\n        const previousSidurId = newState.sidurId;\r\n        if (chosenSidurId === previousSidurId) {\r\n            return newState\r\n        }\r\n        newState.sidurId = chosenSidurId;\r\n        const chosenSidurObj: SidurRecord | undefined = newState.sidurCollection.find((record: SidurRecord) => record.id === chosenSidurId);\r\n        if (chosenSidurObj !== undefined) {\r\n            const previousSidurObj: SidurRecord | undefined = newState.sidurCollection.find((record: SidurRecord) => record.id === previousSidurId);\r\n            if (previousSidurObj !== undefined) {\r\n                const NewPreviousSidurObj = {...previousSidurObj};\r\n                NewPreviousSidurObj.orders = newState.orders.map(o => ({\r\n                    ...o\r\n                }));\r\n                NewPreviousSidurObj.deletedOrders = newState.deletedOrders.map(o => ({\r\n                    ...o\r\n                }));\r\n                NewPreviousSidurObj.sketches = newState.sketches.map(o => ({\r\n                    ...o\r\n                }));\r\n                NewPreviousSidurObj.vehicles = newState.vehicles.map(o => ({\r\n                    ...o\r\n                }));\r\n\r\n                NewPreviousSidurObj.defaultOrderValues = {\r\n                    ...NewPreviousSidurObj\r\n                        .defaultOrderValues\r\n                } as OrderModel;\r\n                newState.sidurCollection = newState.sidurCollection.map((sidur: SidurRecord) => {\r\n                    if (sidur.id === previousSidurId) {\r\n                        return NewPreviousSidurObj\r\n                    } else {\r\n                        return sidur\r\n                    }\r\n                })\r\n            }\r\n\r\n            newState = setChosenSidur(newState, chosenSidurObj);\r\n\r\n\r\n        }\r\n        newState = StoreUtils.updateRecordBrief(newState);\r\n        return newState\r\n\r\n    },\r\n    [ActionsTypes.RENAME_SIDUR]: (state: SidurStore, action: IAction): SidurStore => {\r\n        let newState = {...state}\r\n        const sidurId = action.payload.id// newState.sidurId;\r\n        const newName = action.payload.value;\r\n        if (!newName) {\r\n            return newState\r\n        }\r\n        newState.sidurCollection = newState.sidurCollection.map((sidur: SidurRecord) => {\r\n            if (sidur.id === sidurId) {\r\n                const updatedSidur = {...sidur};\r\n                updatedSidur.Name = newName;\r\n                return updatedSidur\r\n            } else {\r\n                return sidur\r\n            }\r\n        });\r\n        newState = StoreUtils.updateRecordBrief(newState);\r\n        return newState\r\n    },\r\n    [ActionsTypes.CHANGE_SIDUR_LOCATION_GROUP]: (state: SidurStore, action: IAction): SidurStore => {\r\n        let newState = {...state}\r\n        const sidurId = newState.sidurId;\r\n        const locationGroupId = action.payload.id;\r\n\r\n        newState.sidurCollection = newState.sidurCollection.map((sidur: SidurRecord) => {\r\n            if (sidur.id === sidurId) {\r\n                const updatedSidur = {...sidur};\r\n                updatedSidur.locationGroupIdForSidur = locationGroupId;\r\n                return updatedSidur\r\n            } else {\r\n                return sidur\r\n            }\r\n        });\r\n        const newLocationGroup = newState.LocationGroups.find(lg => lg.id === locationGroupId) as LocationGroup;\r\n        newState.Locations = newLocationGroup.Locations;\r\n        newState = StoreUtils.updateRecordBrief(newState);\r\n        return newState\r\n    },\r\n    [ActionsTypes.DELETE_SIDUR]: (state: SidurStore, action: IAction): SidurStore => {\r\n        let newState = {...state}\r\n        const sidurIdToDelete = action.payload.id// newState.sidurId;\r\n        if (sidurIdToDelete.includes(AppConstants.ArchiveIdPrefix)) {\r\n            newState.sidurArchive = newState.sidurArchive.map(sidur => {\r\n                if (sidurIdToDelete === sidur.id) {\r\n                    const updatedSidur = {...sidur};\r\n                    updatedSidur.id = updatedSidur.id.replace(AppConstants.ArchiveIdPrefix, AppConstants.deleteIdPrefix);\r\n                    return updatedSidur\r\n                }\r\n                return sidur\r\n            })\r\n        } else {\r\n            let deletedSidur: SidurRecord | undefined = newState.sidurCollection.find(s => s.id === sidurIdToDelete);\r\n            if (deletedSidur) {\r\n                deletedSidur = {...deletedSidur};\r\n                deletedSidur.id = 'Del' + deletedSidur.id;\r\n                newState.sidurArchive.push(deletedSidur);\r\n            }\r\n            newState.sidurCollection = newState.sidurCollection.filter(s => s.id !== sidurIdToDelete);\r\n        }\r\n\r\n        if (!newState.sidurCollection.length) {\r\n            newState.sidurCollection.push(getDefaultSidur(newState));\r\n        }\r\n        if (newState.sidurId === sidurIdToDelete) {\r\n            const chosenSidurAfterDelete: SidurRecord = newState.sidurCollection[0];\r\n            newState.sidurId = chosenSidurAfterDelete.id\r\n            newState = setChosenSidur(newState, chosenSidurAfterDelete);\r\n        }\r\n\r\n        newState = StoreUtils.updateRecordBrief(newState);\r\n        return newState\r\n    },\r\n    [ActionsTypes.ARCHIVE_SIDUR]: (state: SidurStore, action: IAction): SidurStore => {\r\n        let newState = {...state}\r\n        const sidurIdToArchive = action.payload.id;\r\n        if (sidurIdToArchive.includes(AppConstants.deleteIdPrefix)) {\r\n            newState.sidurArchive = newState.sidurArchive.map(sidur => {\r\n                if (sidurIdToArchive === sidur.id) {\r\n                    const updatedSidur = {...sidur};\r\n                    updatedSidur.id = updatedSidur.id.replace(AppConstants.ArchiveIdPrefix, AppConstants.deleteIdPrefix);\r\n                    return updatedSidur\r\n                }\r\n                return sidur\r\n            })\r\n        } else {\r\n            let archivedSidur: SidurRecord | undefined = newState.sidurCollection.find(s => s.id === sidurIdToArchive);\r\n            if (archivedSidur) {\r\n                archivedSidur = {...archivedSidur};\r\n                archivedSidur.id = AppConstants.ArchiveIdPrefix + archivedSidur.id;\r\n                newState.sidurArchive.push(archivedSidur);\r\n                newState.sidurCollection = newState.sidurCollection.filter(s => s.id !== sidurIdToArchive);\r\n            }\r\n\r\n        }\r\n\r\n\r\n        if (!newState.sidurCollection.length) {\r\n            newState.sidurCollection.push(getDefaultSidur(newState));\r\n        }\r\n        if (newState.sidurId === sidurIdToArchive) {\r\n            const chosenSidurAfterArchive: SidurRecord = newState.sidurCollection[0];\r\n            newState.sidurId = chosenSidurAfterArchive.id\r\n            newState = setChosenSidur(newState, chosenSidurAfterArchive);\r\n        }\r\n        newState = StoreUtils.updateRecordBrief(newState);\r\n        return newState\r\n    },\r\n    [ActionsTypes.ADD_NEW_SIDUR]: (state: SidurStore, action: IAction): SidurStore => {\r\n        let newState = {...state}\r\n        const newSidurId = Utils.getNextId(getAllSidurIDs(state));\r\n        const loactionGroupId = newState.sessionState.locationGroupInEdit || newState.LocationGroups[0].id as string;\r\n        const newSidur: SidurRecord = {\r\n            id: newSidurId,\r\n            dbId: '',\r\n            Name: translations.Sidur + ' ' + newSidurId,\r\n            orders: [],\r\n            deletedOrders: [],\r\n            vehicles: [defaultVehicleValues],\r\n            defaultOrderValues: newState.defaultOrderValues,\r\n            sketches: [],\r\n            chosenSketch: '',\r\n            locationGroupIdForSidur: loactionGroupId,\r\n        }\r\n        newState.sidurCollection = newState.sidurCollection.map(c => c);\r\n        newState.sidurCollection.push(newSidur);\r\n        newState.sidurId = newSidurId;\r\n        newState = setChosenSidur(newState, newSidur);\r\n        newState = StoreUtils.updateRecordBrief(newState);\r\n        return newState\r\n    },\r\n    [ActionsTypes.CLONE_SIDUR]: (state: SidurStore, action: IAction): SidurStore => {\r\n        let newState = {...state}\r\n        const sidurIdToClone = action.payload.id;// newState.sidurId;\r\n        let sidurForCloning: SidurRecord | undefined = newState.sidurCollection.find(s => s.id === sidurIdToClone);\r\n\r\n        if (sidurForCloning) {\r\n            const newSidur: SidurRecord = CloneUtil.deepCloneSidur(sidurForCloning);\r\n            newSidur.Name = translations.CopyOf + ' ' + newSidur.Name;\r\n            const newSidurId = Utils.getNextId(getAllSidurIDs(state));\r\n            newSidur.dbId = '';\r\n            newSidur.id = newSidurId;\r\n            newState.sidurCollection = newState.sidurCollection.map(c => c);\r\n            newState.sidurCollection.push(newSidur);\r\n            newState.sidurId = newSidurId;\r\n            newState = setChosenSidur(newState, newSidur);\r\n        }\r\n        newState = StoreUtils.updateRecordBrief(newState);\r\n        return newState\r\n    },\r\n    [ActionsTypes.MOVE_TO_ACTIVE_SIDUR]: (state: SidurStore, action: IAction): SidurStore => {\r\n        let newState = {...state}\r\n        const sidurIdToActivate = action.payload.id;\r\n\r\n        let toActivateSidur: SidurRecord | undefined = newState.sidurArchive.find(s => s.id === sidurIdToActivate);\r\n        if (toActivateSidur) {\r\n            toActivateSidur = {...toActivateSidur};\r\n\r\n            toActivateSidur.id = StoreUtils.removeIdPrefix(toActivateSidur.id);\r\n            newState.sidurCollection.push(toActivateSidur);\r\n            newState.sidurArchive = newState.sidurArchive.filter(s => s.id !== sidurIdToActivate);\r\n        }\r\n\r\n        newState = StoreUtils.updateRecordBrief(newState);\r\n        return newState\r\n    },\r\n    [ActionsTypes.DELETE_FOREVER_SIDUR]: (state: SidurStore, action: IAction): SidurStore => {\r\n        let newState = {...state}\r\n        const sidurIdToDeleteForever = action.payload.id;\r\n        newState.sidurArchive = newState.sidurArchive.filter(s => s.id !== sidurIdToDeleteForever);\r\n        newState = StoreUtils.updateRecordBrief(newState);\r\n        return newState\r\n    },\r\n\r\n\r\n}\r\nconst setChosenSidur = (state: SidurStore, chosenSidur: SidurRecord): SidurStore => {\r\n    const newState = {...state};\r\n\r\n    newState.orders = chosenSidur?.orders.map(o => ({...o})) || []\r\n    newState.vehicles = chosenSidur?.vehicles.map(o => ({...o})) || []\r\n    newState.deletedOrders = chosenSidur?.deletedOrders?.map(o => ({...o})) || [];\r\n    newState.sketches = chosenSidur?.sketches?.map(o => ({...o})) || [];\r\n    newState.sessionState.orderIdInEdit = null;\r\n    newState.sessionState.dataHolderForCurrentOrderInEdit = null;\r\n    const newLocationGroup = newState.LocationGroups.find(lg => lg.id === chosenSidur.locationGroupIdForSidur) as LocationGroup;\r\n    newState.Locations = newLocationGroup.Locations;\r\n    return newState\r\n\r\n}\r\nconst getAllSidurIDs = (state: SidurStore): string[] => {\r\n    const collectionIds = state.sidurCollection.map(o => o.id);\r\n    const ArchiveIdsWithWords = state.sidurArchive.map(o => o.id);\r\n\r\n    const ArchiveIds = ArchiveIdsWithWords.map(id => StoreUtils.removeIdPrefix(id))\r\n    return [...ArchiveIds, ...collectionIds]\r\n}\r\n\r\nconst getDefaultSidur = (state: SidurStore): SidurRecord => {\r\n    const newSidur: SidurRecord = {...DefaultSidur};\r\n    newSidur.id = Utils.getNextId(getAllSidurIDs(state));\r\n    const allNames = [...state.sidurCollection.map(o => o.Name), ...state.sidurArchive.map(o => o.Name)];\r\n    if (allNames.some(name => name === newSidur.Name)) {\r\n        newSidur.Name = newSidur.Name + ' ' + newSidur.id\r\n    }\r\n    return newSidur\r\n\r\n}\r\n","import {AppConstants, defaultOrderValues, IAction, SidurStore} from './store.types';\r\nimport {StoreUtils} from './store-utils';\r\nimport {Utils} from '../services/utils';\r\nimport {OrderModel} from '../models/Order.model';\r\nimport {ActionsTypes} from './types.actions';\r\n\r\nexport type OrderReducerFunctions =\r\n    ActionsTypes.DELETE_ORDER\r\n    | ActionsTypes.UPDATE_ORDER\r\n    | ActionsTypes.ADD_NEW_ORDER\r\n    | ActionsTypes.UPDATE_ORDER_IN_EDIT\r\n    | ActionsTypes.CLICKED_ORDER\r\n    | ActionsTypes.CLONE_ORDER\r\n\r\n\r\nexport const OrderReducer: Record<OrderReducerFunctions, (state: SidurStore, action: IAction) => SidurStore> = {\r\n    [ActionsTypes.ADD_NEW_ORDER]: (state: SidurStore, action: IAction): SidurStore => {\r\n        let newState = {...state}\r\n        const newId = Utils.getNextId(getAllOrdersIDs(state))\r\n        const newOrder: OrderModel = {\r\n            ...defaultOrderValues,\r\n            id: newId\r\n        }\r\n        newState.orders = [...newState.orders]\r\n        newState.orders.unshift(newOrder);\r\n        newState.sidurCollection = StoreUtils.UpdateSidurCollectionWithCurrenSidur(newState)\r\n        StoreUtils.HandleReducerSaveToLocalStorage(newState);\r\n        return newState\r\n    },\r\n    [ActionsTypes.CLONE_ORDER]: (state: SidurStore, action: IAction): SidurStore => {\r\n        let newState = {...state};\r\n        newState = updateOrdersWithEditedOrder(newState)\r\n        const cloneOriginId = action.payload.id\r\n        const cloneOriginOrder = newState.orders.find(order => cloneOriginId === order.id);\r\n        if (cloneOriginOrder) {\r\n            const orderIndex = newState.orders.indexOf(cloneOriginOrder) + 1;\r\n            const newId = Utils.getNextId(getAllOrdersIDs(state))\r\n            const newOrder: OrderModel = {\r\n                ...cloneOriginOrder,\r\n                id: newId\r\n            }\r\n            newState.orders = [...newState.orders]\r\n            newState.orders.splice(orderIndex, 0, newOrder)\r\n\r\n            newState.sidurCollection = StoreUtils.UpdateSidurCollectionWithCurrenSidur(newState)\r\n            StoreUtils.HandleReducerSaveToLocalStorage(newState);\r\n        }\r\n\r\n        return newState\r\n    },\r\n    [ActionsTypes.UPDATE_ORDER_IN_EDIT]: (state: SidurStore, action: IAction): SidurStore => {\r\n        let newState = {...state}\r\n        newState.sessionState.dataHolderForCurrentOrderInEdit = action.payload;\r\n        return newState\r\n    },\r\n    [ActionsTypes.UPDATE_ORDER]: (state: SidurStore, action: IAction): SidurStore => {\r\n        let newState = {...state}\r\n        const orderId = action.payload.id;\r\n        newState.orders = newState.orders.map(order => {\r\n            if ((orderId === order.id) && newState.sessionState.dataHolderForCurrentOrderInEdit) {\r\n                order = newState.sessionState.dataHolderForCurrentOrderInEdit\r\n            }\r\n            return order\r\n        });\r\n        newState.sessionState.dataHolderForCurrentOrderInEdit = null;\r\n        newState.sessionState.orderIdInEdit = null;\r\n        newState.sidurCollection = StoreUtils.UpdateSidurCollectionWithCurrenSidur(newState)\r\n        StoreUtils.HandleReducerSaveToLocalStorage(newState);\r\n        return newState\r\n    },\r\n    [ActionsTypes.CLICKED_ORDER]: (state: SidurStore, action: IAction): SidurStore => {\r\n        let newState = {...state}\r\n        const clickedOrderId = action.payload.id;\r\n        newState = updateOrdersWithEditedOrder(newState)\r\n        newState.sessionState.dataHolderForCurrentOrderInEdit = null;\r\n        newState.sessionState.orderIdInEdit = clickedOrderId\r\n        return newState\r\n    },\r\n    [ActionsTypes.DELETE_ORDER]: (state: SidurStore, action: IAction): SidurStore => {\r\n        let newState = {...state}\r\n        const deleteOrderId = action.payload.id;\r\n        newState.orders = newState.orders.filter(order => deleteOrderId !== order.id)\r\n        if (newState.sessionState.dataHolderForCurrentOrderInEdit && newState.sessionState.dataHolderForCurrentOrderInEdit.id === deleteOrderId) {\r\n            newState.sessionState.dataHolderForCurrentOrderInEdit = null;\r\n        }\r\n        if (newState.sessionState.orderIdInEdit === deleteOrderId) {\r\n            newState.sessionState.orderIdInEdit = null;\r\n        }\r\n        newState.sidurCollection = StoreUtils.UpdateSidurCollectionWithCurrenSidur(newState)\r\n        StoreUtils.HandleReducerSaveToLocalStorage(newState);\r\n        return newState\r\n    },\r\n\r\n}\r\nconst getAllOrdersIDs = (state: SidurStore): string[] => {\r\n    const ordersIds = state.orders.map(o => o.id);\r\n    const deletedIdsWithWords = state.deletedOrders.map(o => o.id);\r\n    const replaceIdsNames: RegExp = new RegExp(AppConstants.ArchiveIdPrefix + '|' + AppConstants.deleteIdPrefix, 'g');\r\n    ;\r\n    const deletedIds = deletedIdsWithWords.map(o => o.replace(replaceIdsNames, ''))\r\n    return [...deletedIds, ...ordersIds]\r\n}\r\nconst updateOrdersWithEditedOrder = (state: SidurStore): SidurStore => {\r\n    const currentOrderId = state?.sessionState?.dataHolderForCurrentOrderInEdit?.id\r\n    if (currentOrderId) {\r\n        state.orders = state.orders.map(order => {\r\n            if ((currentOrderId === order.id) && state.sessionState.dataHolderForCurrentOrderInEdit) {\r\n                order = state.sessionState.dataHolderForCurrentOrderInEdit\r\n            }\r\n            return order\r\n        });\r\n    }\r\n\r\n    return state\r\n}\r\n\r\n\r\n","import {OrderModel} from '../models/Order.model';\r\nimport {DriveType} from '../models/DriveType.enum';\r\nimport {defaultOrderValues} from '../store/store.types';\r\nimport {LocationModel} from '../models/Location.model';\r\nimport {translations} from './translations';\r\n\r\nconst NewRowToken = 'New_row_';\r\n\r\ninterface EshbalOrder {\r\n    name: string,\r\n    hour: string,\r\n    text: string\r\n}\r\n\r\n\r\nconst stringIntoRows = (str: string): string [] => {\r\n    return str.split(NewRowToken).filter(s => s.replace(/\\t/g, '').length > 5);\r\n}\r\n\r\nconst DetectFormRows = (completeText: string): string => {\r\n    return completeText.replace(/\\n((0?[1-9]|[12][0-9]|3[01])[/-](0?[1-9]|1[012])[/-]\\d{4})/g, NewRowToken + '$1');\r\n}\r\nconst rowsToEshbalOrders = (rows: string [][]): EshbalOrder[] => {\r\n    let EshbalOrders: EshbalOrder[] = [];\r\n    rows.forEach((row: string[], index: number) => {\r\n        if (row[1].length > 1 && index > 0) {\r\n            let name = row[1];\r\n            for (let c = 2; c < 8; c += 2) {\r\n                if (row[c].length > 1) {\r\n                    const newRide: EshbalOrder = {\r\n                        name: name,\r\n                        hour: row[c],\r\n                        text: row[c + 1],\r\n                    }\r\n                    EshbalOrders.push(newRide);\r\n\r\n                }\r\n            }\r\n        }\r\n    })\r\n    return EshbalOrders\r\n}\r\n\r\nconst ordersToOrderModel = (orders: EshbalOrder[]): OrderModel[] => {\r\n    let idNum = 99;\r\n    const defaultValues: OrderModel = {...defaultOrderValues}\r\n    return orders.map((eOrder) => {\r\n        const appOrder: OrderModel = {\r\n            id: idNum.toString(),\r\n            flexibility: defaultValues.flexibility,\r\n            passengers: '1',\r\n            location: '',\r\n            TypeOfDrive: null,\r\n            startHour: convertTimeTo4Digits(eOrder.hour),\r\n            Comments: eOrder.text,\r\n            driverName: eOrder.name,\r\n            finishHour: ''\r\n        }\r\n        idNum++;\r\n        return appOrder;\r\n    });\r\n}\r\n/**\r\n * @description Searches for Time (number in hour pattern in the text, if the returned number is not equal to start hour, returns them\r\n * @param {OrderModel} order\r\n * @returns {{anotherTime: string | null}}\r\n */\r\nconst searchAnotherTimeInText = (order: OrderModel): { anotherTime: string | null } => {\r\n    const text = order.Comments;\r\n    const results: { anotherTime: string | null } = {anotherTime: null}\r\n    const matchingTime = text.matchAll(/(\\d{1,2}:\\d\\d)/g);\r\n    const matchingArray = Array.from(matchingTime)\r\n\r\n    if (matchingArray && matchingArray[0]) {\r\n        matchingArray.forEach(t => {\r\n            const convertedTime = convertTimeTo4Digits(t.toString());\r\n            if (convertedTime !== order.startHour) {\r\n                results.anotherTime = convertedTime\r\n            }\r\n        })\r\n    }\r\n\r\n    if (!results.anotherTime) {\r\n        const matchingTime = text.matchAll(/(1\\d|20|21|22|23)/g);\r\n        const matchingArray = Array.from(matchingTime)\r\n\r\n        if (matchingArray && matchingArray[0]) {\r\n            matchingArray.forEach(t => {\r\n                const convertedTime = convert2DigitTimeTo4Digits(t.toString());\r\n                if (convertedTime !== order.startHour) {\r\n                    results.anotherTime = convertedTime\r\n                }\r\n            })\r\n        }\r\n    }\r\n\r\n    return results\r\n}\r\nconst searchLocationInText = (text: string, locations: LocationModel[]): { locationFound: LocationModel | null, typeOfDrive: DriveType | null } => {\r\n    const allLocations: LocationModel[] = [...locations];\r\n    const results: { locationFound: LocationModel | null, typeOfDrive: DriveType | null } = {\r\n        locationFound: null,\r\n        typeOfDrive:\r\n            null\r\n    }\r\n    allLocations.forEach((location: LocationModel) => {\r\n        if (text.includes(location.name)) {\r\n            results.locationFound = location;\r\n        }\r\n    });\r\n\r\n    if (results.locationFound) {\r\n        const locName = results.locationFound.name;\r\n        const fromPrefixes = [translations.From, translations.fromLocationWithThe];\r\n        const toPrefixes = [translations.toLocation, translations.toLocationLe];\r\n        const tzamudPrefix = [translations.inLocation];\r\n        if (fromPrefixes.some(pre => text.includes(pre + locName))) {\r\n            results.typeOfDrive = DriveType.OneWayFrom\r\n        }\r\n        if (toPrefixes.some(pre => text.includes(pre + locName))) {\r\n            results.typeOfDrive = DriveType.OneWayTo\r\n        }\r\n        if (tzamudPrefix.some(pre => text.includes(pre + locName))) {\r\n            results.typeOfDrive = DriveType.Tsamud\r\n        }\r\n    }\r\n    if (text.includes(translations.TsamudWord)) {\r\n        results.typeOfDrive = DriveType.Tsamud\r\n    }\r\n\r\n    return results\r\n}\r\nconst convertTimeTo4Digits = (time: string): string => {\r\n    if (time.match(/^\\d:\\d\\d$/)) {\r\n        return '0' + time\r\n    } else {\r\n        return time\r\n    }\r\n}\r\nconst convert2DigitTimeTo4Digits = (time: string): string => {\r\n    if (time.match(/^\\d\\d$/)) {\r\n        return time + ':00'\r\n    } else {\r\n        return time\r\n    }\r\n}\r\nconst getLocationAndTypeFromComments = (orders: OrderModel[], locations: LocationModel[]): OrderModel[] => {\r\n    orders.map(order => {\r\n        const LocationSearchResult = searchLocationInText(order.Comments, locations);\r\n        if (LocationSearchResult.locationFound) {\r\n            order.location = LocationSearchResult.locationFound.id\r\n        }\r\n        if (LocationSearchResult.typeOfDrive) {\r\n            order.TypeOfDrive = LocationSearchResult.typeOfDrive\r\n        }\r\n        const anotherTimeSearchResults = searchAnotherTimeInText(order);\r\n        if (anotherTimeSearchResults.anotherTime && anotherTimeSearchResults.anotherTime !== order.startHour) {\r\n            order.finishHour = anotherTimeSearchResults.anotherTime\r\n        }\r\n        return order\r\n    })\r\n    return orders\r\n}\r\nexport const ImportOrdersFromText = (text: string, locations: LocationModel[]): OrderModel[] => {\r\n    // text = stringValue;\r\n    const rowsWithoutUserLineBreaks = DetectFormRows(text)\r\n    const rows = stringIntoRows(rowsWithoutUserLineBreaks);\r\n    const rowsWithColumns = rows.map(r => r.split(/\\t/g));\r\n    const orders: EshbalOrder[] = rowsToEshbalOrders(rowsWithColumns);\r\n    let appOrders: OrderModel[] = ordersToOrderModel(orders)\r\n    //TODO - AD 19 Ad 6\r\n    return getLocationAndTypeFromComments(appOrders, locations);\r\n\r\n\r\n}\r\n","import {FileUploadType, IAction, SaveDataModel, SidurStore} from './store.types';\r\nimport {StoreUtils} from './store-utils';\r\nimport {DownloadFile} from '../services/download-file';\r\nimport {Utils} from '../services/utils';\r\nimport {ActionsTypes} from './types.actions';\r\nimport {ImportOrdersFromText} from '../services/import-orders-from-text';\r\nimport {OrderModel} from '../models/Order.model';\r\n\r\nexport type ImportReducerFunctions =\r\n    ActionsTypes.EXPORT_ALL |\r\n    ActionsTypes.IMPORT_FILE_UPLOADED |\r\n    ActionsTypes.IMPORT_ORDERS_AS_TEXT\r\n\r\nexport const ImportExportReducer: Record<ImportReducerFunctions, (state: SidurStore, action: IAction) => SidurStore> = {\r\n    [ActionsTypes.EXPORT_ALL]: (state: SidurStore, action: IAction): SidurStore => {\r\n        let newState = {...state}\r\n        newState.sidurCollection = StoreUtils.UpdateSidurCollectionWithCurrenSidur(newState);\r\n        const saveObj: SaveDataModel = StoreUtils.buildSaveDataModel(newState)\r\n        DownloadFile('sidur.json', JSON.stringify(saveObj))\r\n        return newState\r\n\r\n    },\r\n    [ActionsTypes.IMPORT_FILE_UPLOADED]: (state: SidurStore, action: IAction): SidurStore => {\r\n        let newState = {...state}\r\n        const uploadType: FileUploadType = action.payload.uploadType;\r\n        const fileAsString: string = action.payload.fileAsString;\r\n        try {\r\n            const fileObj: any = JSON.parse(fileAsString);\r\n            if (fileObj && fileObj?.savedStore && fileObj?.hash) {\r\n                Utils.validateHash(fileObj?.savedStore, fileObj?.hash);\r\n                const storeFromFile = {\r\n                    ...fileObj\r\n                        .savedStore\r\n                }\r\n                switch (uploadType) {\r\n                    case FileUploadType.uploadFullDataAndAdd:\r\n                        newState = storeFromFile\r\n                        break;\r\n                }\r\n\r\n            }\r\n\r\n        } catch (e) {\r\n\r\n        } finally {\r\n\r\n        }\r\n        return newState\r\n\r\n\r\n    },\r\n    [ActionsTypes.IMPORT_ORDERS_AS_TEXT]: (state: SidurStore, action: IAction): SidurStore => {\r\n        let newState = {...state}\r\n        const importedOrders: string = action.payload.importedOrders;\r\n        const modeledImportedOrders: OrderModel[] = ImportOrdersFromText(importedOrders, newState.Locations);\r\n        newState.orders = newState.orders.concat(modeledImportedOrders)\r\n      \r\n        return newState\r\n\r\n\r\n    },\r\n\r\n\r\n}\r\n","export const DownloadFile = (filename: string, text: string) => {\r\n    const element = document.createElement('a');\r\n    element.setAttribute('href', 'data:text/plain;charset=utf-8,' + encodeURIComponent(text));\r\n    element.setAttribute('download', filename);\r\n    element.style.display = 'none';\r\n    document.body.appendChild(element);\r\n    element.click();\r\n    document.body.removeChild(element);\r\n}\r\n","import {ActionsTypes} from './types.actions';\r\n\r\n\r\nimport {IAction, SidurStore} from './store.types';\r\nimport {StoreUtils} from './store-utils';\r\nimport {Utils} from '../services/utils';\r\nimport {VehicleModel} from '../models/Vehicle.model';\r\n\r\nexport type VehicleReducerFunctions =\r\n    ActionsTypes.DELETE_VEHICLE\r\n    | ActionsTypes.UPDATE_VEHICLE\r\n    | ActionsTypes.NEW_VEHICLE\r\n\r\n\r\nexport const VehicleReducer: Record<VehicleReducerFunctions, (state: SidurStore, action: IAction) => SidurStore> = {\r\n    [ActionsTypes.NEW_VEHICLE]: (state: SidurStore, action: IAction): SidurStore => {\r\n        let newState = {...state}\r\n        const newId = Utils.getNextId(state.vehicles.map(v => v.id));\r\n\r\n        const newVehicle: VehicleModel = action.payload.value;\r\n        newVehicle.id = newId;\r\n\r\n        const existingNames = state.vehicles.map(v => v.vehicleName);\r\n        if (existingNames.includes(newVehicle.vehicleName)) {\r\n            newVehicle.vehicleName = newVehicle.vehicleName + ' ' + newVehicle.id.toString()\r\n        }\r\n        //const newVehicleId = get\r\n        newState.vehicles = [...newState.vehicles, newVehicle]\r\n\r\n\r\n        newState.sidurCollection = StoreUtils.UpdateSidurCollectionWithCurrenSidur(newState);\r\n        StoreUtils.HandleReducerSaveToLocalStorage(newState);\r\n        return newState\r\n    },\r\n\r\n    [ActionsTypes.UPDATE_VEHICLE]: (state: SidurStore, action: IAction): SidurStore => {\r\n        let newState = {...state};\r\n        const updateVehicle: VehicleModel = action.payload.value;\r\n        if (updateVehicle) {\r\n            const vehicleId = updateVehicle.id;\r\n            const existingNames = state.vehicles.filter(v => v.id !== vehicleId).map(v => v.vehicleName);\r\n            if (existingNames.includes(updateVehicle.vehicleName)) {\r\n                updateVehicle.vehicleName = updateVehicle.vehicleName + ' ' + updateVehicle.id.toString()\r\n            }\r\n            const newIdIfNeeded = Utils.getNextId(state.vehicles.map(v => v.id));\r\n\r\n            newState.vehicles = newState.vehicles.map(vehicle => {\r\n                if ((vehicleId === vehicle.id)) {\r\n                    vehicle = {...updateVehicle};\r\n                    if (vehicleId === '0') {\r\n                        vehicle.id = newIdIfNeeded\r\n                    }\r\n                }\r\n                return vehicle\r\n            });\r\n\r\n        }\r\n        newState.sidurCollection = StoreUtils.UpdateSidurCollectionWithCurrenSidur(newState)\r\n        StoreUtils.HandleReducerSaveToLocalStorage(newState);\r\n        return newState\r\n    },\r\n\r\n    [ActionsTypes.DELETE_VEHICLE]: (state: SidurStore, action: IAction): SidurStore => {\r\n        let newState = {...state}\r\n        const deleteVehiclerId = action.payload.id;\r\n        newState.vehicles = newState.vehicles.filter(vehicle => deleteVehiclerId !== vehicle.id)\r\n\r\n\r\n        newState.sidurCollection = StoreUtils.UpdateSidurCollectionWithCurrenSidur(newState)\r\n        StoreUtils.HandleReducerSaveToLocalStorage(newState);\r\n        return newState\r\n    },\r\n\r\n}\r\n\r\n \r\n","import {IAction, SidurStore} from './store.types';\r\nimport {ActionsTypes} from './types.actions';\r\n\r\nexport type DisplayReducerFunctions =\r\n    ActionsTypes.CHANGE_VIEW | ActionsTypes.STOP_LOADING_ANIMATION |\r\n    ActionsTypes.START_LOADING_ANIMATION\r\n\r\n\r\nexport const DisplayReducer: Record<DisplayReducerFunctions, (state: SidurStore, action: IAction) => SidurStore> = {\r\n    [ActionsTypes.CHANGE_VIEW]: (state: SidurStore, action: IAction): SidurStore => {\r\n        let newState = {...state}\r\n        newState.displaySetting = {...newState.displaySetting}\r\n        newState.displaySetting.view = action.payload.value\r\n        return newState\r\n    },\r\n    [ActionsTypes.STOP_LOADING_ANIMATION]: (state: SidurStore, action: IAction): SidurStore => {\r\n        let newState = {...state}\r\n        newState.sessionState = {...newState.sessionState};\r\n        newState.sessionState.isAnimationRunning = false;\r\n\r\n        return newState\r\n    },\r\n    [ActionsTypes.START_LOADING_ANIMATION]: (state: SidurStore, action: IAction): SidurStore => {\r\n        let newState = {...state}\r\n        newState.sessionState = {...newState.sessionState};\r\n        newState.sessionState.isAnimationRunning = true\r\n        return newState\r\n    }\r\n\r\n\r\n}\r\n\r\n\r\n\r\n","import {OrderModel} from '../models/Order.model';\r\nimport {OrderMetaDataModel, OrderMetaStatus} from './models/sidurBuilder.models';\r\nimport {DriveType} from '../models/DriveType.enum';\r\nimport {CloneUtil} from '../services/clone-utility';\r\nimport {Utils} from '../services/utils';\r\nimport {LocationModel} from '../models/Location.model';\r\n\r\nexport const SidurBuilderBuildOrdersMetaData = (orders: OrderModel[], locations: LocationModel[], _buildSettings: any = null): OrderMetaDataModel[] => {\r\n    let idCount: number = 1;\r\n    const clonedOrders: OrderModel[] = orders.map((o: OrderModel) => CloneUtil.deep(o, 'OrderModel'));\r\n\r\n    const ordersMeta: OrderMetaDataModel[] = clonedOrders.map((order: OrderModel) => {\r\n        const start: number = Utils.hourTextToDecimal(order.startHour);\r\n        const finish: number = Utils.hourTextToDecimal(order.finishHour);\r\n        const length = finish - start;\r\n        const metaOrder: OrderMetaDataModel = {\r\n            id: idCount.toString(),\r\n            order: {...order},\r\n            finish: finish,\r\n            start: start,\r\n            length: length,\r\n            status: OrderMetaStatus.None\r\n        }\r\n        idCount++;\r\n\r\n        return metaOrder\r\n    })\r\n\r\n    // Estimate finish hour of non-Tsamud Drives\r\n    ordersMeta.forEach((metaOrder: OrderMetaDataModel) => {\r\n        const driveType = metaOrder.order.TypeOfDrive\r\n        if (driveType === DriveType.Tsamud) {\r\n            return\r\n        }\r\n        const locationId = metaOrder.order.location;\r\n        let locationObj = locations.find(l => l.id === locationId);\r\n        if (!locationObj) {\r\n            locationObj = locations.find(l => l.name === 'Other') ||\r\n                {\r\n                    EnName: 'Other',\r\n                    id: '999',\r\n                    name: 'אחר',\r\n                    ETA: 45,\r\n                }\r\n\r\n        }\r\n        const EtaInHours = Utils.minutesToFraction(locationObj.ETA);\r\n        switch (driveType) {\r\n            case DriveType.OneWayTo:\r\n                metaOrder.finish = metaOrder.start + EtaInHours * 2;\r\n                break;\r\n            case DriveType.OneWayFrom:\r\n                metaOrder.finish = metaOrder.start + EtaInHours;\r\n                metaOrder.start = metaOrder.start - EtaInHours;\r\n                break;\r\n        }\r\n        \r\n        metaOrder.length = metaOrder.finish - metaOrder.start;\r\n\r\n\r\n    })\r\n\r\n    return ordersMeta\r\n}\r\n\r\n\r\n","import {translations} from '../services/translations';\r\n\r\nexport const SidurBuilderTools = {\r\n\r\n    createSketchName(id: string): string {\r\n        switch (id) {\r\n\r\n            case '1':\r\n                return translations.first\r\n            case '2':\r\n                return translations.second\r\n            case '3':\r\n                return translations.third\r\n            default:\r\n                return translations.number + ' ' + id\r\n\r\n        }\r\n    },\r\n    EnumeratorConstructor(startId: number = 1): { getId: () => number, getStrId: () => string, } {\r\n        let currentId = startId;\r\n        return {\r\n            getId() {\r\n                return ++currentId\r\n            },\r\n            getStrId() {\r\n                return (++currentId).toString()\r\n            }\r\n        }\r\n    }\r\n\r\n}\r\n","import {DriveModel, VehicleScheduleModel} from '../models/Sketch.model';\r\nimport {VehicleModel} from '../models/Vehicle.model';\r\nimport {OrderMetaDataModel, OrderMetaStatus} from './models/sidurBuilder.models';\r\nimport {OrderModel} from '../models/Order.model';\r\nimport {Utils} from '../services/utils';\r\nimport {LanguageUtilities} from '../services/language-utilities';\r\nimport {SidurBuilderTools} from './sidurBuilder.tools';\r\nimport {LocationModel} from '../models/Location.model';\r\n\r\ninterface OrdMetaScheduleData {\r\n    start: number,\r\n    finish: number,\r\n    id: string,\r\n    passengers: string\r\n\r\n}\r\n\r\nexport const SidurBuilderBuildVehiclesAndUnAssigned = (orders: OrderMetaDataModel[], vehicles: VehicleModel[], locations: LocationModel[], _buildSettings: any = null): {\r\n    vehicleSchedules: VehicleScheduleModel[],\r\n    unassignedOrders: OrderModel[],\r\n    assignedOrders: OrderModel[],\r\n\r\n} => {\r\n    const enumerator = SidurBuilderTools.EnumeratorConstructor();\r\n    const metaOrderScheduleData: OrdMetaScheduleData[] = orders.map((o: OrderMetaDataModel) => {\r\n        return {\r\n            start: o.start,\r\n            finish: o.finish,\r\n            id: o.id,\r\n            passengers: o.order.passengers\r\n        }\r\n    });\r\n    metaOrderScheduleData.sort((a, b) => (a.start > b.start) ? 1 : -1);\r\n\r\n    const vehicleSchedules: VehicleScheduleModel [] = vehicles.map((vehicle: VehicleModel) => {\r\n        const vehicleSchedule: VehicleScheduleModel = {\r\n            id: enumerator.getStrId(),\r\n            VehicleId: vehicle.id,\r\n            drives: [],\r\n            Comments: vehicle.Comments\r\n        }\r\n        return vehicleSchedule\r\n    })\r\n    vehicleSchedules.forEach((schedule: VehicleScheduleModel) => {\r\n        let currentHour: number = 0.1;\r\n        metaOrderScheduleData.forEach(metaOrder => {\r\n            if (metaOrder.start > currentHour) {\r\n                const relevantMetaDrive: OrderMetaDataModel | undefined = orders.find(meta => meta.id === metaOrder.id)\r\n                if (!relevantMetaDrive || relevantMetaDrive.status === OrderMetaStatus.Approved) {\r\n                    return\r\n                }\r\n                currentHour = metaOrder.finish;\r\n\r\n                const newDrive: DriveModel = {\r\n                    ...relevantMetaDrive\r\n                        .order,\r\n                    startHour: Utils.DecimalTimeToHourText(metaOrder.start),\r\n                    finishHour: Utils.DecimalTimeToHourText(metaOrder.finish),\r\n\r\n                    implementsOrders: [relevantMetaDrive\r\n                        .order.id],\r\n                    description: '',\r\n                    id: enumerator.getStrId(),\r\n                }\r\n                const fakeOrder: OrderModel = {\r\n                    ...relevantMetaDrive\r\n                        .order,\r\n                    startHour: Utils.DecimalTimeToHourText(metaOrder.start),\r\n\r\n                    finishHour: Utils.DecimalTimeToHourText(metaOrder.finish),\r\n\r\n\r\n                }\r\n                newDrive.description = LanguageUtilities.buildBriefText(fakeOrder, locations).driverAndLocation;\r\n\r\n\r\n                schedule.drives.push(newDrive);\r\n                relevantMetaDrive.status = OrderMetaStatus.Approved;\r\n\r\n\r\n            }\r\n        })\r\n    })\r\n    const unassignedOrders: OrderModel[] = orders.filter(o => o.status === OrderMetaStatus.None).map(o => o.order);\r\n\r\n    const assignedOrders: OrderModel[] = orders.filter(o => o.status !== OrderMetaStatus.None).map(o => o.order);\r\n    return {\r\n        vehicleSchedules,\r\n        unassignedOrders,\r\n        assignedOrders\r\n    }\r\n}\r\n","import {ActionsTypes} from './types.actions';\r\n\r\n\r\nimport {IAction, SidurRecord, SidurStore} from './store.types';\r\nimport {StoreUtils} from './store-utils';\r\nimport {Utils} from '../services/utils';\r\nimport {SidurBuilder} from '../sidurBuilder/sidurBuilder.main';\r\nimport {SketchModel} from '../models/Sketch.model';\r\nimport {CloneUtil} from '../services/clone-utility';\r\nimport {translations} from '../services/translations';\r\n\r\nexport type SketchReducerFunctions =\r\n    | ActionsTypes.NEW_SKETCH\r\n    | ActionsTypes.CHOOSE_SKETCH\r\n    | ActionsTypes.RENAME_SKETCH\r\n    | ActionsTypes.DELETE_SKETCH\r\n    | ActionsTypes.CLONE_SKETCH;\r\n\r\n\r\nexport const SketchReducer: Record<SketchReducerFunctions, (state: SidurStore, action: IAction) => SidurStore> = {\r\n    [ActionsTypes.NEW_SKETCH]: (state: SidurStore, action: IAction): SidurStore => {\r\n        let newState = {...state}\r\n        if (!newState.sketches) {\r\n            newState.sketches = [];\r\n        }\r\n        const newId = Utils.getNextId(newState.sketches.map(v => v.id));\r\n        const chosenSidurObj: SidurRecord | undefined = newState.sidurCollection.find((record: SidurRecord) => record.id === newState.sidurId);\r\n        if (chosenSidurObj !== undefined) {\r\n            const deconstructedSidur = {...chosenSidurObj};\r\n            deconstructedSidur.orders = newState.orders;\r\n            deconstructedSidur.sketches = newState.sketches;\r\n            deconstructedSidur.vehicles = newState.vehicles;\r\n            const newSketch = SidurBuilder(deconstructedSidur, newState.Locations);\r\n            newSketch.id = newId;\r\n            if (!newState.sketches) {\r\n                newState.sketches = [];\r\n            }\r\n            newState.sketches.push(newSketch);\r\n            newState.sessionState.SketchIdInEdit = newId;\r\n        }\r\n\r\n\r\n        newState = StoreUtils.updateSidurRecordWithSketchChanges(newState)\r\n        StoreUtils.HandleReducerSaveToLocalStorage(newState);\r\n        return newState\r\n    },\r\n    [ActionsTypes.CHOOSE_SKETCH]: (state: SidurStore, action: IAction): SidurStore => {\r\n        let newState = {...state}\r\n        const chosenSketchId = action.payload.id;\r\n        const previousSketchId = newState.sessionState.SketchIdInEdit;\r\n        if (chosenSketchId === previousSketchId) {\r\n            return newState\r\n        }\r\n        newState.sessionState.SketchIdInEdit = chosenSketchId;\r\n        const chosenSketchObj: SketchModel | undefined = newState.sketches.find((record: SketchModel) => record.id === chosenSketchId);\r\n        if (chosenSketchObj !== undefined) {\r\n            \r\n\r\n            const thisSidurInCollection: SidurRecord | undefined = newState.sidurCollection.find((sidur: SidurRecord) => sidur.id === newState.sidurId);\r\n\r\n            if (thisSidurInCollection) {\r\n                thisSidurInCollection.chosenSketch = chosenSketchId;\r\n            }\r\n\r\n\r\n        }\r\n        return newState\r\n\r\n    },\r\n    [ActionsTypes.RENAME_SKETCH]: (state: SidurStore, action: IAction): SidurStore => {\r\n        let newState = {...state}\r\n        const sketchId = action.payload.id// newState.sidurId;\r\n        const newName = action.payload.value;\r\n        if (!newName) {\r\n            return newState\r\n        }\r\n        newState.sketches = newState.sketches.map((sketch: SketchModel) => {\r\n            if (sketch.id === sketchId) {\r\n                const updatedSketch = {...sketch};\r\n                updatedSketch.name = newName;\r\n                return updatedSketch\r\n            } else {\r\n                return sketch\r\n            }\r\n        });\r\n        newState = StoreUtils.updateSidurRecordWithSketchChanges(newState)\r\n        return newState\r\n    },\r\n    [ActionsTypes.DELETE_SKETCH]: (state: SidurStore, action: IAction): SidurStore => {\r\n        let newState = {...state}\r\n        const sketchToDelete = action.payload.id;\r\n        let posOfDeletedSketch = -1;\r\n        let deletedSketch: SketchModel | undefined = newState.sketches.find(s => s.id === sketchToDelete);\r\n        if (deletedSketch) {\r\n            posOfDeletedSketch = newState.sketches.indexOf(deletedSketch);\r\n            deletedSketch = {...deletedSketch};\r\n            deletedSketch.id = 'Del' + deletedSketch.id;\r\n            // newState.sidurArchive.push(deletedSketch);\r\n        }\r\n\r\n        newState.sketches = newState.sketches.filter(s => s.id !== sketchToDelete);\r\n        if (newState.sketches.length) {\r\n            const sketchesIds = newState.sketches.map(s => s.id);\r\n            if (posOfDeletedSketch > 1) {\r\n                newState.sessionState.SketchIdInEdit = sketchesIds[posOfDeletedSketch - 1]\r\n            } else {\r\n                newState.sessionState.SketchIdInEdit = sketchesIds[0]\r\n            }\r\n        } else {\r\n            newState.sessionState.SketchIdInEdit = ''\r\n        }\r\n\r\n        newState = StoreUtils.updateSidurRecordWithSketchChanges(newState)\r\n        return newState\r\n\r\n    },\r\n    [ActionsTypes.CLONE_SKETCH]: (state: SidurStore, action: IAction): SidurStore => {\r\n        let newState = {...state}\r\n        const sketchIdToClone = action.payload.id;// newState.sidurId;\r\n        let sketchForCloning: SketchModel | undefined = newState.sketches.find(s => s.id === sketchIdToClone);\r\n\r\n        if (sketchForCloning) {\r\n            const newSketch: SketchModel = CloneUtil.deepCloneSketch(sketchForCloning);\r\n            newSketch.name = translations.CopyOf + ' ' + newSketch.name;\r\n            const newSketchId = Utils.getNextId(getAllSketchesIDs(state));\r\n            newSketch.id = newSketchId\r\n            newState.sketches = newState.sketches.map(c => c);\r\n            newState.sketches.push(newSketch);\r\n            newState.sessionState.SketchIdInEdit = newSketchId;\r\n            // newState = setChosenSidur(newState, newSketch);\r\n        }\r\n        newState = StoreUtils.updateSidurRecordWithSketchChanges(newState)\r\n        return newState\r\n\r\n    },\r\n\r\n\r\n}\r\n\r\nconst getAllSketchesIDs = (state: SidurStore): string[] => {\r\n    const sketchesIds = state.sketches.map(o => o.id);\r\n\r\n    return [...sketchesIds]\r\n}\r\n","import {SidurRecord} from '../store/store.types';\r\nimport {SketchModel, VehicleScheduleModel} from '../models/Sketch.model';\r\nimport {OrderMetaDataModel, SidurBuildSettings} from './models/sidurBuilder.models';\r\nimport {SidurBuilderBuildOrdersMetaData} from './sidurBuilder.buildOrdersMetaData';\r\nimport {SidurBuilderBuildVehiclesAndUnAssigned} from './sidurBuilder.buildVehicles';\r\nimport {SidurBuilderTools} from './sidurBuilder.tools';\r\nimport {Utils} from '../services/utils';\r\nimport {OrderModel} from '../models/Order.model';\r\nimport {LocationModel} from '../models/Location.model';\r\n\r\nexport const SidurBuilder = (Sidur: SidurRecord, locations: LocationModel[], _buildSettings: any = null): SketchModel => {\r\n\r\n    const settings: SidurBuildSettings = {custom: null}\r\n    const ordersMetaData: OrderMetaDataModel[] = SidurBuilderBuildOrdersMetaData(Sidur.orders, locations, settings)\r\n    const BuildResult = SidurBuilderBuildVehiclesAndUnAssigned(ordersMetaData, Sidur.vehicles, locations, settings);\r\n    const initialVehicles: VehicleScheduleModel [] = BuildResult.vehicleSchedules;\r\n    const unassignedOrders: OrderModel [] = BuildResult.unassignedOrders;\r\n    const assignedOrders: OrderModel [] = BuildResult.assignedOrders;\r\n\r\n\r\n    const baseSketch: SketchModel = {\r\n        id: '2',\r\n        name: 'first sketch',\r\n        vehicleSchedules: initialVehicles,\r\n        Comments: '',\r\n        unassignedOrders: unassignedOrders,\r\n        assignedOrders: assignedOrders\r\n    };\r\n\r\n    baseSketch.id = Utils.getNextId(Sidur.sketches.map(v => v.id));\r\n    baseSketch.name = SidurBuilderTools.createSketchName(baseSketch.id);\r\n\r\n    return baseSketch\r\n}\r\n","import {IAction, SidurStore} from './store.types';\r\nimport {ActionsTypes} from './types.actions';\r\nimport {SketchModel} from '../models/Sketch.model';\r\nimport {OrderModel} from '../models/Order.model';\r\nimport {StoreUtils} from './store-utils';\r\nimport {SketchDriveOrderEditActionEnum} from '../models/SketchDriveOrderEditActionEnum';\r\nimport {SidurEditorService} from '../sidurEditor/sidurEditor.service';\r\nimport {Utils} from '../services/utils';\r\n\r\nexport type PendingOrdersReducerFunctions =\r\n    ActionsTypes.CLICKED_PENDING_ORDER\r\n    | ActionsTypes.CLICKED_CLOSE_PENDING_ORDER\r\n    | ActionsTypes.CLICKED_REMOVE_PENDING_ORDER\r\n    | ActionsTypes.CLICKED_MERGE_PENDING_ORDER\r\n    | ActionsTypes.CLICKED_SPLIT_PENDING_ORDER\r\n    | ActionsTypes.CLICKED_CHANGE_PENDING_ORDER\r\n    | ActionsTypes.CLICKED_CHANGE_TIME_PENDING_ORDER\r\n    | ActionsTypes.CLICKED_REPLACE_EXISTING_PENDING_ORDER\r\n    | ActionsTypes.CLICKED_PUBLIC_TRANSPORT_PENDING_ORDER\r\n    | ActionsTypes.CLICKED_ADD_TO_PENDING_PENDING_ORDER\r\n    | ActionsTypes.REMOVE_PENDING_ORDER_STATUS\r\n    | ActionsTypes.CLICKED_MOVE_TO_TOP_PENDING_ORDER\r\n    | ActionsTypes.CLICKED_MOVE_TO_BOTTOM_PENDING_ORDER\r\n    | ActionsTypes.CLICKED_ADD_TO_VEHICLE_PENDING_ORDER\r\n\r\n\r\nexport const PendingOrdersReducer: Record<PendingOrdersReducerFunctions, (state: SidurStore, action: IAction) => SidurStore> = {\r\n    [ActionsTypes.CLICKED_PENDING_ORDER]: (state: SidurStore, action: IAction): SidurStore => {\r\n        let newState = {...state}\r\n        if (action.payload.id) {\r\n            newState.sessionState.pendingOrderIdInEdit = action.payload.id;\r\n            StoreUtils.abortSessionPendingOrderState(newState);\r\n        }\r\n\r\n        StoreUtils.HandleReducerSaveToLocalStorage(newState);\r\n        return newState\r\n    },\r\n    [ActionsTypes.CLICKED_CLOSE_PENDING_ORDER]: (state: SidurStore, action: IAction): SidurStore => {\r\n\r\n        let newState = {...state}\r\n        newState.sessionState.pendingOrderIdInEdit = null;\r\n        StoreUtils.abortSessionPendingOrderState(newState);\r\n        newState.sessionState = {...newState.sessionState};\r\n        StoreUtils.HandleReducerSaveToLocalStorage(newState);\r\n        return newState\r\n    },\r\n\r\n    [ActionsTypes.CLICKED_REMOVE_PENDING_ORDER]: (state: SidurStore, action: IAction): SidurStore => {\r\n        let newState = {...state}\r\n        const orderToRemoveId = action.payload.id\r\n        const SketchIdInEdit = state.sessionState.SketchIdInEdit\r\n\r\n        const sketchObj: SketchModel | undefined = state.sketches.find((record: SketchModel) => record.id === SketchIdInEdit);\r\n        if (sketchObj) {\r\n            const orderToRemove: OrderModel | undefined = sketchObj.unassignedOrders.find(o => o.id === orderToRemoveId);\r\n            if (orderToRemove) {\r\n                sketchObj.assignedOrders = [...sketchObj.assignedOrders]\r\n                sketchObj.assignedOrders.push(orderToRemove);\r\n                sketchObj.unassignedOrders = [...sketchObj.unassignedOrders];\r\n                sketchObj.unassignedOrders = sketchObj.unassignedOrders.filter(o => o.id !== orderToRemoveId);\r\n                newState.sketches = newState.sketches.map((sketch: SketchModel) => {\r\n                    if (sketch.id === SketchIdInEdit) {\r\n                        return {...sketchObj}\r\n                    } else {\r\n                        return sketch\r\n                    }\r\n                });\r\n            }\r\n            newState.sessionState.pendingOrderIdInEdit = null;\r\n        }\r\n        StoreUtils.abortSessionPendingOrderState(newState);\r\n        StoreUtils.updateSidurRecordWithSketchChanges(newState)\r\n        StoreUtils.HandleReducerSaveToLocalStorage(newState);\r\n        return newState\r\n    },\r\n\r\n    [ActionsTypes.CLICKED_MOVE_TO_TOP_PENDING_ORDER]: (state: SidurStore, action: IAction): SidurStore => {\r\n        let newState = {...state}\r\n        const orderToMoveId = action.payload.id\r\n        const SketchIdInEdit = state.sessionState.SketchIdInEdit\r\n\r\n        const sketchObj: SketchModel | undefined = state.sketches.find((record: SketchModel) => record.id === SketchIdInEdit);\r\n        if (sketchObj) {\r\n            const orderToMove: OrderModel | undefined = sketchObj.unassignedOrders.find(o => o.id === orderToMoveId);\r\n            if (orderToMove) {\r\n\r\n                sketchObj.unassignedOrders = sketchObj.unassignedOrders.filter(o => o.id !== orderToMoveId);\r\n                sketchObj.unassignedOrders = [orderToMove, ...sketchObj.unassignedOrders]\r\n                newState.sketches = newState.sketches.map((sketch: SketchModel) => {\r\n                    if (sketch.id === SketchIdInEdit) {\r\n                        return {...sketchObj}\r\n                    } else {\r\n                        return sketch\r\n                    }\r\n                });\r\n            }\r\n            // newState.sessionState.pendingOrderIdInEdit = null;\r\n        }\r\n        StoreUtils.abortSessionPendingOrderState(newState);\r\n        StoreUtils.updateSidurRecordWithSketchChanges(newState)\r\n        StoreUtils.HandleReducerSaveToLocalStorage(newState);\r\n        return newState\r\n    },\r\n    [ActionsTypes.CLICKED_MOVE_TO_BOTTOM_PENDING_ORDER]: (state: SidurStore, action: IAction): SidurStore => {\r\n        let newState = {...state}\r\n        const orderToMoveId = action.payload.id\r\n        const SketchIdInEdit = state.sessionState.SketchIdInEdit\r\n\r\n        const sketchObj: SketchModel | undefined = state.sketches.find((record: SketchModel) => record.id === SketchIdInEdit);\r\n        if (sketchObj) {\r\n            const orderToMove: OrderModel | undefined = sketchObj.unassignedOrders.find(o => o.id === orderToMoveId);\r\n            if (orderToMove) {\r\n                sketchObj.unassignedOrders = sketchObj.unassignedOrders.filter(o => o.id !== orderToMoveId);\r\n                sketchObj.unassignedOrders = [...sketchObj.unassignedOrders, orderToMove]\r\n                newState.sketches = newState.sketches.map((sketch: SketchModel) => {\r\n                    if (sketch.id === SketchIdInEdit) {\r\n                        return {...sketchObj}\r\n                    } else {\r\n                        return sketch\r\n                    }\r\n                });\r\n            }\r\n            newState.sessionState.pendingOrderIdInEdit = null;\r\n        }\r\n        StoreUtils.abortSessionPendingOrderState(newState);\r\n        StoreUtils.updateSidurRecordWithSketchChanges(newState)\r\n        StoreUtils.HandleReducerSaveToLocalStorage(newState);\r\n        return newState\r\n    },\r\n    [ActionsTypes.CLICKED_MERGE_PENDING_ORDER]: (state: SidurStore, action: IAction): SidurStore => {\r\n        let newState = {...state};\r\n        newState.sessionState.pendingOrderInEditAction = SketchDriveOrderEditActionEnum.Merge;\r\n        const SketchIdInEdit = state.sessionState.SketchIdInEdit\r\n\r\n        const sketchObj: SketchModel = state.sketches.find((record: SketchModel) => record.id === SketchIdInEdit) as SketchModel;\r\n        const relavantDrives = SidurEditorService.getRelevantDriveIdsToChoose(sketchObj, newState.sessionState.pendingOrderIdInEdit as string);\r\n        if (relavantDrives.length > 0) {\r\n            newState.sessionState.pendingOrderInEditActionSelectDrives = relavantDrives;\r\n        }\r\n\r\n        StoreUtils.HandleReducerSaveToLocalStorage(newState);\r\n        return newState\r\n    },\r\n    [ActionsTypes.CLICKED_ADD_TO_VEHICLE_PENDING_ORDER]: (state: SidurStore, action: IAction): SidurStore => {\r\n        let newState = {...state};\r\n        newState.sessionState.pendingOrderInEditAction = SketchDriveOrderEditActionEnum.AddToVehicle;\r\n        const SketchIdInEdit = state.sessionState.SketchIdInEdit\r\n\r\n        const sketchObj: SketchModel = state.sketches.find((record: SketchModel) => record.id === SketchIdInEdit) as SketchModel;\r\n\r\n\r\n        newState.sessionState.pendingOrderInEditActionSelectDrives = ['noDrivesRealyNeeded'];\r\n\r\n\r\n        StoreUtils.HandleReducerSaveToLocalStorage(newState);\r\n        return newState\r\n    },\r\n    [ActionsTypes.REMOVE_PENDING_ORDER_STATUS]: (state: SidurStore, action: IAction): SidurStore => {\r\n        let newState = {...state};\r\n\r\n        newState.sessionState.pendingOrderInEditAction = null;\r\n        newState.sessionState.pendingOrderInEditActionSelectDrives = null;\r\n\r\n\r\n        StoreUtils.HandleReducerSaveToLocalStorage(newState);\r\n        return newState\r\n    },\r\n    [ActionsTypes.CLICKED_SPLIT_PENDING_ORDER]: (state: SidurStore, action: IAction): SidurStore => {\r\n        let newState = {...state}\r\n        const orderToSplitId = action.payload.id\r\n        const SketchIdInEdit = state.sessionState.SketchIdInEdit\r\n\r\n        const sketchObj: SketchModel | undefined = state.sketches.find((record: SketchModel) => record.id === SketchIdInEdit);\r\n        if (sketchObj) {\r\n            const orderToSplit: OrderModel | undefined = sketchObj.unassignedOrders.find(o => o.id === orderToSplitId);\r\n            if (orderToSplit) {\r\n                const newOrders = SidurEditorService.splitTsamudOrder(orderToSplit, newState.Locations);\r\n                const allSketchOrders = sketchObj.unassignedOrders.concat(sketchObj.assignedOrders);\r\n\r\n                const newId1 = Utils.getNextId(allSketchOrders.map(o => o.id))\r\n                const newId2 = (+newId1 + 1).toString();\r\n                newOrders[0].id = newId1;\r\n                newOrders[1].id = newId2;\r\n                sketchObj.unassignedOrders = sketchObj.unassignedOrders.filter(o => o.id !== orderToSplit.id);\r\n\r\n                sketchObj.unassignedOrders = [newOrders[0], newOrders[1], ...sketchObj.unassignedOrders]\r\n\r\n\r\n                newState.sketches = newState.sketches.map((sketch: SketchModel) => {\r\n                    if (sketch.id === SketchIdInEdit) {\r\n                        return {...sketchObj}\r\n                    } else {\r\n                        return sketch\r\n                    }\r\n                });\r\n            }\r\n            newState.sessionState.pendingOrderIdInEdit = null;\r\n        }\r\n        StoreUtils.abortSessionPendingOrderState(newState);\r\n        StoreUtils.updateSidurRecordWithSketchChanges(newState)\r\n        StoreUtils.HandleReducerSaveToLocalStorage(newState);\r\n        return newState\r\n    },\r\n    [ActionsTypes.CLICKED_CHANGE_PENDING_ORDER]: (state: SidurStore, action: IAction): SidurStore => {\r\n        let newState = {...state}\r\n        StoreUtils.HandleReducerSaveToLocalStorage(newState);\r\n        return newState\r\n    },\r\n    [ActionsTypes.CLICKED_CHANGE_TIME_PENDING_ORDER]: (state: SidurStore, action: IAction): SidurStore => {\r\n        let newState = {...state}\r\n        StoreUtils.HandleReducerSaveToLocalStorage(newState);\r\n        return newState\r\n    },\r\n    [ActionsTypes.CLICKED_REPLACE_EXISTING_PENDING_ORDER]: (state: SidurStore, action: IAction): SidurStore => {\r\n        let newState = {...state};\r\n        newState.sessionState.pendingOrderInEditAction = SketchDriveOrderEditActionEnum.ReplaceExisting;\r\n        const SketchIdInEdit = state.sessionState.SketchIdInEdit\r\n\r\n        const sketchObj: SketchModel = state.sketches.find((record: SketchModel) => record.id === SketchIdInEdit) as SketchModel;\r\n        const relavantDrives = SidurEditorService.getRelevantDriveIdsToChoose(sketchObj, newState.sessionState.pendingOrderIdInEdit as string);\r\n        if (relavantDrives.length > 0) {\r\n            newState.sessionState.pendingOrderInEditActionSelectDrives = relavantDrives;\r\n        }\r\n\r\n        StoreUtils.HandleReducerSaveToLocalStorage(newState);\r\n        return newState\r\n    },\r\n    [ActionsTypes.CLICKED_PUBLIC_TRANSPORT_PENDING_ORDER]: (state: SidurStore, action: IAction): SidurStore => {\r\n        let newState = {...state};\r\n        newState.sessionState.pendingOrderInEditAction = SketchDriveOrderEditActionEnum.publicTransport;\r\n        newState.sessionState.pendingOrderIdInEdit = action.payload.id;\r\n        newState.sessionState.pendingOrderInEditActionSelectDrives = null;\r\n        StoreUtils.HandleReducerSaveToLocalStorage(newState);\r\n        return newState\r\n    },\r\n    [ActionsTypes.CLICKED_ADD_TO_PENDING_PENDING_ORDER]:\r\n        (state: SidurStore, action: IAction): SidurStore => {\r\n            let newState = {...state}\r\n            StoreUtils.HandleReducerSaveToLocalStorage(newState);\r\n            return newState\r\n        },\r\n\r\n\r\n}\r\n\r\n\r\n\r\n","import {ActionsTypes} from './types.actions';\r\n\r\n\r\nimport {IAction, SidurStore} from './store.types';\r\nimport {DriveModel, SketchModel, VehicleScheduleModel} from '../models/Sketch.model';\r\nimport {OrderModel} from '../models/Order.model';\r\nimport {StoreUtils} from './store-utils';\r\nimport {Utils} from '../services/utils';\r\nimport {LanguageUtilities} from '../services/language-utilities';\r\n\r\nexport type SketchDriveReducerFunctions =\r\n    ActionsTypes.DELETE_SKETCH_DRIVE\r\n    | ActionsTypes.UPDATE_SKETCH_DRIVE\r\n    | ActionsTypes.REMOVE_ORDER_FROM_SKETCH_DRIVE\r\n    | ActionsTypes.UPDATE_SKETCH_DRIVE_WITH_MERGED_ORDER\r\n    | ActionsTypes.REPLACE_SKETCH_DRIVE_WITH_ORDER\r\n    | ActionsTypes.ADD_SKETCH_DRIVE_FROM_PENDING_ORDER\r\n\r\n\r\nexport const SketchDriveReducer: Record<SketchDriveReducerFunctions, (state: SidurStore, action: IAction) => SidurStore> = {\r\n\r\n    [ActionsTypes.UPDATE_SKETCH_DRIVE]: (state: SidurStore, action: IAction): SidurStore => {\r\n        let newState = {...state}\r\n        const sketchDriveChanged: DriveModel = action.payload.value\r\n        const SketchIdInEdit = newState.sessionState.SketchIdInEdit;\r\n\r\n        const sketchObj: SketchModel | undefined = newState.sketches.find((record: SketchModel) => record.id === SketchIdInEdit);\r\n\r\n        if (sketchObj !== undefined) {\r\n            const vehicleId = getVehicleIdFromDriveId(state, sketchDriveChanged.id);\r\n            const relevantVehicle = sketchObj.vehicleSchedules.find(v => v.id === vehicleId);\r\n            if (relevantVehicle) {\r\n                relevantVehicle.drives = relevantVehicle.drives.map((d: DriveModel) => {\r\n                    if (d.id === sketchDriveChanged.id) {\r\n                        return sketchDriveChanged\r\n                    } else {\r\n                        return d\r\n                    }\r\n                });\r\n                sortVehicleByStartHour(relevantVehicle);\r\n            }\r\n\r\n\r\n        }\r\n        StoreUtils.HandleReducerSaveToLocalStorage(newState);\r\n        return newState\r\n\r\n    },\r\n    [ActionsTypes.UPDATE_SKETCH_DRIVE_WITH_MERGED_ORDER]: (state: SidurStore, action: IAction): SidurStore => {\r\n        let newState = {...state}\r\n        const sketchDriveChanged: DriveModel = action.payload.value\r\n        const SketchIdInEdit = newState.sessionState.SketchIdInEdit;\r\n        newState.sessionState.pendingOrderInEditAction = null;\r\n        newState.sessionState.pendingOrderInEditActionSelectDrives = null;\r\n        const sketchObj: SketchModel | undefined = newState.sketches.find((record: SketchModel) => record.id === SketchIdInEdit);\r\n\r\n        if (sketchObj !== undefined) {\r\n            const vehicleId = getVehicleIdFromDriveId(state, sketchDriveChanged.id);\r\n            const relevantVehicle = sketchObj.vehicleSchedules.find(v => v.id === vehicleId);\r\n            let pendingOrdersToPassToAssigned: string [] | null = null;\r\n            if (relevantVehicle) {\r\n                relevantVehicle.drives = relevantVehicle.drives.map((d: DriveModel) => {\r\n                    if (d.id === sketchDriveChanged.id) {\r\n                        pendingOrdersToPassToAssigned = d.implementsOrders\r\n                        return sketchDriveChanged\r\n                    } else {\r\n                        return d\r\n                    }\r\n                })\r\n                sortVehicleByStartHour(relevantVehicle)\r\n            }\r\n            if (pendingOrdersToPassToAssigned !== null) {\r\n                const implementedOrders: string [] = pendingOrdersToPassToAssigned as string [];\r\n                const ordersToMoveToAssigned: OrderModel [] = sketchObj.unassignedOrders.filter((o: OrderModel) => implementedOrders.includes(o.id))\r\n                sketchObj.assignedOrders = sketchObj.assignedOrders.concat(ordersToMoveToAssigned);\r\n                sketchObj.unassignedOrders = sketchObj.unassignedOrders.filter((o: OrderModel) => !implementedOrders.includes(o.id))\r\n\r\n\r\n            }\r\n\r\n\r\n        }\r\n\r\n        StoreUtils.HandleReducerSaveToLocalStorage(newState);\r\n        return newState\r\n\r\n    },\r\n    [ActionsTypes.REPLACE_SKETCH_DRIVE_WITH_ORDER]: (state: SidurStore, action: IAction): SidurStore => {\r\n        let newState = {...state}\r\n        const sketchDriveToReplace: DriveModel = action.payload.value;\r\n        const SketchIdInEdit = newState.sessionState.SketchIdInEdit;\r\n        const pendingOrderId = newState.sessionState.pendingOrderIdInEdit;\r\n        newState.sessionState.pendingOrderInEditAction = null;\r\n        newState.sessionState.pendingOrderInEditActionSelectDrives = null;\r\n        const sketchObj: SketchModel | undefined = newState.sketches.find((record: SketchModel) => record.id === SketchIdInEdit);\r\n        const pendingOrder = sketchObj?.unassignedOrders.find(o => o.id === pendingOrderId);\r\n\r\n\r\n        if (sketchObj && pendingOrder) {\r\n            const newDriveId = getNewDriveIdFromSketch(sketchObj);\r\n            const newDriveToInsert: DriveModel = {\r\n                ...pendingOrder,\r\n                id: newDriveId,\r\n                implementsOrders: [pendingOrder.id],\r\n                description: LanguageUtilities.buildBriefText(pendingOrder, newState.Locations).driverAndLocation\r\n            }\r\n            const vehicleId = getVehicleIdFromDriveId(state, sketchDriveToReplace.id);\r\n            const relevantVehicle = sketchObj.vehicleSchedules.find(v => v.id === vehicleId);\r\n            let assignedOrdersPassToPending: string [] | null = null;\r\n            if (relevantVehicle) {\r\n                relevantVehicle.drives = relevantVehicle.drives.map((d: DriveModel) => {\r\n                    if (d.id === sketchDriveToReplace.id) {\r\n                        assignedOrdersPassToPending = d.implementsOrders\r\n                        return newDriveToInsert\r\n                    } else {\r\n                        return d\r\n                    }\r\n                })\r\n                sortVehicleByStartHour(relevantVehicle)\r\n            }\r\n\r\n            sketchObj.unassignedOrders = sketchObj.unassignedOrders.filter((o: OrderModel) => o.id !== pendingOrderId);\r\n\r\n            if (assignedOrdersPassToPending !== null) {\r\n                const implementedOrdersFromReplacedDrive: string [] = assignedOrdersPassToPending as string [];\r\n                const ordersToMoveToPending: OrderModel [] = sketchObj.assignedOrders.filter((o: OrderModel) => implementedOrdersFromReplacedDrive.includes(o.id))\r\n                sketchObj.unassignedOrders = sketchObj.unassignedOrders.concat(ordersToMoveToPending);\r\n                sketchObj.assignedOrders = sketchObj.assignedOrders.filter((o: OrderModel) => !implementedOrdersFromReplacedDrive.includes(o.id))\r\n\r\n\r\n            }\r\n\r\n\r\n        }\r\n        StoreUtils.HandleReducerSaveToLocalStorage(newState);\r\n        return newState\r\n\r\n    },\r\n\r\n    [ActionsTypes.ADD_SKETCH_DRIVE_FROM_PENDING_ORDER]: (state: SidurStore, action: IAction): SidurStore => {\r\n        let newState = {...state}\r\n        const vehicleTimeTableId: string = action.payload.value;\r\n        const SketchIdInEdit = newState.sessionState.SketchIdInEdit;\r\n        const pendingOrderId = newState.sessionState.pendingOrderIdInEdit;\r\n        newState.sessionState.pendingOrderInEditAction = null;\r\n        newState.sessionState.pendingOrderInEditActionSelectDrives = null;\r\n        const sketchObj: SketchModel | undefined = newState.sketches.find((record: SketchModel) => record.id === SketchIdInEdit);\r\n        const pendingOrder = sketchObj?.unassignedOrders.find(o => o.id === pendingOrderId);\r\n\r\n\r\n        if (sketchObj && pendingOrder) {\r\n            const newDriveId = getNewDriveIdFromSketch(sketchObj);\r\n            const newDriveToInsert: DriveModel = {\r\n                ...pendingOrder,\r\n                id: newDriveId,\r\n                implementsOrders: [pendingOrder.id],\r\n                description: LanguageUtilities.buildBriefText(pendingOrder, newState.Locations).driverAndLocation\r\n            }\r\n\r\n            const relevantVehicle = sketchObj.vehicleSchedules.find(v => v.id === vehicleTimeTableId);\r\n           \r\n            if (relevantVehicle) {\r\n\r\n                relevantVehicle.drives.push(newDriveToInsert);\r\n                sortVehicleByStartHour(relevantVehicle);\r\n            }\r\n\r\n            sketchObj.unassignedOrders = sketchObj.unassignedOrders.filter((o: OrderModel) => o.id !== pendingOrderId);\r\n            sketchObj.assignedOrders.push(pendingOrder)\r\n\r\n\r\n        }\r\n        StoreUtils.updateSidurRecordWithSketchChanges(newState)\r\n        StoreUtils.HandleReducerSaveToLocalStorage(newState);\r\n        return newState\r\n\r\n    },\r\n\r\n    [ActionsTypes.REMOVE_ORDER_FROM_SKETCH_DRIVE]: (state: SidurStore, action: IAction): SidurStore => {\r\n        let newState = {...state}\r\n\r\n        const sketchDriveChangedId: string = action.payload.sketchDriveId\r\n        const orderIdToRemove: string = action.payload.orderId\r\n        const SketchIdInEdit = newState.sessionState.SketchIdInEdit;\r\n\r\n\r\n        const sketchObj: SketchModel | undefined = newState.sketches.find((record: SketchModel) => record.id === SketchIdInEdit);\r\n\r\n        if (sketchObj !== undefined) {\r\n            const vehicleId = getVehicleIdFromDriveId(state, sketchDriveChangedId);\r\n            const relevantVehicle = sketchObj.vehicleSchedules.find(v => v.id === vehicleId);\r\n            if (relevantVehicle) {\r\n                relevantVehicle.drives = relevantVehicle.drives.map((d: DriveModel) => {\r\n                    if (d.id === sketchDriveChangedId) {\r\n                        const newDrive = {...d};\r\n                        newDrive.implementsOrders = (newDrive.implementsOrders).filter(ord => ord !== orderIdToRemove)\r\n\r\n                        return newDrive\r\n                    } else {\r\n                        return d\r\n                    }\r\n                })\r\n                sortVehicleByStartHour(relevantVehicle)\r\n            }\r\n            let OrderToMoveToUnassinged: OrderModel | undefined = sketchObj.assignedOrders.find(o => o.id === orderIdToRemove);\r\n            if (OrderToMoveToUnassinged) {\r\n                sketchObj.assignedOrders = sketchObj.assignedOrders.filter(o => o.id !== orderIdToRemove);\r\n                sketchObj.unassignedOrders = [...sketchObj.unassignedOrders];\r\n                sketchObj.unassignedOrders.push(OrderToMoveToUnassinged);\r\n\r\n\r\n            }\r\n\r\n\r\n        }\r\n        StoreUtils.updateSidurRecordWithSketchChanges(newState)\r\n        StoreUtils.HandleReducerSaveToLocalStorage(newState);\r\n        return newState\r\n\r\n    },\r\n    [ActionsTypes.DELETE_SKETCH_DRIVE]: (state: SidurStore, action: IAction): SidurStore => {\r\n        let newState = {...state}\r\n        const sketchDriveToDelete: DriveModel = action.payload.value\r\n        const SketchIdInEdit = newState.sessionState.SketchIdInEdit;\r\n\r\n        const sketchObj: SketchModel | undefined = newState.sketches.find((record: SketchModel) => record.id === SketchIdInEdit);\r\n\r\n        if (sketchObj !== undefined) {\r\n            const vehicleId = getVehicleIdFromDriveId(state, sketchDriveToDelete.id);\r\n            const relevantVehicle = sketchObj.vehicleSchedules.find(v => v.id === vehicleId);\r\n            if (relevantVehicle) {\r\n\r\n                const newDrives: (DriveModel | null) [] = relevantVehicle.drives.map((d: DriveModel) => {\r\n                    if (d.id === sketchDriveToDelete.id) {\r\n                        return null\r\n                    } else {\r\n                        return d\r\n                    }\r\n                });\r\n                relevantVehicle.drives = newDrives.filter(d => d) as DriveModel[];\r\n                sortVehicleByStartHour(relevantVehicle)\r\n            }\r\n\r\n\r\n        }\r\n        StoreUtils.updateSidurRecordWithSketchChanges(newState)\r\n        StoreUtils.HandleReducerSaveToLocalStorage(newState);\r\n        return newState\r\n\r\n    },\r\n\r\n\r\n}\r\n\r\n\r\nconst getVehicleIdFromDriveId = (state: SidurStore, driveId: string): string => {\r\n    const SketchIdInEdit = state.sessionState.SketchIdInEdit\r\n    const sketchObj: SketchModel | undefined = state.sketches.find((record: SketchModel) => record.id === SketchIdInEdit);\r\n    const vehicleSchedules = sketchObj?.vehicleSchedules || [];\r\n    let vehicleId = '';\r\n    vehicleSchedules.forEach((v: VehicleScheduleModel) => {\r\n        v.drives.forEach((d: DriveModel) => {\r\n            if (d.id === driveId) {\r\n                vehicleId = v.id\r\n            }\r\n\r\n        })\r\n    })\r\n    return vehicleId\r\n\r\n}\r\nconst getNewDriveIdFromSketch = (sketch: SketchModel): string => {\r\n    const allDriveIds: string [] = ['1'];\r\n    sketch.vehicleSchedules.forEach(v => {\r\n        v.drives.forEach(d => {\r\n            allDriveIds.push(d.id)\r\n        })\r\n    })\r\n    return Utils.getNextId(allDriveIds)\r\n\r\n}\r\nconst sortVehicleByStartHour = (vehicle: VehicleScheduleModel): VehicleScheduleModel => {\r\n\r\n    vehicle.drives.sort((aDrive, bDrive) => {\r\n        const a = Utils.hourTextToDecimal(aDrive.startHour);\r\n        const b = Utils.hourTextToDecimal(bDrive.startHour);\r\n\r\n        return a < b ? -1 : b < a ? 1 : 0\r\n\r\n    })\r\n    return vehicle\r\n\r\n}\r\n\r\n","import {ActionsTypes} from './types.actions';\r\n\r\n\r\nimport {IAction, SidurStore} from './store.types';\r\nimport {Utils} from '../services/utils';\r\nimport {StoreUtils} from './store-utils';\r\nimport {CloneUtil} from '../services/clone-utility';\r\nimport {translations} from '../services/translations';\r\nimport {LocationGroup} from '../models/Location.model';\r\n\r\nexport type LocationGroupReducerFunctions =\r\n    ActionsTypes.UPDATE_LOCATION_GROUP |\r\n    ActionsTypes.DELETE_LOCATION_GROUP |\r\n    ActionsTypes.NEW_LOCATION_GROUP\r\n    | ActionsTypes.CLONE_LOCATION_GROUP\r\n    | ActionsTypes.RENAME_LOCATION_GROUP\r\n    | ActionsTypes.CHOOSE_LOCATION_GROUP\r\n    | ActionsTypes.CHOOSE_LOCATION_GROUP_TAB\r\n\r\n\r\nexport const LocationGroupReducer: Record<LocationGroupReducerFunctions, (state: SidurStore, action: IAction) => SidurStore> = {\r\n    [ActionsTypes.UPDATE_LOCATION_GROUP]: (state: SidurStore, action: IAction): SidurStore => {\r\n        let newState = {...state}\r\n        if (!newState.LocationGroups) {\r\n            newState.LocationGroups = [];\r\n        }\r\n\r\n        newState = StoreUtils.updateRecordBrief(newState);\r\n        StoreUtils.HandleReducerSaveToLocalStorage(newState);\r\n        return newState\r\n    },\r\n    [ActionsTypes.DELETE_LOCATION_GROUP]: (state: SidurStore, action: IAction): SidurStore => {\r\n        let newState = {...state}\r\n        const groupToDeleteId = action.payload.id;\r\n        if (!newState.LocationGroups) {\r\n            newState.LocationGroups = [];\r\n        } else {\r\n\r\n            newState.LocationGroups = newState.LocationGroups.filter(l => l.id !== groupToDeleteId)\r\n        }\r\n        if (newState.LocationGroups.length) {\r\n            newState.sessionState.locationGroupInEdit = newState.LocationGroups[0].id\r\n        } else {\r\n            newState.sessionState.locationGroupInEdit = null\r\n        }\r\n        newState.sessionState = {...newState.sessionState}\r\n        newState = StoreUtils.updateRecordBrief(newState);\r\n        StoreUtils.HandleReducerSaveToLocalStorage(newState);\r\n\r\n        return newState\r\n    },\r\n    [ActionsTypes.NEW_LOCATION_GROUP]: (state: SidurStore, action: IAction): SidurStore => {\r\n        let newState = {...state}\r\n        if (!newState.LocationGroups) {\r\n            newState.LocationGroups = [];\r\n        }\r\n        const newId = Utils.getNextId(newState.LocationGroups.map(l => l.id))\r\n        newState.LocationGroups = [...newState.LocationGroups];\r\n        newState.LocationGroups.push({\r\n            name: translations.newLocationGroup + ' ' + newId,\r\n            id: newId,\r\n\r\n            dbId: '',\r\n            Locations: [],\r\n            Routes: [],\r\n            Transports: []\r\n        })\r\n        StoreUtils.HandleReducerSaveToLocalStorage(newState);\r\n\r\n        newState.sessionState.locationGroupInEdit = newId\r\n        newState = StoreUtils.updateRecordBrief(newState);\r\n        return newState\r\n    },\r\n    [ActionsTypes.CHOOSE_LOCATION_GROUP]: (state: SidurStore, action: IAction): SidurStore => {\r\n        let newState = {...state}\r\n        const groupIdWasChosen = action.payload.id;\r\n        newState.sessionState.locationGroupInEdit = groupIdWasChosen;\r\n        newState = StoreUtils.updateRecordBrief(newState);\r\n        StoreUtils.HandleReducerSaveToLocalStorage(newState);\r\n\r\n        return newState\r\n    },\r\n    [ActionsTypes.CHOOSE_LOCATION_GROUP_TAB]: (state: SidurStore, action: IAction): SidurStore => {\r\n        let newState = {...state}\r\n        const tabWasChosen = action.payload.id;\r\n        if (!newState.sessionState) {\r\n\r\n            newState.sessionState = StoreUtils.defaultSessionState()\r\n        }\r\n        newState.sessionState = {...newState.sessionState};\r\n        newState.sessionState.LocationGroupTabOpen = tabWasChosen;\r\n        newState = StoreUtils.updateRecordBrief(newState);\r\n        StoreUtils.HandleReducerSaveToLocalStorage(newState);\r\n\r\n        return newState\r\n    },\r\n    [ActionsTypes.CLONE_LOCATION_GROUP]: (state: SidurStore, action: IAction): SidurStore => {\r\n        let newState = {...state}\r\n        const locationGroupIdToClone = action.payload.id;// newState.sidurId;\r\n        let locationGroupForCloning: LocationGroup | undefined = newState.LocationGroups?.find(s => s.id === locationGroupIdToClone);\r\n\r\n        if (locationGroupForCloning) {\r\n            const newLocGroup: LocationGroup = CloneUtil.deepCloneLocationGroup(locationGroupForCloning);\r\n            newLocGroup.name = translations.CopyOf + ' ' + newLocGroup.name;\r\n            const newLocGroupId = Utils.getNextId(newState.LocationGroups?.map(l => l.id) || ['']);\r\n            newLocGroup.id = newLocGroupId;\r\n            newLocGroup.dbId = '';\r\n            newState.LocationGroups = newState.LocationGroups?.map(c => c) || [];\r\n            newState.LocationGroups.push(newLocGroup);\r\n            newState.sessionState.locationGroupInEdit = newLocGroupId;\r\n            // newState = setChosenSidur(newState, newSketch);\r\n        }\r\n        newState = StoreUtils.updateRecordBrief(newState);\r\n        StoreUtils.HandleReducerSaveToLocalStorage(newState);\r\n\r\n        return newState\r\n    },\r\n    [ActionsTypes.RENAME_LOCATION_GROUP]: (state: SidurStore, action: IAction): SidurStore => {\r\n        let newState = {...state}\r\n        if (!newState.LocationGroups) {\r\n            newState.LocationGroups = [];\r\n        }\r\n\r\n        const groupToRenameId = action.payload.id;\r\n        const newName = action.payload.value;\r\n\r\n        newState.LocationGroups = newState.LocationGroups.map(l => {\r\n            if (l.id === groupToRenameId) {\r\n                const newLG = {...l};\r\n                newLG.name = newName;\r\n                return newLG\r\n            } else {\r\n                return l\r\n            }\r\n\r\n        })\r\n        newState = StoreUtils.updateRecordBrief(newState);\r\n        StoreUtils.HandleReducerSaveToLocalStorage(newState);\r\n        return newState\r\n    },\r\n\r\n\r\n}\r\n\r\n\r\n","import {IAction, SidurRecord, SidurStore} from './store.types';\r\nimport {StoreUtils} from './store-utils';\r\nimport {ActionsTypes} from './types.actions';\r\nimport {LocationGroup, LocationModel} from '../models/Location.model';\r\nimport {Utils} from '../services/utils';\r\nimport {translations} from '../services/translations';\r\n\r\nexport type LocationReducerFunctions =\r\n    ActionsTypes.ADD_NEW_LOCATION\r\n    | ActionsTypes.START_EDIT_LOCATION\r\n    | ActionsTypes.STOP_EDIT_LOCATION\r\n    | ActionsTypes.UPDATE_LOCATION\r\n    | ActionsTypes.DELETE_LOCATION\r\n\r\n\r\nexport const LocationReducer: Record<LocationReducerFunctions, (state: SidurStore, action: IAction) => SidurStore> = {\r\n    [ActionsTypes.ADD_NEW_LOCATION]: (state: SidurStore, action: IAction): SidurStore => {\r\n        let newState = {...state}\r\n        const currentLocationGroupId = newState.sessionState.locationGroupInEdit;\r\n        const currentLocationGroup: LocationGroup | undefined = newState.LocationGroups?.find(l => l.id === currentLocationGroupId);\r\n        if (currentLocationGroup) {\r\n            const newId = Utils.getNextId(currentLocationGroup.Locations.map(l => l.id))\r\n            const name = translations.Locations + ' ' + newId.toString();\r\n            const newLocation: LocationModel = {\r\n                ETA: 25,\r\n                EnName: '',\r\n                name: name,\r\n                id: newId\r\n            }\r\n            currentLocationGroup.Locations = [...currentLocationGroup.Locations]\r\n            currentLocationGroup.Locations.push(newLocation);\r\n\r\n            newState.LocationGroups = (newState.LocationGroups || []).map(g => {\r\n                if (g.id === currentLocationGroup.id) {\r\n                    return currentLocationGroup\r\n                }\r\n                return g\r\n            })\r\n            const currentSidur = newState.sidurCollection.find(s => s.id === newState.sidurId) as SidurRecord;\r\n            if (currentLocationGroupId === currentSidur.locationGroupIdForSidur) {\r\n                state.Locations = currentLocationGroup.Locations;\r\n            }\r\n        }\r\n\r\n\r\n        StoreUtils.HandleReducerSaveToLocalStorage(newState);\r\n        return newState\r\n    },\r\n    [ActionsTypes.START_EDIT_LOCATION]: (state: SidurStore, action: IAction): SidurStore => {\r\n        let newState = {...state}\r\n        const locationId = action.payload.id\r\n        newState.sessionState.locationMainInEdit = locationId;\r\n        const currentLocationGroupId = newState.sessionState.locationGroupInEdit;\r\n        const currentLocationGroup: LocationGroup | undefined = newState.LocationGroups?.find(l => l.id === currentLocationGroupId);\r\n        if (currentLocationGroup) {\r\n            const location = currentLocationGroup.Locations.find(l => l.id === locationId);\r\n            if (location) {\r\n                newState.sessionState.locationMainInEdit = locationId;\r\n\r\n            }\r\n\r\n\r\n        }\r\n\r\n        StoreUtils.HandleReducerSaveToLocalStorage(newState);\r\n        return newState\r\n    },\r\n    [ActionsTypes.STOP_EDIT_LOCATION]: (state: SidurStore, action: IAction): SidurStore => {\r\n        let newState = {...state}\r\n        // newState.sessionState.locationMainInEdit = locationId;\r\n        const currentLocationGroupId = newState.sessionState.locationGroupInEdit;\r\n        const currentLocationGroup: LocationGroup | undefined = newState.LocationGroups?.find(l => l.id === currentLocationGroupId);\r\n        if (currentLocationGroup) {\r\n\r\n            newState.sessionState.locationMainInEdit = null;\r\n\r\n\r\n        }\r\n\r\n        StoreUtils.HandleReducerSaveToLocalStorage(newState);\r\n        return newState\r\n    },\r\n\r\n    [ActionsTypes.UPDATE_LOCATION]: (state: SidurStore, action: IAction): SidurStore => {\r\n        let newState = {...state}\r\n        const locationToUpdate = action.payload;\r\n        const currentLocationGroupId = newState.sessionState.locationGroupInEdit;\r\n        const currentLocationGroup: LocationGroup | undefined = newState.LocationGroups?.find(l => l.id === currentLocationGroupId);\r\n        if (currentLocationGroup && locationToUpdate) {\r\n            currentLocationGroup.Locations =\r\n                currentLocationGroup.Locations.map(l => {\r\n                    if (l.id === locationToUpdate.id) {\r\n                        return locationToUpdate\r\n                    }\r\n                    return l\r\n                })\r\n\r\n            const currentSidur = newState.sidurCollection.find(s => s.id === newState.sidurId) as SidurRecord;\r\n            if (currentLocationGroupId === currentSidur.locationGroupIdForSidur) {\r\n                state.Locations = currentLocationGroup.Locations;\r\n            }\r\n        }\r\n        ;\r\n\r\n\r\n        StoreUtils.HandleReducerSaveToLocalStorage(newState);\r\n        return newState\r\n    },\r\n\r\n    [ActionsTypes.DELETE_LOCATION]: (state: SidurStore, action: IAction): SidurStore => {\r\n        let newState = {...state}\r\n        const locationToDeleteId = action.payload.id;\r\n        const currentLocationGroupId = newState.sessionState.locationGroupInEdit;\r\n        const currentLocationGroup: LocationGroup | undefined = newState.LocationGroups?.find(l => l.id === currentLocationGroupId);\r\n        if (currentLocationGroup) {\r\n            currentLocationGroup.Locations =\r\n                currentLocationGroup.Locations.filter(l => l.id !== locationToDeleteId);\r\n            newState.LocationGroups = newState.LocationGroups.map(l => l.id === currentLocationGroup.id ? currentLocationGroup : l)\r\n        }\r\n\r\n        StoreUtils.HandleReducerSaveToLocalStorage(newState);\r\n        return newState\r\n    },\r\n\r\n}\r\n\r\n","import savedStore from '../services/fixtures/sidur-default.json'\r\n\r\nexport const DefaultSidurFetching: any =\r\n    savedStore.savedStore;\r\n","import {IAction, SidurStore} from './store.types';\r\nimport {StoreUtils} from './store-utils';\r\nimport {ActionsTypes} from './types.actions';\r\nimport {Utils} from '../services/utils';\r\nimport {translations} from '../services/translations';\r\nimport {LocationGroup, LocationModel, RoadStopModel, RouteModel} from '../models/Location.model';\r\n\r\nexport type RouteReducerFunctions =\r\n    ActionsTypes.ADD_NEW_ROUTE\r\n    | ActionsTypes.START_EDIT_ROUTE\r\n    | ActionsTypes.STOP_EDIT_ROUTE\r\n    | ActionsTypes.UPDATE_ROUTE\r\n    | ActionsTypes.DELETE_ROUTE\r\n    | ActionsTypes.ADD_LOCATION_TO_ROUTE\r\n    | ActionsTypes.CLONE_ROUTE\r\n\r\n\r\nexport const RouteReducer: Record<RouteReducerFunctions, (state: SidurStore, action: IAction) => SidurStore> = {\r\n    [ActionsTypes.ADD_NEW_ROUTE]: (state: SidurStore, action: IAction): SidurStore => {\r\n        let newState = {...state}\r\n        const currentLocationGroupId = newState.sessionState.locationGroupInEdit;\r\n        const currentLocationGroup: LocationGroup | undefined = newState.LocationGroups?.find(l => l.id === currentLocationGroupId);\r\n\r\n        if (currentLocationGroup) {\r\n            currentLocationGroup.Routes = currentLocationGroup.Routes || [];\r\n            const newId = Utils.getNextId(currentLocationGroup.Routes.map(l => l.id))\r\n            const name = translations.Route + ' ' + newId.toString();\r\n            const newRoute: RouteModel = {\r\n                name: name,\r\n                id: newId,\r\n                comments: '',\r\n                routStops: []\r\n            }\r\n            newRoute.name = buildRouteName(newRoute, currentLocationGroup.Locations)\r\n\r\n            currentLocationGroup.Routes = [...currentLocationGroup.Routes]\r\n            currentLocationGroup.Routes.push(newRoute);\r\n            newState.sessionState.routeIdInEdit = newId;\r\n            newState.LocationGroups = (newState.LocationGroups || []).map(g => {\r\n                if (g.id === currentLocationGroup.id) {\r\n                    return currentLocationGroup\r\n                }\r\n                return g\r\n            })\r\n        }\r\n\r\n\r\n        StoreUtils.HandleReducerSaveToLocalStorage(newState);\r\n        return newState\r\n    },\r\n    [ActionsTypes.ADD_LOCATION_TO_ROUTE]: (state: SidurStore, action: IAction): SidurStore => {\r\n        let newState = {...state}\r\n        const locationToAdd = action.payload;\r\n        const currentLocationGroupId = newState.sessionState.locationGroupInEdit;\r\n        const currentLocationGroup: LocationGroup | undefined = newState.LocationGroups?.find(l => l.id === currentLocationGroupId);\r\n        if (currentLocationGroup && locationToAdd) {\r\n            const routeIdInEdit = newState.sessionState.routeIdInEdit;\r\n            const routeInEdit: RouteModel | undefined = currentLocationGroup.Routes.find(r => r.id === routeIdInEdit);\r\n            if (routeInEdit) {\r\n                const isNameAutoBuild = routeInEdit.name === buildRouteName(routeInEdit, currentLocationGroup.Locations)\r\n                const allPositions = routeInEdit.routStops.map(s => s.position);\r\n                allPositions.push(0)\r\n                const maxPosition = Math.max(...allPositions)\r\n\r\n                const routeStop: RoadStopModel = {\r\n                    locationId: locationToAdd.id,\r\n                    minuetsFromLast: 20,\r\n                    position: maxPosition + 1\r\n                }\r\n                routeInEdit.routStops.push(routeStop);\r\n                if (isNameAutoBuild) {\r\n                    routeInEdit.name = buildRouteName(routeInEdit, currentLocationGroup.Locations)\r\n                }\r\n                currentLocationGroup.Routes = currentLocationGroup.Routes.map(r => r.id === routeInEdit.id ? routeInEdit : r);\r\n\r\n                newState.LocationGroups = (newState.LocationGroups || []).map(g => {\r\n                    if (g.id === currentLocationGroup.id) {\r\n                        return currentLocationGroup\r\n                    }\r\n                    return g\r\n                })\r\n            }\r\n            // currentLocationGroup.Routes.push(newRoute);\r\n\r\n\r\n        }\r\n\r\n\r\n        StoreUtils.HandleReducerSaveToLocalStorage(newState);\r\n        return newState\r\n    },\r\n    [ActionsTypes.START_EDIT_ROUTE]: (state: SidurStore, action: IAction): SidurStore => {\r\n        let newState = {...state}\r\n        const routId = action.payload.id\r\n        newState.sessionState.locationMainInEdit = routId;\r\n        const currentLocationGroupId = newState.sessionState.locationGroupInEdit;\r\n        const currentLocationGroup: LocationGroup | undefined = newState.LocationGroups?.find(l => l.id === currentLocationGroupId);\r\n        if (currentLocationGroup) {\r\n            const route = currentLocationGroup.Routes.find(l => l.id === routId);\r\n            if (route) {\r\n                newState.sessionState.routeIdInEdit = routId;\r\n\r\n            }\r\n\r\n\r\n        }\r\n\r\n        StoreUtils.HandleReducerSaveToLocalStorage(newState);\r\n        return newState\r\n    },\r\n    [ActionsTypes.STOP_EDIT_ROUTE]: (state: SidurStore, action: IAction): SidurStore => {\r\n        let newState = {...state}\r\n        // newState.sessionState.locationMainInEdit = locationId;\r\n        const currentLocationGroupId = newState.sessionState.locationGroupInEdit;\r\n        const currentLocationGroup: LocationGroup | undefined = newState.LocationGroups?.find(l => l.id === currentLocationGroupId);\r\n        if (currentLocationGroup) {\r\n\r\n            newState.sessionState.locationMainInEdit = null;\r\n\r\n\r\n        }\r\n\r\n        StoreUtils.HandleReducerSaveToLocalStorage(newState);\r\n        return newState\r\n    },\r\n\r\n    [ActionsTypes.UPDATE_ROUTE]: (state: SidurStore, action: IAction): SidurStore => {\r\n        let newState = {...state}\r\n        const routeToUpdate = action.payload;\r\n        // newState.sessionState.locationMainInEdit = locationId;\r\n        const currentLocationGroupId = newState.sessionState.locationGroupInEdit;\r\n        const currentLocationGroup: LocationGroup | undefined = newState.LocationGroups?.find(l => l.id === currentLocationGroupId);\r\n        if (currentLocationGroup && routeToUpdate) {\r\n            const routBeforeUpdate = currentLocationGroup.Routes.find(r => r.id === routeToUpdate.id) as RouteModel;\r\n\r\n            const isNameAutoBuild = routBeforeUpdate.name === buildRouteName(routBeforeUpdate, currentLocationGroup.Locations);\r\n\r\n            if (isNameAutoBuild && routBeforeUpdate.name === routeToUpdate.name) {\r\n                routeToUpdate.name = buildRouteName(routeToUpdate, currentLocationGroup.Locations)\r\n            }\r\n            currentLocationGroup.Routes =\r\n                currentLocationGroup.Routes.map(l => {\r\n                    if (l.id === routeToUpdate.id) {\r\n                        return routeToUpdate\r\n                    }\r\n                    return l\r\n                })\r\n            newState.LocationGroups = newState.LocationGroups.map(lg => lg.id === currentLocationGroup.id ? currentLocationGroup : lg)\r\n\r\n        }\r\n\r\n        StoreUtils.HandleReducerSaveToLocalStorage(newState);\r\n        return newState\r\n    },\r\n\r\n    [ActionsTypes.DELETE_ROUTE]: (state: SidurStore, action: IAction): SidurStore => {\r\n        let newState = {...state}\r\n        const routeToDeleteId = action.payload.id;\r\n        const currentLocationGroupId = newState.sessionState.locationGroupInEdit;\r\n        const currentLocationGroup: LocationGroup | undefined = newState.LocationGroups?.find(l => l.id === currentLocationGroupId);\r\n        if (currentLocationGroup) {\r\n            currentLocationGroup.Routes =\r\n                currentLocationGroup.Routes.filter(l => l.id !== routeToDeleteId);\r\n            newState.LocationGroups = newState.LocationGroups.map(l => l.id === currentLocationGroup.id ? currentLocationGroup : l)\r\n        }\r\n\r\n        StoreUtils.HandleReducerSaveToLocalStorage(newState);\r\n        return newState\r\n    },\r\n    [ActionsTypes.CLONE_ROUTE]: (state: SidurStore, action: IAction): SidurStore => {\r\n        let newState = {...state}\r\n        const routeToCloneId = action.payload.id;\r\n        const currentLocationGroupId = newState.sessionState.locationGroupInEdit;\r\n        const currentLocationGroup: LocationGroup | undefined = newState.LocationGroups?.find(l => l.id === currentLocationGroupId);\r\n        if (currentLocationGroup) {\r\n            const routeToClone: RouteModel | undefined = currentLocationGroup.Routes.find(r => r.id === routeToCloneId);\r\n\r\n            if (routeToClone) {\r\n                const newRoute = {...routeToClone};\r\n                const newId = Utils.getNextId(currentLocationGroup.Routes.map(l => l.id));\r\n                newRoute.id = newId;\r\n                newRoute.routStops = newRoute.routStops.map(rs => ({...rs}));\r\n                newRoute.name = buildRouteName(newRoute, currentLocationGroup.Locations)\r\n                currentLocationGroup.Routes =\r\n                    currentLocationGroup.Routes.map(l => l);\r\n                currentLocationGroup.Routes.push(newRoute);\r\n                newState.LocationGroups = newState.LocationGroups.map(l => l.id === currentLocationGroup.id ? currentLocationGroup : l)\r\n            }\r\n\r\n\r\n        }\r\n\r\n        StoreUtils.HandleReducerSaveToLocalStorage(newState);\r\n        return newState\r\n    },\r\n\r\n\r\n}\r\nconst buildRouteName = (route: RouteModel, locations: LocationModel[]): string => {\r\n    if (route.routStops.length === 0) {\r\n        return translations.newRoute + ' ' + route.id.toString();\r\n    } else if (route.routStops.length === 1) {\r\n        return translations.newRoute + ' ' + route.id.toString() + ' - ' + getLocationName(route.routStops[0].locationId, locations);\r\n    } else if (route.routStops.length > 1 && route.routStops.length < 4) {\r\n        return route.routStops.map(s => getLocationName(s.locationId, locations)).join(' - ')\r\n    } else {\r\n        return route.routStops.map(s => getLocationName(s.locationId, locations)).filter((l, i) => (i === 0 || (i + 2) > route.routStops.length) || Math.floor(route.routStops.length / 2) === i).join(' - ')\r\n    }\r\n\r\n\r\n}\r\nconst getLocationName = (id: string, locations: LocationModel[]): string => {\r\n    let name = ' ';\r\n    locations.forEach((l: LocationModel) => {\r\n        if (l.id === id) {\r\n            name = l.name;\r\n        }\r\n    })\r\n    return name\r\n}\r\n\r\n\r\n","import {IAction, SidurStore} from './store.types';\r\nimport {StoreUtils} from './store-utils';\r\nimport {ActionsTypes} from './types.actions';\r\nimport {Utils} from '../services/utils';\r\nimport {translations} from '../services/translations';\r\nimport {LocationGroup, LocationModel, RoadStopModel, TransportModel} from '../models/Location.model';\r\n\r\nexport type TransportReducerFunctions =\r\n    ActionsTypes.ADD_NEW_TRANSPORT\r\n    | ActionsTypes.START_EDIT_TRANSPORT\r\n    | ActionsTypes.STOP_EDIT_TRANSPORT\r\n    | ActionsTypes.UPDATE_TRANSPORT\r\n    | ActionsTypes.DELETE_TRANSPORT\r\n    | ActionsTypes.ADD_LOCATION_TO_TRANSPORT\r\n    | ActionsTypes.CLONE_TRANSPORT\r\n\r\n\r\nexport const TransportReducer: Record<TransportReducerFunctions, (state: SidurStore, action: IAction) => SidurStore> = {\r\n    [ActionsTypes.ADD_NEW_TRANSPORT]: (state: SidurStore, action: IAction): SidurStore => {\r\n        let newState = {...state}\r\n        const currentLocationGroupId = newState.sessionState.locationGroupInEdit;\r\n        const currentLocationGroup: LocationGroup | undefined = newState.LocationGroups?.find(l => l.id === currentLocationGroupId);\r\n\r\n        if (currentLocationGroup) {\r\n            currentLocationGroup.Transports = currentLocationGroup.Transports || [];\r\n            const newId = Utils.getNextId(currentLocationGroup.Transports.map(l => l.id))\r\n            const name = translations.Route + ' ' + newId.toString();\r\n            const newTransport: TransportModel = {\r\n                name: name,\r\n                id: newId,\r\n                comments: '',\r\n                TransportStops: [],\r\n                TransportTime: []\r\n            }\r\n            newTransport.name = buildTransportName(newTransport, currentLocationGroup.Locations)\r\n\r\n            currentLocationGroup.Transports = [...currentLocationGroup.Transports]\r\n            currentLocationGroup.Transports.push(newTransport);\r\n            newState.sessionState.transportIdInEdit = newId;\r\n            newState.LocationGroups = (newState.LocationGroups || []).map(g => {\r\n                if (g.id === currentLocationGroup.id) {\r\n                    return currentLocationGroup\r\n                }\r\n                return g\r\n            })\r\n        }\r\n\r\n\r\n        StoreUtils.HandleReducerSaveToLocalStorage(newState);\r\n        return newState\r\n    },\r\n    [ActionsTypes.ADD_LOCATION_TO_TRANSPORT]: (state: SidurStore, action: IAction): SidurStore => {\r\n        let newState = {...state}\r\n        const locationToAdd = action.payload;\r\n        const currentLocationGroupId = newState.sessionState.locationGroupInEdit;\r\n        const currentLocationGroup: LocationGroup | undefined = newState.LocationGroups?.find(l => l.id === currentLocationGroupId);\r\n        if (currentLocationGroup && locationToAdd) {\r\n            const transportIdInEdit = newState.sessionState.transportIdInEdit;\r\n            const transportInEdit: TransportModel | undefined = currentLocationGroup.Transports.find(r => r.id === transportIdInEdit);\r\n            if (transportInEdit) {\r\n                const isNameAutoBuild = transportInEdit.name === buildTransportName(transportInEdit, currentLocationGroup.Locations)\r\n                const allPositions = transportInEdit.TransportStops.map(s => s.position);\r\n                allPositions.push(0)\r\n                const maxPosition = Math.max(...allPositions)\r\n\r\n                const transportStop: RoadStopModel = {\r\n                    locationId: locationToAdd.id,\r\n                    minuetsFromLast: 20,\r\n                    position: maxPosition + 1\r\n                }\r\n                transportInEdit.TransportStops.push(transportStop);\r\n                if (isNameAutoBuild) {\r\n                    transportInEdit.name = buildTransportName(transportInEdit, currentLocationGroup.Locations)\r\n                }\r\n                currentLocationGroup.Transports = currentLocationGroup.Transports.map(r => r.id === transportInEdit.id ? transportInEdit : r);\r\n\r\n                newState.LocationGroups = (newState.LocationGroups || []).map(g => {\r\n                    if (g.id === currentLocationGroup.id) {\r\n                        return currentLocationGroup\r\n                    }\r\n                    return g\r\n                })\r\n            }\r\n            // currentLocationGroup.Transports.push(newTransport);\r\n\r\n\r\n        }\r\n\r\n\r\n        StoreUtils.HandleReducerSaveToLocalStorage(newState);\r\n        return newState\r\n    },\r\n    [ActionsTypes.START_EDIT_TRANSPORT]: (state: SidurStore, action: IAction): SidurStore => {\r\n        let newState = {...state}\r\n        const transportId = action.payload.id\r\n        newState.sessionState.locationMainInEdit = transportId;\r\n        const currentLocationGroupId = newState.sessionState.locationGroupInEdit;\r\n        const currentLocationGroup: LocationGroup | undefined = newState.LocationGroups?.find(l => l.id === currentLocationGroupId);\r\n        if (currentLocationGroup) {\r\n            const transport = currentLocationGroup.Transports.find(l => l.id === transportId);\r\n            if (transport) {\r\n                newState.sessionState.transportIdInEdit = transportId;\r\n\r\n            }\r\n\r\n\r\n        }\r\n\r\n        StoreUtils.HandleReducerSaveToLocalStorage(newState);\r\n        return newState\r\n    },\r\n    [ActionsTypes.STOP_EDIT_TRANSPORT]: (state: SidurStore, action: IAction): SidurStore => {\r\n        let newState = {...state}\r\n        // newState.sessionState.locationMainInEdit = locationId;\r\n        const currentLocationGroupId = newState.sessionState.locationGroupInEdit;\r\n        const currentLocationGroup: LocationGroup | undefined = newState.LocationGroups?.find(l => l.id === currentLocationGroupId);\r\n        if (currentLocationGroup) {\r\n\r\n            newState.sessionState.locationMainInEdit = null;\r\n\r\n\r\n        }\r\n\r\n        StoreUtils.HandleReducerSaveToLocalStorage(newState);\r\n        return newState\r\n    },\r\n\r\n    [ActionsTypes.UPDATE_TRANSPORT]: (state: SidurStore, action: IAction): SidurStore => {\r\n        let newState = {...state}\r\n        const transportToUpdate = action.payload;\r\n        // newState.sessionState.locationMainInEdit = locationId;\r\n        const currentLocationGroupId = newState.sessionState.locationGroupInEdit;\r\n        const currentLocationGroup: LocationGroup | undefined = newState.LocationGroups?.find(l => l.id === currentLocationGroupId);\r\n        if (currentLocationGroup && transportToUpdate) {\r\n            const routBeforeUpdate = currentLocationGroup.Transports.find(r => r.id === transportToUpdate.id) as TransportModel;\r\n\r\n            const isNameAutoBuild = routBeforeUpdate.name === buildTransportName(routBeforeUpdate, currentLocationGroup.Locations);\r\n\r\n            if (isNameAutoBuild && routBeforeUpdate.name === transportToUpdate.name) {\r\n                transportToUpdate.name = buildTransportName(transportToUpdate, currentLocationGroup.Locations)\r\n            }\r\n            currentLocationGroup.Transports =\r\n                currentLocationGroup.Transports.map(l => {\r\n                    if (l.id === transportToUpdate.id) {\r\n                        return transportToUpdate\r\n                    }\r\n                    return l\r\n                })\r\n            newState.LocationGroups = newState.LocationGroups.map(lg => lg.id === currentLocationGroup.id ? currentLocationGroup : lg)\r\n\r\n        }\r\n\r\n        StoreUtils.HandleReducerSaveToLocalStorage(newState);\r\n        return newState\r\n    },\r\n\r\n    [ActionsTypes.DELETE_TRANSPORT]: (state: SidurStore, action: IAction): SidurStore => {\r\n        let newState = {...state}\r\n        const transportToDeleteId = action.payload.id;\r\n        const currentLocationGroupId = newState.sessionState.locationGroupInEdit;\r\n        const currentLocationGroup: LocationGroup | undefined = newState.LocationGroups?.find(l => l.id === currentLocationGroupId);\r\n        if (currentLocationGroup) {\r\n            currentLocationGroup.Transports =\r\n                currentLocationGroup.Transports.filter(l => l.id !== transportToDeleteId);\r\n            newState.LocationGroups = newState.LocationGroups.map(l => l.id === currentLocationGroup.id ? currentLocationGroup : l)\r\n        }\r\n\r\n        StoreUtils.HandleReducerSaveToLocalStorage(newState);\r\n        return newState\r\n    },\r\n    [ActionsTypes.CLONE_TRANSPORT]: (state: SidurStore, action: IAction): SidurStore => {\r\n        let newState = {...state}\r\n        const transportToCloneId = action.payload.id;\r\n        const currentLocationGroupId = newState.sessionState.locationGroupInEdit;\r\n        const currentLocationGroup: LocationGroup | undefined = newState.LocationGroups?.find(l => l.id === currentLocationGroupId);\r\n        if (currentLocationGroup) {\r\n            const transportToClone: TransportModel | undefined = currentLocationGroup.Transports.find(r => r.id === transportToCloneId);\r\n\r\n            if (transportToClone) {\r\n                const newTransport = {...transportToClone};\r\n                const newId = Utils.getNextId(currentLocationGroup.Transports.map(l => l.id));\r\n                newTransport.id = newId;\r\n                newTransport.TransportStops = newTransport.TransportStops.map(rs => ({...rs}));\r\n                newTransport.name = buildTransportName(newTransport, currentLocationGroup.Locations)\r\n                currentLocationGroup.Transports =\r\n                    currentLocationGroup.Transports.map(l => l);\r\n                currentLocationGroup.Transports.push(newTransport);\r\n                newState.LocationGroups = newState.LocationGroups.map(l => l.id === currentLocationGroup.id ? currentLocationGroup : l)\r\n            }\r\n\r\n\r\n        }\r\n\r\n        StoreUtils.HandleReducerSaveToLocalStorage(newState);\r\n        return newState\r\n    },\r\n\r\n\r\n}\r\nconst buildTransportName = (transport: TransportModel, locations: LocationModel[]): string => {\r\n    if (transport.TransportStops.length === 0) {\r\n        return translations.newTransport + ' ' + transport.id.toString();\r\n    } else if (transport.TransportStops.length === 1) {\r\n        return translations.newTransport + ' ' + transport.id.toString() + ' - ' + getLocationName(transport.TransportStops[0].locationId, locations);\r\n    } else if (transport.TransportStops.length > 1 && transport.TransportStops.length < 4) {\r\n        return transport.TransportStops.map(s => getLocationName(s.locationId, locations)).join(' - ')\r\n    } else {\r\n        return transport.TransportStops.map(s => getLocationName(s.locationId, locations)).filter((l, i) => (i === 0 || (i + 2) > transport.TransportStops.length) || Math.floor(transport.TransportStops.length / 2) === i).join(' - ')\r\n    }\r\n \r\n\r\n}\r\nconst getLocationName = (id: string, locations: LocationModel[]): string => {\r\n    let name = ' ';\r\n    locations.forEach((l: LocationModel) => {\r\n        if (l.id === id) {\r\n            name = l.name;\r\n        }\r\n    })\r\n    return name\r\n}\r\n\r\n\r\n","import {IAction, SidurStore} from './store.types';\r\nimport {SaveLoadService} from '../services/save-load.service';\r\nimport {SidurReducer} from './sidur.reducer';\r\nimport {OrderReducer} from './order.reducer';\r\nimport {ImportExportReducer} from './import-export.reducer';\r\nimport {VehicleReducer} from './vehicle.reducer';\r\nimport {ActionsTypes} from './types.actions';\r\nimport {DisplayReducer} from './display.reducer';\r\nimport {SketchReducer} from './sketch.reducer';\r\nimport {PendingOrdersReducer} from './pendingOrders.reducer';\r\nimport {SketchDriveReducer} from './sketch-drive.reducer';\r\nimport {LocationGroupReducer} from './locationGroup.reducer';\r\nimport {LocationReducer} from './location.reducer';\r\nimport {DefaultSidurFetching} from './store-inital-state';\r\nimport {RouteReducer} from './route.reducer';\r\nimport {TransportReducer} from './transport.reducer';\r\n\r\nconst buildInitialState = (): SidurStore => {\r\n\r\n    const stateFromLocalStorage: SidurStore | undefined = SaveLoadService.loadFromLocalStorage('chen').data?.savedStore;\r\n    return (stateFromLocalStorage || DefaultSidurFetching) as SidurStore;\r\n}\r\n\r\n\r\nconst initialState = buildInitialState()\r\nconst reducer = (state: SidurStore = initialState, action: IAction) => {\r\n    let newState = {\r\n        ...state\r\n    }\r\n\r\n\r\n    switch (action.type) {\r\n        case ActionsTypes.CHOOSE_SIDUR:\r\n        case ActionsTypes.RENAME_SIDUR:\r\n        case ActionsTypes.ADD_NEW_SIDUR:\r\n        case ActionsTypes.DELETE_SIDUR:\r\n        case ActionsTypes.CLONE_SIDUR:\r\n        case ActionsTypes.ARCHIVE_SIDUR:\r\n        case ActionsTypes.MOVE_TO_ACTIVE_SIDUR:\r\n        case ActionsTypes.DELETE_FOREVER_SIDUR:\r\n        case ActionsTypes.CHANGE_SIDUR_LOCATION_GROUP:\r\n\r\n            return SidurReducer[action.type](newState, action)\r\n\r\n        case ActionsTypes.CLICKED_ORDER:\r\n        case ActionsTypes.UPDATE_ORDER:\r\n        case ActionsTypes.UPDATE_ORDER_IN_EDIT:\r\n        case ActionsTypes.DELETE_ORDER:\r\n        case ActionsTypes.ADD_NEW_ORDER:\r\n        case ActionsTypes.CLONE_ORDER:\r\n\r\n            return OrderReducer[action.type](newState, action)\r\n\r\n        case ActionsTypes.EXPORT_ALL:\r\n        case ActionsTypes.IMPORT_FILE_UPLOADED:\r\n        case ActionsTypes.IMPORT_ORDERS_AS_TEXT:\r\n\r\n            return ImportExportReducer[action.type](newState, action);\r\n\r\n        case ActionsTypes.NEW_VEHICLE:\r\n        case ActionsTypes.UPDATE_VEHICLE:\r\n        case ActionsTypes.DELETE_VEHICLE:\r\n\r\n            return VehicleReducer[action.type](newState, action)\r\n\r\n\r\n        case ActionsTypes.CHANGE_VIEW:\r\n        case ActionsTypes.START_LOADING_ANIMATION:\r\n        case ActionsTypes.STOP_LOADING_ANIMATION:\r\n            return DisplayReducer[action.type](newState, action)\r\n\r\n\r\n        case ActionsTypes.NEW_SKETCH:\r\n        case ActionsTypes.CHOOSE_SKETCH:\r\n        case ActionsTypes.CLONE_SKETCH:\r\n        case ActionsTypes.RENAME_SKETCH:\r\n        case ActionsTypes.DELETE_SKETCH:\r\n            return SketchReducer[action.type](newState, action)\r\n\r\n        case ActionsTypes.CLICKED_PENDING_ORDER:\r\n        case ActionsTypes.CLICKED_CLOSE_PENDING_ORDER:\r\n        case ActionsTypes.CLICKED_REMOVE_PENDING_ORDER:\r\n        case ActionsTypes.CLICKED_MERGE_PENDING_ORDER:\r\n        case ActionsTypes.CLICKED_SPLIT_PENDING_ORDER:\r\n        case ActionsTypes.CLICKED_CHANGE_PENDING_ORDER:\r\n        case ActionsTypes.CLICKED_CHANGE_TIME_PENDING_ORDER:\r\n        case ActionsTypes.CLICKED_REPLACE_EXISTING_PENDING_ORDER:\r\n        case ActionsTypes.CLICKED_PUBLIC_TRANSPORT_PENDING_ORDER:\r\n        case ActionsTypes.CLICKED_ADD_TO_PENDING_PENDING_ORDER:\r\n        case ActionsTypes.REMOVE_PENDING_ORDER_STATUS:\r\n        case ActionsTypes.CLICKED_MOVE_TO_TOP_PENDING_ORDER:\r\n        case ActionsTypes.CLICKED_MOVE_TO_BOTTOM_PENDING_ORDER:\r\n        case ActionsTypes.CLICKED_ADD_TO_VEHICLE_PENDING_ORDER:\r\n\r\n            return PendingOrdersReducer[action.type](newState, action)\r\n        case ActionsTypes.DELETE_SKETCH_DRIVE:\r\n        case ActionsTypes.UPDATE_SKETCH_DRIVE:\r\n        case ActionsTypes.REMOVE_ORDER_FROM_SKETCH_DRIVE:\r\n        case ActionsTypes.UPDATE_SKETCH_DRIVE_WITH_MERGED_ORDER:\r\n        case ActionsTypes.REPLACE_SKETCH_DRIVE_WITH_ORDER:\r\n        case ActionsTypes.ADD_SKETCH_DRIVE_FROM_PENDING_ORDER:\r\n            return SketchDriveReducer[action.type](newState, action);\r\n\r\n        case ActionsTypes.UPDATE_LOCATION_GROUP:\r\n        case ActionsTypes.DELETE_LOCATION_GROUP:\r\n        case ActionsTypes.NEW_LOCATION_GROUP:\r\n        case ActionsTypes.CLONE_LOCATION_GROUP:\r\n        case ActionsTypes.RENAME_LOCATION_GROUP:\r\n        case ActionsTypes.CHOOSE_LOCATION_GROUP:\r\n        case ActionsTypes.CHOOSE_LOCATION_GROUP_TAB:\r\n\r\n            return LocationGroupReducer[action.type](newState, action)\r\n        case ActionsTypes.ADD_NEW_LOCATION:\r\n        case ActionsTypes.START_EDIT_LOCATION:\r\n        case ActionsTypes.STOP_EDIT_LOCATION:\r\n        case ActionsTypes.UPDATE_LOCATION:\r\n        case ActionsTypes.DELETE_LOCATION:\r\n\r\n            return LocationReducer[action.type](newState, action)\r\n\r\n        case ActionsTypes.ADD_NEW_ROUTE:\r\n        case ActionsTypes.START_EDIT_ROUTE:\r\n        case ActionsTypes.STOP_EDIT_ROUTE:\r\n        case ActionsTypes.UPDATE_ROUTE:\r\n        case ActionsTypes.DELETE_ROUTE:\r\n        case ActionsTypes.ADD_LOCATION_TO_ROUTE:\r\n        case ActionsTypes.CLONE_ROUTE:\r\n\r\n            return RouteReducer[action.type](newState, action)\r\n\r\n        case ActionsTypes.ADD_NEW_TRANSPORT:\r\n        case ActionsTypes.START_EDIT_TRANSPORT:\r\n        case ActionsTypes.STOP_EDIT_TRANSPORT:\r\n        case ActionsTypes.UPDATE_TRANSPORT:\r\n        case ActionsTypes.DELETE_TRANSPORT:\r\n        case ActionsTypes.ADD_LOCATION_TO_TRANSPORT:\r\n        case ActionsTypes.CLONE_TRANSPORT:\r\n\r\n            return TransportReducer[action.type](newState, action)\r\n\r\n        default:\r\n            // @ts-ignore\r\n            break;\r\n\r\n    }\r\n\r\n    return newState\r\n}\r\nexport default reducer\r\n","import React from 'react';\r\nimport './App.css';\r\nimport {Provider} from 'react-redux';\r\nimport {createStore} from 'redux';\r\nimport reducer from '../store/reducer';\r\n\r\n\r\nconst store = createStore(reducer,\r\n    (window as any).__REDUX_DEVTOOLS_EXTENSION__ &&\r\n    (window as any).__REDUX_DEVTOOLS_EXTENSION__());\r\n\r\nexport const Root = ({\r\n                         children\r\n\r\n                     }: any) => (\r\n    <React.StrictMode> <Provider store={store}>{children}</Provider></React.StrictMode>\r\n);\r\n\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './hoc/App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport {Root} from './hoc/Root';\r\n\r\n\r\nReactDOM.render(\r\n    <Root>\r\n        <App/>\r\n    </Root>,\r\n    document.getElementById('root')\r\n);\r\n\r\nreportWebVitals();\r\n"],"sourceRoot":""}